/*
 *  CPAchecker is a tool for configurable software verification.
 *  This file is part of CPAchecker.
 *
 *  Copyright (C) 2007-2017  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 *  CPAchecker web page:
 *    http://cpachecker.sosy-lab.org
 */
package org.xidian.yk;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.Stack;

import org.sosy_lab.cpachecker.cfa.CFA;
import org.sosy_lab.cpachecker.cfa.ast.c.CExpressionAssignmentStatement;
import org.sosy_lab.cpachecker.cfa.ast.c.CStatement;
import org.sosy_lab.cpachecker.cfa.model.CFAEdge;
import org.sosy_lab.cpachecker.cfa.model.CFANode;
import org.sosy_lab.cpachecker.cfa.model.c.CAssumeEdge;
import org.sosy_lab.cpachecker.cfa.model.c.CStatementEdge;

public class Operators {

  public static void markKeyEdgesOfCFA(CFA cfa){
    Stack<CFANode> nodeStack=new Stack<CFANode>();
    CFANode root=cfa.getMainFunction();
    nodeStack.push(root);
    while(!nodeStack.isEmpty())
    {
       CFANode node=nodeStack.pop();
       node.setTraversed(true);
       List<CFAEdge> leaving = node.getLeavingEdge();
       if(leaving!=null)
       {
         for(CFAEdge edge:leaving)
         {
            if(isKeyEdge(edge))//<yangkai> 分析关键变量
            {
              edge.setKeyEdge(true);
              System.out.println(edge);
            }

            CFANode sucNode=edge.getSuccessor();
            if(!sucNode.isTraversed())
            {
              nodeStack.push(sucNode);
            }
         }
       }
    }
  }
  public static boolean isKeyEdge(CFAEdge edge){
    if(edge instanceof CStatementEdge){//赋值语句
      CStatement statement = ((CStatementEdge) edge).getStatement();
      if(statement instanceof CExpressionAssignmentStatement){
         if(((CExpressionAssignmentStatement) statement).getLeftHandSide().hasKeyVar())
           return true;
      }
    }
    else if(edge instanceof CAssumeEdge){//判断语句
      if(((CAssumeEdge) edge).getExpression().hasKeyVar()){
        return true;
      }
    }
    return false;
  }
  public static void initKeyVarSet() throws IOException{//初始化关键变量集合
      FileReader fr=new FileReader("D:\\property\\propositions.txt");
      assert fr!=null;
      BufferedReader br=new BufferedReader(fr);
      String ps="";
      String s;
      while((s=br.readLine())!=null){
          ps=ps+s;
      }

      String s1[]=ps.split(" ");//根据空格进行分割
      for(int i=0; i<s1.length; i++){
        int index = s1[i].indexOf("::");
        if(index!=-1){
          String varName = s1[i].substring(index);
          KeyVar.keyVarSet.add(varName);
        }
        i++;
      }

      br.close();
  }
  public static void updateKeyVarSet(){//更新关键变量集合

  }
}
