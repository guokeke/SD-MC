digraph CFA {
970 [shape="diamond"]
970 [shape="diamond"]
3229 [shape="diamond"]
3229 [shape="diamond"]
3234 [shape="diamond"]
3234 [shape="diamond"]
3237 [shape="diamond"]
3237 [shape="diamond"]
1049 [shape="diamond"]
1049 [shape="diamond"]
3241 [shape="diamond"]
3241 [shape="diamond"]
3246 [shape="diamond"]
3246 [shape="diamond"]
3250 [shape="diamond"]
3250 [shape="diamond"]
3254 [shape="diamond"]
3254 [shape="diamond"]
3258 [shape="diamond"]
3258 [shape="diamond"]
3282 [shape="doublecircle"]
2861 [shape="diamond"]
2861 [shape="diamond"]
2867 [shape="diamond"]
2867 [shape="diamond"]
2862 [shape="diamond"]
2862 [shape="diamond"]
2890 [shape="diamond"]
2890 [shape="diamond"]
2892 [shape="diamond"]
2892 [shape="diamond"]
2894 [shape="diamond"]
2894 [shape="diamond"]
2761 [shape="doublecircle"]
2772 [shape="doublecircle"]
2783 [shape="doublecircle"]
2919 [shape="diamond"]
2919 [shape="diamond"]
2940 [shape="diamond"]
2940 [shape="diamond"]
3286 [shape="diamond"]
3286 [shape="diamond"]
3284 [shape="diamond"]
3284 [shape="diamond"]
3417 [shape="diamond"]
3417 [shape="diamond"]
3423 [shape="diamond"]
3423 [shape="diamond"]
3425 [shape="diamond"]
3425 [shape="diamond"]
5051 [shape="diamond"]
5051 [shape="diamond"]
5055 [shape="diamond"]
5055 [shape="diamond"]
5056 [shape="diamond"]
5056 [shape="diamond"]
5060 [shape="diamond"]
5060 [shape="diamond"]
5064 [shape="diamond"]
5064 [shape="diamond"]
5068 [shape="diamond"]
5068 [shape="diamond"]
5072 [shape="diamond"]
5072 [shape="diamond"]
5076 [shape="diamond"]
5076 [shape="diamond"]
3424 [shape="diamond"]
3424 [shape="diamond"]
3441 [shape="diamond"]
3441 [shape="diamond"]
3446 [shape="diamond"]
3446 [shape="diamond"]
5087 [shape="diamond"]
5087 [shape="diamond"]
1572 [shape="doublecircle"]
1578 [shape="doublecircle"]
1583 [shape="diamond"]
1583 [shape="diamond"]
1587 [shape="doublecircle"]
1596 [shape="doublecircle"]
1599 [shape="diamond"]
1599 [shape="diamond"]
1603 [shape="diamond"]
1603 [shape="diamond"]
1608 [shape="doublecircle"]
1616 [shape="doublecircle"]
1617 [shape="diamond"]
1617 [shape="diamond"]
1619 [shape="diamond"]
1619 [shape="diamond"]
1844 [shape="diamond"]
1844 [shape="diamond"]
1848 [shape="doublecircle"]
1849 [shape="diamond"]
1849 [shape="diamond"]
1856 [shape="diamond"]
1856 [shape="diamond"]
1478 [shape="doublecircle"]
1482 [shape="diamond"]
1482 [shape="diamond"]
1491 [shape="diamond"]
1491 [shape="diamond"]
621 [shape="doublecircle"]
6439 [shape="diamond"]
6439 [shape="diamond"]
6440 [shape="diamond"]
6440 [shape="diamond"]
6443 [shape="diamond"]
6443 [shape="diamond"]
6449 [shape="diamond"]
6449 [shape="diamond"]
624 [shape="diamond"]
624 [shape="diamond"]
623 [shape="diamond"]
623 [shape="diamond"]
637 [shape="diamond"]
637 [shape="diamond"]
6209 [shape="doublecircle"]
6210 [shape="diamond"]
6210 [shape="diamond"]
6226 [shape="diamond"]
6226 [shape="diamond"]
5914 [shape="doublecircle"]
5915 [shape="diamond"]
5915 [shape="diamond"]
5930 [shape="doublecircle"]
5931 [shape="diamond"]
5931 [shape="diamond"]
5946 [shape="doublecircle"]
5947 [shape="diamond"]
5947 [shape="diamond"]
5961 [shape="diamond"]
5961 [shape="diamond"]
6257 [shape="diamond"]
6257 [shape="diamond"]
437 [shape="diamond"]
437 [shape="diamond"]
433 [shape="diamond"]
433 [shape="diamond"]
492 [shape="doublecircle"]
493 [shape="diamond"]
493 [shape="diamond"]
525 [shape="diamond"]
525 [shape="diamond"]
526 [shape="diamond"]
526 [shape="diamond"]
529 [shape="diamond"]
529 [shape="diamond"]
533 [shape="diamond"]
533 [shape="diamond"]
535 [shape="diamond"]
535 [shape="diamond"]
537 [shape="diamond"]
537 [shape="diamond"]
539 [shape="diamond"]
539 [shape="diamond"]
541 [shape="diamond"]
541 [shape="diamond"]
490 [shape="diamond"]
490 [shape="diamond"]
510 [shape="doublecircle"]
511 [shape="diamond"]
511 [shape="diamond"]
440 [shape="diamond"]
440 [shape="diamond"]
6258 [shape="diamond"]
6258 [shape="diamond"]
6261 [shape="diamond"]
6261 [shape="diamond"]
6267 [shape="doublecircle"]
935 [shape="diamond"]
935 [shape="diamond"]
193 [shape="doublecircle"]
196 [shape="doublecircle"]
197 [shape="diamond"]
197 [shape="diamond"]
210 [shape="diamond"]
210 [shape="diamond"]
211 [shape="diamond"]
211 [shape="diamond"]
240 [shape="diamond"]
240 [shape="diamond"]
251 [shape="diamond"]
251 [shape="diamond"]
246 [shape="diamond"]
246 [shape="diamond"]
217 [shape="doublecircle"]
222 [shape="doublecircle"]
223 [shape="diamond"]
223 [shape="diamond"]
235 [shape="diamond"]
235 [shape="diamond"]
5714 [shape="doublecircle"]
5718 [shape="diamond"]
5718 [shape="diamond"]
5722 [shape="doublecircle"]
5723 [shape="diamond"]
5723 [shape="diamond"]
5737 [shape="diamond"]
5737 [shape="diamond"]
5629 [shape="diamond"]
5629 [shape="diamond"]
5454 [shape="doublecircle"]
5457 [shape="doublecircle"]
5458 [shape="diamond"]
5458 [shape="diamond"]
5471 [shape="diamond"]
5471 [shape="diamond"]
5474 [shape="doublecircle"]
5475 [shape="diamond"]
5475 [shape="diamond"]
5804 [shape="diamond"]
5804 [shape="diamond"]
5376 [shape="doublecircle"]
5156 [shape="doublecircle"]
5161 [shape="diamond"]
5161 [shape="diamond"]
5158 [shape="diamond"]
5158 [shape="diamond"]
5799 [shape="diamond"]
5799 [shape="diamond"]
5788 [shape="diamond"]
5788 [shape="diamond"]
5793 [shape="doublecircle"]
6147 [shape="diamond"]
6147 [shape="diamond"]
6149 [shape="diamond"]
6149 [shape="diamond"]
6157 [shape="diamond"]
6157 [shape="diamond"]
6137 [shape="diamond"]
6137 [shape="diamond"]
6139 [shape="diamond"]
6139 [shape="diamond"]
5996 [shape="diamond"]
5996 [shape="diamond"]
5998 [shape="diamond"]
5998 [shape="diamond"]
6007 [shape="doublecircle"]
6010 [shape="doublecircle"]
6011 [shape="diamond"]
6011 [shape="diamond"]
6027 [shape="diamond"]
6027 [shape="diamond"]
6030 [shape="diamond"]
6030 [shape="diamond"]
6038 [shape="doublecircle"]
6039 [shape="diamond"]
6039 [shape="diamond"]
6053 [shape="diamond"]
6053 [shape="diamond"]
6057 [shape="doublecircle"]
6061 [shape="diamond"]
6061 [shape="diamond"]
6037 [shape="diamond"]
6037 [shape="diamond"]
6071 [shape="doublecircle"]
6072 [shape="diamond"]
6072 [shape="diamond"]
6086 [shape="diamond"]
6086 [shape="diamond"]
6090 [shape="doublecircle"]
6094 [shape="diamond"]
6094 [shape="diamond"]
6102 [shape="doublecircle"]
6103 [shape="diamond"]
6103 [shape="diamond"]
6117 [shape="diamond"]
6117 [shape="diamond"]
6121 [shape="doublecircle"]
6125 [shape="diamond"]
6125 [shape="diamond"]
5172 [shape="doublecircle"]
5173 [shape="diamond"]
5173 [shape="diamond"]
5179 [shape="diamond"]
5179 [shape="diamond"]
5184 [shape="doublecircle"]
5185 [shape="diamond"]
5185 [shape="diamond"]
5191 [shape="diamond"]
5191 [shape="diamond"]
5197 [shape="doublecircle"]
5200 [shape="diamond"]
5200 [shape="diamond"]
5206 [shape="diamond"]
5206 [shape="diamond"]
5215 [shape="doublecircle"]
5218 [shape="diamond"]
5218 [shape="diamond"]
5230 [shape="doublecircle"]
5235 [shape="diamond"]
5235 [shape="diamond"]
5241 [shape="diamond"]
5241 [shape="diamond"]
5253 [shape="doublecircle"]
5257 [shape="doublecircle"]
5261 [shape="diamond"]
5261 [shape="diamond"]
5265 [shape="doublecircle"]
5270 [shape="diamond"]
5270 [shape="diamond"]
5277 [shape="diamond"]
5277 [shape="diamond"]
5282 [shape="doublecircle"]
5285 [shape="diamond"]
5285 [shape="diamond"]
5297 [shape="diamond"]
5297 [shape="diamond"]
5299 [shape="diamond"]
5299 [shape="diamond"]
5309 [shape="diamond"]
5309 [shape="diamond"]
5290 [shape="diamond"]
5290 [shape="diamond"]
5318 [shape="diamond"]
5318 [shape="diamond"]
5340 [shape="doublecircle"]
5346 [shape="doublecircle"]
5352 [shape="doublecircle"]
5321 [shape="diamond"]
5321 [shape="diamond"]
5324 [shape="diamond"]
5324 [shape="diamond"]
5255 [shape="diamond"]
5255 [shape="diamond"]
5359 [shape="diamond"]
5359 [shape="diamond"]
5483 [shape="doublecircle"]
5484 [shape="diamond"]
5484 [shape="diamond"]
5497 [shape="diamond"]
5497 [shape="diamond"]
5502 [shape="diamond"]
5502 [shape="diamond"]
5508 [shape="diamond"]
5508 [shape="diamond"]
5505 [shape="diamond"]
5505 [shape="diamond"]
5517 [shape="doublecircle"]
5518 [shape="diamond"]
5518 [shape="diamond"]
5533 [shape="doublecircle"]
5534 [shape="diamond"]
5534 [shape="diamond"]
5547 [shape="diamond"]
5547 [shape="diamond"]
5550 [shape="doublecircle"]
5551 [shape="diamond"]
5551 [shape="diamond"]
5559 [shape="doublecircle"]
5560 [shape="diamond"]
5560 [shape="diamond"]
5573 [shape="diamond"]
5573 [shape="diamond"]
5579 [shape="doublecircle"]
5580 [shape="diamond"]
5580 [shape="diamond"]
5595 [shape="doublecircle"]
5598 [shape="diamond"]
5598 [shape="diamond"]
5604 [shape="diamond"]
5604 [shape="diamond"]
5610 [shape="diamond"]
5610 [shape="diamond"]
5611 [shape="diamond"]
5611 [shape="diamond"]
5617 [shape="doublecircle"]
5625 [shape="diamond"]
5625 [shape="diamond"]
462 [shape="doublecircle"]
466 [shape="diamond"]
466 [shape="diamond"]
467 [shape="diamond"]
467 [shape="diamond"]
481 [shape="diamond"]
481 [shape="diamond"]
939 [shape="diamond"]
939 [shape="diamond"]
564 [shape="doublecircle"]
6550 [shape="diamond"]
6550 [shape="diamond"]
6551 [shape="diamond"]
6551 [shape="diamond"]
6561 [shape="diamond"]
6561 [shape="diamond"]
568 [shape="diamond"]
568 [shape="diamond"]
1445 [shape="diamond"]
1445 [shape="diamond"]
1451 [shape="diamond"]
1451 [shape="diamond"]
1354 [shape="doublecircle"]
1355 [shape="diamond"]
1355 [shape="diamond"]
1360 [shape="diamond"]
1360 [shape="diamond"]
1330 [shape="doublecircle"]
1334 [shape="doublecircle"]
1340 [shape="diamond"]
1340 [shape="diamond"]
1343 [shape="diamond"]
1343 [shape="diamond"]
1159 [shape="diamond"]
1159 [shape="diamond"]
1341 [shape="diamond"]
1341 [shape="diamond"]
4732 [shape="diamond"]
4732 [shape="diamond"]
4736 [shape="diamond"]
4736 [shape="diamond"]
4737 [shape="diamond"]
4737 [shape="diamond"]
1182 [shape="diamond"]
1182 [shape="diamond"]
1183 [shape="diamond"]
1183 [shape="diamond"]
3826 [shape="diamond"]
3826 [shape="diamond"]
3839 [shape="diamond"]
3839 [shape="diamond"]
3824 [shape="diamond"]
3824 [shape="diamond"]
5035 [shape="diamond"]
5035 [shape="diamond"]
5037 [shape="diamond"]
5037 [shape="diamond"]
5038 [shape="diamond"]
5038 [shape="diamond"]
5042 [shape="diamond"]
5042 [shape="diamond"]
3483 [shape="doublecircle"]
3641 [shape="diamond"]
3641 [shape="diamond"]
3517 [shape="diamond"]
3517 [shape="diamond"]
3519 [shape="diamond"]
3519 [shape="diamond"]
3518 [shape="diamond"]
3518 [shape="diamond"]
3523 [shape="diamond"]
3523 [shape="diamond"]
3525 [shape="diamond"]
3525 [shape="diamond"]
3527 [shape="diamond"]
3527 [shape="diamond"]
4288 [shape="diamond"]
4288 [shape="diamond"]
4290 [shape="diamond"]
4290 [shape="diamond"]
4293 [shape="diamond"]
4293 [shape="diamond"]
4303 [shape="diamond"]
4303 [shape="diamond"]
4337 [shape="diamond"]
4337 [shape="diamond"]
4346 [shape="diamond"]
4346 [shape="diamond"]
4355 [shape="diamond"]
4355 [shape="diamond"]
426 [shape="diamond"]
426 [shape="diamond"]
428 [shape="diamond"]
428 [shape="diamond"]
427 [shape="diamond"]
427 [shape="diamond"]
6253 [shape="doublecircle"]
6193 [shape="doublecircle"]
6194 [shape="diamond"]
6194 [shape="diamond"]
435 [shape="diamond"]
435 [shape="diamond"]
446 [shape="diamond"]
446 [shape="diamond"]
451 [shape="diamond"]
451 [shape="diamond"]
452 [shape="diamond"]
452 [shape="diamond"]
3806 [shape="diamond"]
3806 [shape="diamond"]
3811 [shape="diamond"]
3811 [shape="diamond"]
3814 [shape="diamond"]
3814 [shape="diamond"]
3812 [shape="diamond"]
3812 [shape="diamond"]
3819 [shape="diamond"]
3819 [shape="diamond"]
3818 [shape="diamond"]
3818 [shape="diamond"]
3825 [shape="diamond"]
3825 [shape="diamond"]
3828 [shape="diamond"]
3828 [shape="diamond"]
3787 [shape="doublecircle"]
3790 [shape="diamond"]
3790 [shape="diamond"]
3791 [shape="diamond"]
3791 [shape="diamond"]
3797 [shape="diamond"]
3797 [shape="diamond"]
3801 [shape="diamond"]
3801 [shape="diamond"]
3739 [shape="diamond"]
3739 [shape="diamond"]
3737 [shape="diamond"]
3737 [shape="diamond"]
4676 [shape="diamond"]
4676 [shape="diamond"]
4678 [shape="diamond"]
4678 [shape="diamond"]
4683 [shape="diamond"]
4683 [shape="diamond"]
4684 [shape="diamond"]
4684 [shape="diamond"]
4714 [shape="diamond"]
4714 [shape="diamond"]
4716 [shape="diamond"]
4716 [shape="diamond"]
4720 [shape="diamond"]
4720 [shape="diamond"]
4724 [shape="diamond"]
4724 [shape="diamond"]
4691 [shape="diamond"]
4691 [shape="diamond"]
4693 [shape="diamond"]
4693 [shape="diamond"]
3470 [shape="diamond"]
3470 [shape="diamond"]
3491 [shape="diamond"]
3491 [shape="diamond"]
3493 [shape="diamond"]
3493 [shape="diamond"]
4696 [shape="diamond"]
4696 [shape="diamond"]
4694 [shape="diamond"]
4694 [shape="diamond"]
4703 [shape="diamond"]
4703 [shape="diamond"]
3744 [shape="diamond"]
3744 [shape="diamond"]
3749 [shape="diamond"]
3749 [shape="diamond"]
3768 [shape="diamond"]
3768 [shape="diamond"]
3773 [shape="diamond"]
3773 [shape="diamond"]
3778 [shape="diamond"]
3778 [shape="diamond"]
3867 [shape="diamond"]
3867 [shape="diamond"]
3869 [shape="diamond"]
3869 [shape="diamond"]
3873 [shape="doublecircle"]
4955 [shape="diamond"]
4955 [shape="diamond"]
3876 [shape="diamond"]
3876 [shape="diamond"]
3754 [shape="diamond"]
3754 [shape="diamond"]
3755 [shape="diamond"]
3755 [shape="diamond"]
3759 [shape="diamond"]
3759 [shape="diamond"]
3761 [shape="diamond"]
3761 [shape="diamond"]
3763 [shape="diamond"]
3763 [shape="diamond"]
3882 [shape="diamond"]
3882 [shape="diamond"]
3889 [shape="diamond"]
3889 [shape="diamond"]
4800 [shape="diamond"]
4800 [shape="diamond"]
4765 [shape="diamond"]
4765 [shape="diamond"]
4767 [shape="diamond"]
4767 [shape="diamond"]
4804 [shape="diamond"]
4804 [shape="diamond"]
3900 [shape="diamond"]
3900 [shape="diamond"]
3901 [shape="diamond"]
3901 [shape="diamond"]
3905 [shape="diamond"]
3905 [shape="diamond"]
3906 [shape="diamond"]
3906 [shape="diamond"]
4838 [shape="diamond"]
4838 [shape="diamond"]
4840 [shape="diamond"]
4840 [shape="diamond"]
4965 [shape="diamond"]
4965 [shape="diamond"]
4969 [shape="diamond"]
4969 [shape="diamond"]
4972 [shape="diamond"]
4972 [shape="diamond"]
4974 [shape="diamond"]
4974 [shape="diamond"]
4970 [shape="diamond"]
4970 [shape="diamond"]
4991 [shape="diamond"]
4991 [shape="diamond"]
4995 [shape="diamond"]
4995 [shape="diamond"]
5004 [shape="diamond"]
5004 [shape="diamond"]
5005 [shape="diamond"]
5005 [shape="diamond"]
5013 [shape="diamond"]
5013 [shape="diamond"]
5018 [shape="diamond"]
5018 [shape="diamond"]
3957 [shape="diamond"]
3957 [shape="diamond"]
3962 [shape="diamond"]
3962 [shape="diamond"]
954 [shape="doublecircle"]
957 [shape="diamond"]
957 [shape="diamond"]
3971 [shape="doublecircle"]
3975 [shape="diamond"]
3975 [shape="diamond"]
3977 [shape="diamond"]
3977 [shape="diamond"]
3980 [shape="diamond"]
3980 [shape="diamond"]
4017 [shape="diamond"]
4017 [shape="diamond"]
3648 [shape="diamond"]
3648 [shape="diamond"]
3649 [shape="diamond"]
3649 [shape="diamond"]
3653 [shape="diamond"]
3653 [shape="diamond"]
3654 [shape="diamond"]
3654 [shape="diamond"]
3652 [shape="diamond"]
3652 [shape="diamond"]
3663 [shape="diamond"]
3663 [shape="diamond"]
3664 [shape="diamond"]
3664 [shape="diamond"]
3662 [shape="diamond"]
3662 [shape="diamond"]
3673 [shape="diamond"]
3673 [shape="diamond"]
3675 [shape="diamond"]
3675 [shape="diamond"]
3677 [shape="diamond"]
3677 [shape="diamond"]
3679 [shape="diamond"]
3679 [shape="diamond"]
3678 [shape="diamond"]
3678 [shape="diamond"]
3691 [shape="diamond"]
3691 [shape="diamond"]
3693 [shape="diamond"]
3693 [shape="diamond"]
3692 [shape="diamond"]
3692 [shape="diamond"]
3702 [shape="diamond"]
3702 [shape="diamond"]
3705 [shape="diamond"]
3705 [shape="diamond"]
3701 [shape="diamond"]
3701 [shape="diamond"]
3719 [shape="diamond"]
3719 [shape="diamond"]
3727 [shape="diamond"]
3727 [shape="diamond"]
3736 [shape="diamond"]
3736 [shape="diamond"]
4061 [shape="diamond"]
4061 [shape="diamond"]
4063 [shape="diamond"]
4063 [shape="diamond"]
4066 [shape="diamond"]
4066 [shape="diamond"]
4068 [shape="diamond"]
4068 [shape="diamond"]
3714 [shape="diamond"]
3714 [shape="diamond"]
4071 [shape="diamond"]
4071 [shape="diamond"]
4067 [shape="diamond"]
4067 [shape="diamond"]
4084 [shape="diamond"]
4084 [shape="diamond"]
4085 [shape="diamond"]
4085 [shape="diamond"]
4078 [shape="diamond"]
4078 [shape="diamond"]
4081 [shape="diamond"]
4081 [shape="diamond"]
4094 [shape="diamond"]
4094 [shape="diamond"]
4099 [shape="diamond"]
4099 [shape="diamond"]
4064 [shape="diamond"]
4064 [shape="diamond"]
4106 [shape="diamond"]
4106 [shape="diamond"]
4108 [shape="diamond"]
4108 [shape="diamond"]
4110 [shape="diamond"]
4110 [shape="diamond"]
4114 [shape="diamond"]
4114 [shape="diamond"]
4025 [shape="diamond"]
4025 [shape="diamond"]
4029 [shape="doublecircle"]
3924 [shape="diamond"]
3924 [shape="diamond"]
3926 [shape="diamond"]
3926 [shape="diamond"]
4034 [shape="diamond"]
4034 [shape="diamond"]
4039 [shape="diamond"]
4039 [shape="diamond"]
4008 [shape="diamond"]
4008 [shape="diamond"]
4009 [shape="diamond"]
4009 [shape="diamond"]
4846 [shape="diamond"]
4846 [shape="diamond"]
4851 [shape="diamond"]
4851 [shape="diamond"]
4854 [shape="diamond"]
4854 [shape="diamond"]
4859 [shape="doublecircle"]
4862 [shape="diamond"]
4862 [shape="diamond"]
4868 [shape="doublecircle"]
4873 [shape="diamond"]
4873 [shape="diamond"]
4874 [shape="diamond"]
4874 [shape="diamond"]
4870 [shape="diamond"]
4870 [shape="diamond"]
4883 [shape="diamond"]
4883 [shape="diamond"]
4861 [shape="diamond"]
4861 [shape="diamond"]
4891 [shape="doublecircle"]
4896 [shape="diamond"]
4896 [shape="diamond"]
4901 [shape="diamond"]
4901 [shape="diamond"]
4902 [shape="diamond"]
4902 [shape="diamond"]
3984 [shape="diamond"]
3984 [shape="diamond"]
4961 [shape="diamond"]
4961 [shape="diamond"]
4956 [shape="diamond"]
4956 [shape="diamond"]
3569 [shape="diamond"]
3569 [shape="diamond"]
3547 [shape="doublecircle"]
3554 [shape="diamond"]
3554 [shape="diamond"]
3555 [shape="diamond"]
3555 [shape="diamond"]
3549 [shape="diamond"]
3549 [shape="diamond"]
3575 [shape="diamond"]
3575 [shape="diamond"]
3578 [shape="diamond"]
3578 [shape="diamond"]
3560 [shape="diamond"]
3560 [shape="diamond"]
3564 [shape="diamond"]
3564 [shape="diamond"]
3539 [shape="diamond"]
3539 [shape="diamond"]
3537 [shape="diamond"]
3537 [shape="diamond"]
4362 [shape="diamond"]
4362 [shape="diamond"]
4371 [shape="diamond"]
4371 [shape="diamond"]
4372 [shape="diamond"]
4372 [shape="diamond"]
4382 [shape="diamond"]
4382 [shape="diamond"]
4378 [shape="diamond"]
4378 [shape="diamond"]
4390 [shape="diamond"]
4390 [shape="diamond"]
4386 [shape="diamond"]
4386 [shape="diamond"]
4402 [shape="diamond"]
4402 [shape="diamond"]
4411 [shape="diamond"]
4411 [shape="diamond"]
4420 [shape="diamond"]
4420 [shape="diamond"]
4429 [shape="diamond"]
4429 [shape="diamond"]
4431 [shape="diamond"]
4431 [shape="diamond"]
4430 [shape="diamond"]
4430 [shape="diamond"]
4435 [shape="diamond"]
4435 [shape="diamond"]
4441 [shape="diamond"]
4441 [shape="diamond"]
4448 [shape="diamond"]
4448 [shape="diamond"]
4457 [shape="diamond"]
4457 [shape="diamond"]
4466 [shape="diamond"]
4466 [shape="diamond"]
4447 [shape="diamond"]
4447 [shape="diamond"]
4472 [shape="diamond"]
4472 [shape="diamond"]
4481 [shape="diamond"]
4481 [shape="diamond"]
4490 [shape="diamond"]
4490 [shape="diamond"]
4495 [shape="doublecircle"]
4499 [shape="diamond"]
4499 [shape="diamond"]
4471 [shape="diamond"]
4471 [shape="diamond"]
4510 [shape="diamond"]
4510 [shape="diamond"]
4528 [shape="doublecircle"]
4529 [shape="diamond"]
4529 [shape="diamond"]
4531 [shape="diamond"]
4531 [shape="diamond"]
4509 [shape="diamond"]
4509 [shape="diamond"]
4572 [shape="doublecircle"]
4573 [shape="diamond"]
4573 [shape="diamond"]
4575 [shape="diamond"]
4575 [shape="diamond"]
4570 [shape="diamond"]
4570 [shape="diamond"]
4338 [shape="diamond"]
4338 [shape="diamond"]
4640 [shape="diamond"]
4640 [shape="diamond"]
4645 [shape="diamond"]
4645 [shape="diamond"]
4650 [shape="diamond"]
4650 [shape="diamond"]
4513 [shape="diamond"]
4513 [shape="diamond"]
4516 [shape="diamond"]
4516 [shape="diamond"]
4523 [shape="diamond"]
4523 [shape="diamond"]
4545 [shape="doublecircle"]
4546 [shape="diamond"]
4546 [shape="diamond"]
4558 [shape="diamond"]
4558 [shape="diamond"]
4547 [shape="diamond"]
4547 [shape="diamond"]
4566 [shape="diamond"]
4566 [shape="diamond"]
4559 [shape="diamond"]
4559 [shape="diamond"]
4500 [shape="diamond"]
4500 [shape="diamond"]
4342 [shape="diamond"]
4342 [shape="diamond"]
4589 [shape="diamond"]
4589 [shape="diamond"]
4591 [shape="diamond"]
4591 [shape="diamond"]
4596 [shape="diamond"]
4596 [shape="diamond"]
338 [shape="diamond"]
338 [shape="diamond"]
4602 [shape="diamond"]
4602 [shape="diamond"]
341 [shape="diamond"]
341 [shape="diamond"]
352 [shape="diamond"]
352 [shape="diamond"]
354 [shape="diamond"]
354 [shape="diamond"]
361 [shape="diamond"]
361 [shape="diamond"]
4610 [shape="diamond"]
4610 [shape="diamond"]
4616 [shape="diamond"]
4616 [shape="diamond"]
4623 [shape="diamond"]
4623 [shape="diamond"]
4626 [shape="diamond"]
4626 [shape="diamond"]
4631 [shape="diamond"]
4631 [shape="diamond"]
4633 [shape="diamond"]
4633 [shape="diamond"]
4314 [shape="diamond"]
4314 [shape="diamond"]
4323 [shape="diamond"]
4323 [shape="diamond"]
743 [shape="diamond"]
743 [shape="diamond"]
647 [shape="diamond"]
647 [shape="diamond"]
7292 [shape="doublecircle"]
2044 [shape="diamond"]
2044 [shape="diamond"]
2048 [shape="diamond"]
2048 [shape="diamond"]
2060 [shape="diamond"]
2060 [shape="diamond"]
2066 [shape="diamond"]
2066 [shape="diamond"]
7180 [shape="diamond"]
7180 [shape="diamond"]
7186 [shape="doublecircle"]
7191 [shape="diamond"]
7191 [shape="diamond"]
7193 [shape="diamond"]
7193 [shape="diamond"]
7200 [shape="diamond"]
7200 [shape="diamond"]
7204 [shape="doublecircle"]
7205 [shape="diamond"]
7205 [shape="diamond"]
7212 [shape="diamond"]
7212 [shape="diamond"]
7249 [shape="diamond"]
7249 [shape="diamond"]
7252 [shape="diamond"]
7252 [shape="diamond"]
7203 [shape="diamond"]
7203 [shape="diamond"]
7217 [shape="diamond"]
7217 [shape="diamond"]
7220 [shape="diamond"]
7220 [shape="diamond"]
7219 [shape="diamond"]
7219 [shape="diamond"]
7218 [shape="diamond"]
7218 [shape="diamond"]
7234 [shape="diamond"]
7234 [shape="diamond"]
7235 [shape="diamond"]
7235 [shape="diamond"]
7473 [shape="diamond"]
7473 [shape="diamond"]
7476 [shape="doublecircle"]
7477 [shape="diamond"]
7477 [shape="diamond"]
7486 [shape="diamond"]
7486 [shape="diamond"]
7488 [shape="diamond"]
7488 [shape="diamond"]
7524 [shape="diamond"]
7524 [shape="diamond"]
7474 [shape="diamond"]
7474 [shape="diamond"]
6754 [shape="doublecircle"]
6760 [shape="doublecircle"]
6766 [shape="doublecircle"]
2235 [shape="diamond"]
2235 [shape="diamond"]
2248 [shape="diamond"]
2248 [shape="diamond"]
2257 [shape="diamond"]
2257 [shape="diamond"]
2264 [shape="diamond"]
2264 [shape="diamond"]
816 [shape="diamond"]
816 [shape="diamond"]
822 [shape="diamond"]
822 [shape="diamond"]
823 [shape="diamond"]
823 [shape="diamond"]
830 [shape="doublecircle"]
835 [shape="diamond"]
835 [shape="diamond"]
840 [shape="diamond"]
840 [shape="diamond"]
2616 [shape="diamond"]
2616 [shape="diamond"]
2516 [shape="doublecircle"]
2522 [shape="diamond"]
2522 [shape="diamond"]
2524 [shape="diamond"]
2524 [shape="diamond"]
2321 [shape="diamond"]
2321 [shape="diamond"]
2330 [shape="diamond"]
2330 [shape="diamond"]
2334 [shape="doublecircle"]
2337 [shape="diamond"]
2337 [shape="diamond"]
2422 [shape="diamond"]
2422 [shape="diamond"]
2426 [shape="diamond"]
2426 [shape="diamond"]
2528 [shape="diamond"]
2528 [shape="diamond"]
2523 [shape="diamond"]
2523 [shape="diamond"]
7384 [shape="diamond"]
7384 [shape="diamond"]
7401 [shape="diamond"]
7401 [shape="diamond"]
7402 [shape="diamond"]
7402 [shape="diamond"]
7410 [shape="diamond"]
7410 [shape="diamond"]
7416 [shape="doublecircle"]
7421 [shape="diamond"]
7421 [shape="diamond"]
7423 [shape="diamond"]
7423 [shape="diamond"]
2536 [shape="diamond"]
2536 [shape="diamond"]
2541 [shape="doublecircle"]
2549 [shape="diamond"]
2549 [shape="diamond"]
2532 [shape="diamond"]
2532 [shape="diamond"]
2562 [shape="diamond"]
2562 [shape="diamond"]
7309 [shape="diamond"]
7309 [shape="diamond"]
7552 [shape="doublecircle"]
7558 [shape="doublecircle"]
7564 [shape="doublecircle"]
7566 [shape="diamond"]
7566 [shape="diamond"]
7570 [shape="diamond"]
7570 [shape="diamond"]
7001 [shape="doublecircle"]
7002 [shape="diamond"]
7002 [shape="diamond"]
7013 [shape="doublecircle"]
7016 [shape="diamond"]
7016 [shape="diamond"]
7027 [shape="diamond"]
7027 [shape="diamond"]
7033 [shape="doublecircle"]
6789 [shape="doublecircle"]
6790 [shape="diamond"]
6790 [shape="diamond"]
6793 [shape="diamond"]
6793 [shape="diamond"]
6792 [shape="diamond"]
6792 [shape="diamond"]
7064 [shape="diamond"]
7064 [shape="diamond"]
6854 [shape="doublecircle"]
6861 [shape="doublecircle"]
6865 [shape="diamond"]
6865 [shape="diamond"]
6870 [shape="diamond"]
6870 [shape="diamond"]
6875 [shape="diamond"]
6875 [shape="diamond"]
6880 [shape="diamond"]
6880 [shape="diamond"]
6863 [shape="diamond"]
6863 [shape="diamond"]
6943 [shape="doublecircle"]
6950 [shape="doublecircle"]
6953 [shape="diamond"]
6953 [shape="diamond"]
2081 [shape="doublecircle"]
2087 [shape="diamond"]
2087 [shape="diamond"]
6739 [shape="doublecircle"]
7274 [shape="doublecircle"]
7275 [shape="diamond"]
7275 [shape="diamond"]
7318 [shape="diamond"]
7318 [shape="diamond"]
7319 [shape="diamond"]
7319 [shape="diamond"]
7323 [shape="diamond"]
7323 [shape="diamond"]
7326 [shape="diamond"]
7326 [shape="diamond"]
7334 [shape="diamond"]
7334 [shape="diamond"]
7336 [shape="diamond"]
7336 [shape="diamond"]
2104 [shape="diamond"]
2104 [shape="diamond"]
2106 [shape="diamond"]
2106 [shape="diamond"]
2165 [shape="diamond"]
2165 [shape="diamond"]
2167 [shape="diamond"]
2167 [shape="diamond"]
2168 [shape="diamond"]
2168 [shape="diamond"]
2210 [shape="doublecircle"]
2214 [shape="diamond"]
2214 [shape="diamond"]
2222 [shape="diamond"]
2222 [shape="diamond"]
2200 [shape="diamond"]
2200 [shape="diamond"]
2206 [shape="diamond"]
2206 [shape="diamond"]
2179 [shape="diamond"]
2179 [shape="diamond"]
2185 [shape="diamond"]
2185 [shape="diamond"]
2570 [shape="doublecircle"]
2571 [shape="diamond"]
2571 [shape="diamond"]
2574 [shape="diamond"]
2574 [shape="diamond"]
2447 [shape="diamond"]
2447 [shape="diamond"]
2448 [shape="diamond"]
2448 [shape="diamond"]
2486 [shape="diamond"]
2486 [shape="diamond"]
2277 [shape="doublecircle"]
2278 [shape="diamond"]
2278 [shape="diamond"]
2281 [shape="diamond"]
2281 [shape="diamond"]
2290 [shape="doublecircle"]
2700 [shape="doublecircle"]
2701 [shape="diamond"]
2701 [shape="diamond"]
2704 [shape="diamond"]
2704 [shape="diamond"]
2621 [shape="doublecircle"]
2630 [shape="diamond"]
2630 [shape="diamond"]
2632 [shape="diamond"]
2632 [shape="diamond"]
2634 [shape="diamond"]
2634 [shape="diamond"]
2638 [shape="diamond"]
2638 [shape="diamond"]
2639 [shape="diamond"]
2639 [shape="diamond"]
2643 [shape="diamond"]
2643 [shape="diamond"]
2631 [shape="diamond"]
2631 [shape="diamond"]
2648 [shape="diamond"]
2648 [shape="diamond"]
2656 [shape="doublecircle"]
2664 [shape="diamond"]
2664 [shape="diamond"]
2670 [shape="diamond"]
2670 [shape="diamond"]
2672 [shape="diamond"]
2672 [shape="diamond"]
2681 [shape="diamond"]
2681 [shape="diamond"]
2685 [shape="diamond"]
2685 [shape="diamond"]
2687 [shape="diamond"]
2687 [shape="diamond"]
2623 [shape="diamond"]
2623 [shape="diamond"]
2711 [shape="diamond"]
2711 [shape="diamond"]
845 [shape="diamond"]
845 [shape="diamond"]
846 [shape="diamond"]
846 [shape="diamond"]
867 [shape="diamond"]
867 [shape="diamond"]
888 [shape="diamond"]
888 [shape="diamond"]
920 [shape="diamond"]
920 [shape="diamond"]
926 [shape="diamond"]
926 [shape="diamond"]
899 [shape="diamond"]
899 [shape="diamond"]
905 [shape="diamond"]
905 [shape="diamond"]
878 [shape="diamond"]
878 [shape="diamond"]
884 [shape="diamond"]
884 [shape="diamond"]
857 [shape="diamond"]
857 [shape="diamond"]
863 [shape="diamond"]
863 [shape="diamond"]
2489 [shape="diamond"]
2489 [shape="diamond"]
2450 [shape="diamond"]
2450 [shape="diamond"]
2459 [shape="doublecircle"]
2462 [shape="diamond"]
2462 [shape="diamond"]
2471 [shape="doublecircle"]
2474 [shape="diamond"]
2474 [shape="diamond"]
2119 [shape="diamond"]
2119 [shape="diamond"]
2125 [shape="diamond"]
2125 [shape="diamond"]
2107 [shape="diamond"]
2107 [shape="diamond"]
2133 [shape="diamond"]
2133 [shape="diamond"]
7346 [shape="diamond"]
7346 [shape="diamond"]
7094 [shape="diamond"]
7094 [shape="diamond"]
7101 [shape="doublecircle"]
7106 [shape="diamond"]
7106 [shape="diamond"]
7108 [shape="diamond"]
7108 [shape="diamond"]
7115 [shape="diamond"]
7115 [shape="diamond"]
7133 [shape="diamond"]
7133 [shape="diamond"]
7136 [shape="diamond"]
7136 [shape="diamond"]
7118 [shape="diamond"]
7118 [shape="diamond"]
7121 [shape="diamond"]
7121 [shape="diamond"]
7122 [shape="diamond"]
7122 [shape="diamond"]
6889 [shape="doublecircle"]
6893 [shape="doublecircle"]
6900 [shape="diamond"]
6900 [shape="diamond"]
6905 [shape="doublecircle"]
6909 [shape="doublecircle"]
6913 [shape="diamond"]
6913 [shape="diamond"]
6914 [shape="diamond"]
6914 [shape="diamond"]
7038 [shape="doublecircle"]
7051 [shape="diamond"]
7051 [shape="diamond"]
6805 [shape="diamond"]
6805 [shape="diamond"]
6808 [shape="diamond"]
6808 [shape="diamond"]
6796 [shape="diamond"]
6796 [shape="diamond"]
6799 [shape="diamond"]
6799 [shape="diamond"]
7409 [shape="diamond"]
7409 [shape="diamond"]
7429 [shape="diamond"]
7429 [shape="diamond"]
7390 [shape="diamond"]
7390 [shape="diamond"]
2340 [shape="diamond"]
2340 [shape="diamond"]
2344 [shape="diamond"]
2344 [shape="diamond"]
2350 [shape="diamond"]
2350 [shape="diamond"]
2356 [shape="doublecircle"]
2360 [shape="diamond"]
2360 [shape="diamond"]
2365 [shape="diamond"]
2365 [shape="diamond"]
2370 [shape="diamond"]
2370 [shape="diamond"]
2375 [shape="diamond"]
2375 [shape="diamond"]
2380 [shape="diamond"]
2380 [shape="diamond"]
2385 [shape="diamond"]
2385 [shape="diamond"]
2390 [shape="diamond"]
2390 [shape="diamond"]
2395 [shape="diamond"]
2395 [shape="diamond"]
2397 [shape="diamond"]
2397 [shape="diamond"]
2411 [shape="diamond"]
2411 [shape="diamond"]
2415 [shape="diamond"]
2415 [shape="diamond"]
2518 [shape="diamond"]
2518 [shape="diamond"]
2267 [shape="diamond"]
2267 [shape="diamond"]
2251 [shape="diamond"]
2251 [shape="diamond"]
2238 [shape="diamond"]
2238 [shape="diamond"]
7357 [shape="diamond"]
7357 [shape="diamond"]
7495 [shape="diamond"]
7495 [shape="diamond"]
7501 [shape="diamond"]
7501 [shape="diamond"]
7508 [shape="diamond"]
7508 [shape="diamond"]
7509 [shape="diamond"]
7509 [shape="diamond"]
7519 [shape="diamond"]
7519 [shape="diamond"]
2029 [shape="diamond"]
2029 [shape="diamond"]
6653 [shape="diamond"]
6653 [shape="diamond"]
6659 [shape="doublecircle"]
6664 [shape="doublecircle"]
6675 [shape="doublecircle"]
6680 [shape="doublecircle"]
6689 [shape="doublecircle"]
6694 [shape="doublecircle"]
6703 [shape="doublecircle"]
6709 [shape="doublecircle"]
6716 [shape="doublecircle"]
6723 [shape="doublecircle"]
6730 [shape="doublecircle"]
806 [shape="diamond"]
806 [shape="diamond"]
768 [shape="diamond"]
768 [shape="diamond"]
800 [shape="diamond"]
800 [shape="diamond"]
785 [shape="diamond"]
785 [shape="diamond"]
765 [shape="diamond"]
765 [shape="diamond"]
779 [shape="diamond"]
779 [shape="diamond"]
756 [shape="diamond"]
756 [shape="diamond"]
764 [shape="diamond"]
764 [shape="diamond"]
755 [shape="diamond"]
755 [shape="diamond"]
749 [shape="diamond"]
749 [shape="diamond"]
3536 [shape="diamond"]
3536 [shape="diamond"]
1185 [shape="diamond"]
1185 [shape="diamond"]
4749 [shape="diamond"]
4749 [shape="diamond"]
4739 [shape="diamond"]
4739 [shape="diamond"]
1370 [shape="diamond"]
1370 [shape="diamond"]
1372 [shape="diamond"]
1372 [shape="diamond"]
1371 [shape="diamond"]
1371 [shape="diamond"]
1383 [shape="diamond"]
1383 [shape="diamond"]
1394 [shape="diamond"]
1394 [shape="diamond"]
1396 [shape="diamond"]
1396 [shape="diamond"]
1398 [shape="diamond"]
1398 [shape="diamond"]
1400 [shape="diamond"]
1400 [shape="diamond"]
1399 [shape="diamond"]
1399 [shape="diamond"]
1414 [shape="doublecircle"]
1423 [shape="diamond"]
1423 [shape="diamond"]
1427 [shape="doublecircle"]
1428 [shape="diamond"]
1428 [shape="diamond"]
1430 [shape="diamond"]
1430 [shape="diamond"]
1433 [shape="diamond"]
1433 [shape="diamond"]
1438 [shape="diamond"]
1438 [shape="diamond"]
1356 [shape="diamond"]
1356 [shape="diamond"]
1329 [shape="diamond"]
1329 [shape="diamond"]
1462 [shape="diamond"]
1462 [shape="diamond"]
1327 [shape="doublecircle"]
1969 [shape="doublecircle"]
1916 [shape="doublecircle"]
1919 [shape="diamond"]
1919 [shape="diamond"]
1929 [shape="doublecircle"]
1833 [shape="diamond"]
1833 [shape="diamond"]
1709 [shape="doublecircle"]
1712 [shape="diamond"]
1712 [shape="diamond"]
1684 [shape="doublecircle"]
1687 [shape="diamond"]
1687 [shape="diamond"]
1691 [shape="doublecircle"]
1688 [shape="diamond"]
1688 [shape="diamond"]
1704 [shape="diamond"]
1704 [shape="diamond"]
1719 [shape="doublecircle"]
1549 [shape="doublecircle"]
1555 [shape="doublecircle"]
1562 [shape="doublecircle"]
1564 [shape="diamond"]
1564 [shape="diamond"]
1672 [shape="doublecircle"]
1678 [shape="doublecircle"]
1665 [shape="diamond"]
1665 [shape="diamond"]
1806 [shape="doublecircle"]
1809 [shape="diamond"]
1809 [shape="diamond"]
1772 [shape="doublecircle"]
1775 [shape="diamond"]
1775 [shape="diamond"]
1779 [shape="doublecircle"]
1780 [shape="diamond"]
1780 [shape="diamond"]
1787 [shape="diamond"]
1787 [shape="diamond"]
1791 [shape="diamond"]
1791 [shape="diamond"]
1793 [shape="diamond"]
1793 [shape="diamond"]
1797 [shape="diamond"]
1797 [shape="diamond"]
1819 [shape="doublecircle"]
1760 [shape="doublecircle"]
1766 [shape="doublecircle"]
1753 [shape="diamond"]
1753 [shape="diamond"]
1948 [shape="doublecircle"]
1951 [shape="diamond"]
1951 [shape="diamond"]
1957 [shape="diamond"]
1957 [shape="diamond"]
1972 [shape="diamond"]
1972 [shape="diamond"]
1974 [shape="diamond"]
1974 [shape="diamond"]
1836 [shape="diamond"]
1836 [shape="diamond"]
1932 [shape="diamond"]
1932 [shape="diamond"]
1933 [shape="diamond"]
1933 [shape="diamond"]
1941 [shape="diamond"]
1941 [shape="diamond"]
1871 [shape="diamond"]
1871 [shape="diamond"]
1875 [shape="doublecircle"]
1876 [shape="diamond"]
1876 [shape="diamond"]
1883 [shape="diamond"]
1883 [shape="diamond"]
1887 [shape="diamond"]
1887 [shape="diamond"]
1925 [shape="diamond"]
1925 [shape="diamond"]
584 [shape="doublecircle"]
585 [shape="diamond"]
585 [shape="diamond"]
588 [shape="diamond"]
588 [shape="diamond"]
586 [shape="diamond"]
586 [shape="diamond"]
599 [shape="diamond"]
599 [shape="diamond"]
569 [shape="diamond"]
569 [shape="diamond"]
5964 [shape="diamond"]
5964 [shape="diamond"]
5970 [shape="doublecircle"]
5973 [shape="doublecircle"]
5974 [shape="diamond"]
5974 [shape="diamond"]
5990 [shape="doublecircle"]
6227 [shape="diamond"]
6227 [shape="diamond"]
5680 [shape="doublecircle"]
5681 [shape="diamond"]
5681 [shape="diamond"]
5696 [shape="doublecircle"]
5697 [shape="diamond"]
5697 [shape="diamond"]
5698 [shape="diamond"]
5698 [shape="diamond"]
6231 [shape="diamond"]
6231 [shape="diamond"]
5767 [shape="doublecircle"]
5772 [shape="doublecircle"]
5777 [shape="doublecircle"]
5782 [shape="doublecircle"]
1289 [shape="diamond"]
1289 [shape="diamond"]
1291 [shape="diamond"]
1291 [shape="diamond"]
1292 [shape="diamond"]
1292 [shape="diamond"]
1300 [shape="diamond"]
1300 [shape="diamond"]
1314 [shape="diamond"]
1314 [shape="diamond"]
1322 [shape="doublecircle"]
89 [shape="doublecircle"]
93 [shape="diamond"]
93 [shape="diamond"]
84 [shape="doublecircle"]
122 [shape="doublecircle"]
124 [shape="diamond"]
124 [shape="diamond"]
137 [shape="doublecircle"]
141 [shape="doublecircle"]
145 [shape="diamond"]
145 [shape="diamond"]
152 [shape="doublecircle"]
64 [shape="doublecircle"]
65 [shape="diamond"]
65 [shape="diamond"]
66 [shape="diamond"]
66 [shape="diamond"]
37 [shape="doublecircle"]
38 [shape="diamond"]
38 [shape="diamond"]
39 [shape="diamond"]
39 [shape="diamond"]
58 [shape="diamond"]
58 [shape="diamond"]
627 [shape="diamond"]
627 [shape="diamond"]
632 [shape="diamond"]
632 [shape="diamond"]
2013 [shape="diamond"]
2013 [shape="diamond"]
2016 [shape="diamond"]
2016 [shape="diamond"]
1985 [shape="diamond"]
1985 [shape="diamond"]
1990 [shape="diamond"]
1990 [shape="diamond"]
1993 [shape="doublecircle"]
1999 [shape="diamond"]
1999 [shape="diamond"]
6406 [shape="diamond"]
6406 [shape="diamond"]
6419 [shape="doublecircle"]
6422 [shape="diamond"]
6422 [shape="diamond"]
6423 [shape="diamond"]
6423 [shape="diamond"]
6407 [shape="diamond"]
6407 [shape="diamond"]
6403 [shape="doublecircle"]
6448 [shape="diamond"]
6448 [shape="diamond"]
6460 [shape="diamond"]
6460 [shape="diamond"]
1097 [shape="doublecircle"]
1105 [shape="doublecircle"]
1109 [shape="diamond"]
1109 [shape="diamond"]
1114 [shape="doublecircle"]
1118 [shape="diamond"]
1118 [shape="diamond"]
1087 [shape="diamond"]
1087 [shape="diamond"]
3467 [shape="diamond"]
3467 [shape="diamond"]
3471 [shape="diamond"]
3471 [shape="diamond"]
3474 [shape="diamond"]
3474 [shape="diamond"]
3476 [shape="diamond"]
3476 [shape="diamond"]
3478 [shape="diamond"]
3478 [shape="diamond"]
3480 [shape="diamond"]
3480 [shape="diamond"]
3466 [shape="diamond"]
3466 [shape="diamond"]
3461 [shape="diamond"]
3461 [shape="diamond"]
3456 [shape="diamond"]
3456 [shape="diamond"]
3451 [shape="diamond"]
3451 [shape="diamond"]
1058 [shape="doublecircle"]
1062 [shape="diamond"]
1062 [shape="diamond"]
1060 [shape="diamond"]
1060 [shape="diamond"]
1080 [shape="diamond"]
1080 [shape="diamond"]
1067 [shape="diamond"]
1067 [shape="diamond"]
3434 [shape="diamond"]
3434 [shape="diamond"]
3290 [shape="diamond"]
3290 [shape="diamond"]
3294 [shape="diamond"]
3294 [shape="diamond"]
3298 [shape="diamond"]
3298 [shape="diamond"]
3302 [shape="diamond"]
3302 [shape="diamond"]
3306 [shape="diamond"]
3306 [shape="diamond"]
3310 [shape="diamond"]
3310 [shape="diamond"]
275 [shape="doublecircle"]
3314 [shape="diamond"]
3314 [shape="diamond"]
3316 [shape="diamond"]
3316 [shape="diamond"]
3318 [shape="diamond"]
3318 [shape="diamond"]
3323 [shape="diamond"]
3323 [shape="diamond"]
293 [shape="doublecircle"]
3329 [shape="diamond"]
3329 [shape="diamond"]
3334 [shape="diamond"]
3334 [shape="diamond"]
3338 [shape="diamond"]
3338 [shape="diamond"]
3342 [shape="diamond"]
3342 [shape="diamond"]
3347 [shape="diamond"]
3347 [shape="diamond"]
3352 [shape="diamond"]
3352 [shape="diamond"]
3357 [shape="diamond"]
3357 [shape="diamond"]
3364 [shape="diamond"]
3364 [shape="diamond"]
3370 [shape="diamond"]
3370 [shape="diamond"]
3377 [shape="diamond"]
3377 [shape="diamond"]
3382 [shape="diamond"]
3382 [shape="diamond"]
3387 [shape="diamond"]
3387 [shape="diamond"]
3394 [shape="diamond"]
3394 [shape="diamond"]
3396 [shape="diamond"]
3396 [shape="diamond"]
3398 [shape="diamond"]
3398 [shape="diamond"]
3400 [shape="diamond"]
3400 [shape="diamond"]
3402 [shape="diamond"]
3402 [shape="diamond"]
3404 [shape="diamond"]
3404 [shape="diamond"]
3406 [shape="diamond"]
3406 [shape="diamond"]
3408 [shape="diamond"]
3408 [shape="diamond"]
2939 [shape="diamond"]
2939 [shape="diamond"]
2951 [shape="diamond"]
2951 [shape="diamond"]
2947 [shape="diamond"]
2947 [shape="diamond"]
2945 [shape="diamond"]
2945 [shape="diamond"]
2960 [shape="diamond"]
2960 [shape="diamond"]
2884 [shape="diamond"]
2884 [shape="diamond"]
2970 [shape="diamond"]
2970 [shape="diamond"]
2972 [shape="diamond"]
2972 [shape="diamond"]
2985 [shape="doublecircle"]
2986 [shape="diamond"]
2986 [shape="diamond"]
2989 [shape="diamond"]
2989 [shape="diamond"]
2998 [shape="doublecircle"]
3001 [shape="diamond"]
3001 [shape="diamond"]
2729 [shape="doublecircle"]
2733 [shape="diamond"]
2733 [shape="diamond"]
3068 [shape="diamond"]
3068 [shape="diamond"]
3076 [shape="diamond"]
3076 [shape="diamond"]
3077 [shape="diamond"]
3077 [shape="diamond"]
3004 [shape="diamond"]
3004 [shape="diamond"]
3000 [shape="diamond"]
3000 [shape="diamond"]
3021 [shape="diamond"]
3021 [shape="diamond"]
3023 [shape="diamond"]
3023 [shape="diamond"]
3020 [shape="diamond"]
3020 [shape="diamond"]
3035 [shape="diamond"]
3035 [shape="diamond"]
3037 [shape="diamond"]
3037 [shape="diamond"]
3041 [shape="diamond"]
3041 [shape="diamond"]
3044 [shape="diamond"]
3044 [shape="diamond"]
3038 [shape="diamond"]
3038 [shape="diamond"]
3056 [shape="diamond"]
3056 [shape="diamond"]
3059 [shape="diamond"]
3059 [shape="diamond"]
3032 [shape="diamond"]
3032 [shape="diamond"]
3096 [shape="diamond"]
3096 [shape="diamond"]
3098 [shape="diamond"]
3098 [shape="diamond"]
3087 [shape="diamond"]
3087 [shape="diamond"]
2742 [shape="doublecircle"]
2743 [shape="diamond"]
2743 [shape="diamond"]
3093 [shape="diamond"]
3093 [shape="diamond"]
3113 [shape="diamond"]
3113 [shape="diamond"]
3114 [shape="diamond"]
3114 [shape="diamond"]
3123 [shape="diamond"]
3123 [shape="diamond"]
3119 [shape="diamond"]
3119 [shape="diamond"]
3117 [shape="diamond"]
3117 [shape="diamond"]
3131 [shape="diamond"]
3131 [shape="diamond"]
3133 [shape="diamond"]
3133 [shape="diamond"]
3134 [shape="diamond"]
3134 [shape="diamond"]
3144 [shape="diamond"]
3144 [shape="diamond"]
3148 [shape="diamond"]
3148 [shape="diamond"]
3154 [shape="diamond"]
3154 [shape="diamond"]
3007 [shape="diamond"]
3007 [shape="diamond"]
2975 [shape="diamond"]
2975 [shape="diamond"]
2905 [shape="doublecircle"]
2906 [shape="diamond"]
2906 [shape="diamond"]
2909 [shape="diamond"]
2909 [shape="diamond"]
2912 [shape="diamond"]
2912 [shape="diamond"]
2891 [shape="diamond"]
2891 [shape="diamond"]
2921 [shape="diamond"]
2921 [shape="diamond"]
2924 [shape="diamond"]
2924 [shape="diamond"]
2926 [shape="diamond"]
2926 [shape="diamond"]
2933 [shape="diamond"]
2933 [shape="diamond"]
2901 [shape="diamond"]
2901 [shape="diamond"]
2886 [shape="diamond"]
2886 [shape="diamond"]
2870 [shape="diamond"]
2870 [shape="diamond"]
2878 [shape="diamond"]
2878 [shape="diamond"]
3263 [shape="diamond"]
3263 [shape="diamond"]
3268 [shape="diamond"]
3268 [shape="diamond"]
3274 [shape="diamond"]
3274 [shape="diamond"]
1208 [shape="diamond"]
1208 [shape="diamond"]
node [shape="circle"]
subgraph cluster_read_tree {
label="read_tree()"
100 -> 101 [label="tmp___11 = tmp___10;"]
101 -> 94 [label=""]
94 -> 102 [label="literal[tmp___8] = (unsigned char)tmp___11;"]
102 -> 103 [label="n = n - 1;"]
103 -> 89 [label=""]
89 -> 91 [label="[!(n > 0)]"]
89 -> 90 [label="[n > 0]"]
90 -> 92 [label="tmp___8 = base;"]
92 -> 93 [label="base = base + 1;"]
93 -> 96 [label="[!(inptr < insize)]"]
93 -> 95 [label="[inptr < insize]"]
95 -> 97 [label="tmp___9 = inptr;"]
97 -> 98 [label="inptr = inptr + 1U;"]
98 -> 99 [label="tmp___11 = (int)(*(inbuf + tmp___9));"]
99 -> 94 [label=""]
96 -> 100 [label="tmp___10 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
91 -> 104 [label="len = len + 1;"]
104 -> 84 [label=""]
84 -> 86 [label="[!(len <= max_len)]"]
84 -> 85 [label="[len <= max_len]"]
85 -> 87 [label="lit_base[len] = base;"]
87 -> 88 [label="n = leaves[len];"]
88 -> 89 [label="while"]
86 -> 105 [label="leaves[max_len] = (leaves[max_len]) + 1;"]
105 -> 0 [label="return;"]
73 -> 74 [label="tmp___7 = tmp___6;"]
74 -> 67 [label=""]
67 -> 75 [label="leaves[len] = tmp___7;"]
75 -> 76 [label="n = n + (leaves[len]);"]
76 -> 77 [label="len = len + 1;"]
77 -> 64 [label=""]
64 -> 66 [label="[!(len <= max_len)]"]
64 -> 65 [label="[len <= max_len]"]
65 -> 69 [label="[!(inptr < insize)]"]
65 -> 68 [label="[inptr < insize]"]
68 -> 70 [label="tmp___5 = inptr;"]
70 -> 71 [label="inptr = inptr + 1U;"]
71 -> 72 [label="tmp___7 = (int)(*(inbuf + tmp___5));"]
72 -> 67 [label=""]
69 -> 73 [label="tmp___6 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
66 -> 78 [label="[!(n > 256)]"]
66 -> 79 [label="[n > 256]"]
79 -> 80 [label="error(\"too many leaves in Huffman tree\");" style="dotted" arrowhead="empty"]
80 -> 78 [label=""]
78 -> 81 [label="leaves[max_len] = (leaves[max_len]) + 1;"]
81 -> 82 [label="base = 0;"]
82 -> 83 [label="len = 1;"]
83 -> 84 [label="while"]
46 -> 47 [label="tmp___1 = tmp___0;"]
47 -> 40 [label=""]
40 -> 48 [label="orig_len = (orig_len << 8) | ((unsigned long)tmp___1);"]
48 -> 49 [label="n = n + 1;"]
49 -> 37 [label=""]
37 -> 39 [label="[!(n <= 4)]"]
37 -> 38 [label="[n <= 4]"]
38 -> 42 [label="[!(inptr < insize)]"]
38 -> 41 [label="[inptr < insize]"]
41 -> 43 [label="tmp = inptr;"]
43 -> 44 [label="inptr = inptr + 1U;"]
44 -> 45 [label="tmp___1 = (int)(*(inbuf + tmp));"]
45 -> 40 [label=""]
42 -> 46 [label="tmp___0 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
39 -> 52 [label="[!(inptr < insize)]"]
39 -> 51 [label="[inptr < insize]"]
51 -> 53 [label="tmp___2 = inptr;"]
53 -> 54 [label="inptr = inptr + 1U;"]
54 -> 55 [label="tmp___4 = (int)(*(inbuf + tmp___2));"]
55 -> 50 [label=""]
50 -> 58 [label="max_len = tmp___4;"]
58 -> 59 [label="[!(max_len > 25)]"]
58 -> 60 [label="[max_len > 25]"]
60 -> 61 [label="error(\"invalid compressed data -- Huffman code > 32 bits\");" style="dotted" arrowhead="empty"]
61 -> 59 [label=""]
59 -> 62 [label="n = 0;"]
62 -> 63 [label="len = 1;"]
63 -> 64 [label="while"]
52 -> 56 [label="tmp___3 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
56 -> 57 [label="tmp___4 = tmp___3;"]
57 -> 50 [label=""]}
subgraph cluster_usage {
label="usage()"
257 -> 258 [label="Function start dummy edge"]
258 -> 260 [label="struct _reent *tmp;"]
260 -> 261 [label="tmp = __getreent();"]
261 -> 262 [label="fprintf(tmp->_stderr, \"usage: %s [-%scdfhlLnN%stvV19] [-S suffix] [file ...]\n\", progname, \"a\", \"\");"]
262 -> 256 [label="return;"]}
subgraph cluster_check_zipfile {
label="check_zipfile()"
326 -> 327 [label="Function start dummy edge"]
327 -> 329 [label="uch *h;"]
329 -> 331 [label="struct _reent *tmp;"]
331 -> 333 [label="struct _reent *tmp___0;"]
333 -> 335 [label="struct _reent *tmp___1;"]
335 -> 336 [label="h = inbuf + inptr;"]
336 -> 337 [label="ifd = in;"]
337 -> 338 [label="inptr = inptr + ((unsigned int)((30 + (((int)((unsigned short)(*((h + 26) + 0)))) | (((int)((unsigned short)(*((h + 26) + 1)))) << 8))) + (((int)((unsigned short)(*((h + 28) + 0)))) | (((int)((unsigned short)(*((h + 28) + 1)))) << 8))));"]
338 -> 341 [label="[!(inptr > insize)]"]
338 -> 340 [label="[inptr > insize]"]
340 -> 342 [label="tmp = __getreent();"]
342 -> 343 [label="fprintf(tmp->_stderr, \"\n%s: %s: not a valid zip file\n\", progname, ifname);"]
343 -> 344 [label="exit_code = 1;"]
344 -> 325 [label="return 1;"]
341 -> 346 [label="[!((((unsigned long)(((int)((unsigned short)(*(h + 0)))) | (((int)((unsigned short)(*(h + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*((h + 2) + 0)))) | (((int)((unsigned short)(*((h + 2) + 1)))) << 8))) << 16)) != 67324752UL)]"]
341 -> 347 [label="[(((unsigned long)(((int)((unsigned short)(*(h + 0)))) | (((int)((unsigned short)(*(h + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*((h + 2) + 0)))) | (((int)((unsigned short)(*((h + 2) + 1)))) << 8))) << 16)) != 67324752UL]"]
347 -> 348 [label="tmp = __getreent();"]
348 -> 349 [label="fprintf(tmp->_stderr, \"\n%s: %s: not a valid zip file\n\", progname, ifname);"]
349 -> 350 [label="exit_code = 1;"]
350 -> 325 [label="return 1;"]
346 -> 339 [label=""]
339 -> 352 [label="method = (int)(*(h + 8));"]
352 -> 353 [label="[!(method != 0)]"]
352 -> 354 [label="[method != 0]"]
354 -> 355 [label="[!(method != 8)]"]
354 -> 356 [label="[method != 8]"]
356 -> 357 [label="tmp___0 = __getreent();"]
357 -> 358 [label="fprintf(tmp___0->_stderr, \"\n%s: %s: first entry not deflated or stored -- use unzip\n\", progname, ifname);"]
358 -> 359 [label="exit_code = 1;"]
359 -> 325 [label="return 1;"]
355 -> 353 [label=""]
353 -> 361 [label="decrypt = ((int)(*(h + 6))) & 1;"]
361 -> 362 [label="[!(decrypt != 0)]"]
361 -> 363 [label="[decrypt != 0]"]
363 -> 364 [label="tmp___1 = __getreent();"]
364 -> 365 [label="fprintf(tmp___1->_stderr, \"\n%s: %s: encrypted file -- use unzip\n\", progname, ifname);"]
365 -> 366 [label="exit_code = 1;"]
366 -> 325 [label="return 1;"]
362 -> 368 [label="ext_header = (((int)(*(h + 6))) & 8) != 0;"]
368 -> 369 [label="pkzip = 1;"]
369 -> 325 [label="return 0;"]}
subgraph cluster_flush_window {
label="flush_window()"
934 -> 935 [label="Function start dummy edge"]
935 -> 936 [label="[!(outcnt == 0U)]"]
935 -> 937 [label="[outcnt == 0U]"]
937 -> 933 [label="return;"]
936 -> 939 [label="updcrc((unsigned short)window, outcnt);"]
939 -> 940 [label="[!(!test)]"]
939 -> 941 [label="[!test]"]
941 -> 942 [label="write_buf(ofd, (void *)((char *)window), outcnt);" style="dotted" arrowhead="empty"]
942 -> 940 [label=""]
940 -> 943 [label="bytes_out = (long)(((unsigned long)bytes_out) + ((unsigned long)outcnt));"]
943 -> 944 [label="outcnt = 0U;"]
944 -> 933 [label="return;"]}
subgraph cluster_ct_tally {
label="ct_tally()"
7364 -> 7365 [label="Function start dummy edge"]
7365 -> 7367 [label="unsigned int tmp;"]
7367 -> 7369 [label="int tmp___0;"]
7369 -> 7371 [label="unsigned int tmp___1;"]
7371 -> 7373 [label="unsigned int tmp___2;"]
7373 -> 7375 [label="ulg out_length;"]
7375 -> 7377 [label="ulg in_length;"]
7377 -> 7379 [label="int dcode;"]
7379 -> 7381 [label="int tmp___3;"]
7381 -> 7382 [label="tmp = last_lit;"]
7382 -> 7383 [label="last_lit = last_lit + 1U;"]
7383 -> 7384 [label="*(inbuf + tmp) = (unsigned char)lc;"]
7384 -> 7387 [label="[!(dist == 0)]"]
7384 -> 7386 [label="[dist == 0]"]
7386 -> 7388 [label="(dyn_ltree[lc]).fc.freq = (ush )(((int)((dyn_ltree[lc]).fc.freq)) + 1);"]
7388 -> 7385 [label=""]
7385 -> 7401 [label="flag_bit = (unsigned char)(((int)flag_bit) << 1);"]
7401 -> 7402 [label="[!((last_lit & 7U) == 0U)]"]
7401 -> 7403 [label="[(last_lit & 7U) == 0U]"]
7403 -> 7404 [label="tmp___2 = last_flags;"]
7404 -> 7405 [label="last_flags = last_flags + 1U;"]
7405 -> 7406 [label="flag_buf[tmp___2] = flags;"]
7406 -> 7407 [label="flags = (unsigned char)0;"]
7407 -> 7408 [label="flag_bit = (unsigned char)1;"]
7408 -> 7402 [label=""]
7402 -> 7409 [label="[!(level > 2)]"]
7402 -> 7410 [label="[level > 2]"]
7410 -> 7411 [label="[!((last_lit & 4095U) == 0U)]"]
7410 -> 7412 [label="[(last_lit & 4095U) == 0U]"]
7412 -> 7413 [label="out_length = ((unsigned long)last_lit) * 8UL;"]
7413 -> 7414 [label="in_length = ((unsigned long)strstart) - ((unsigned long)block_start);"]
7414 -> 7415 [label="dcode = 0;"]
7415 -> 7416 [label="while"]
7416 -> 7418 [label="[!(dcode < 30)]"]
7416 -> 7417 [label="[dcode < 30]"]
7417 -> 7419 [label="out_length = out_length + (((unsigned long)((dyn_dtree[dcode]).fc.freq)) * ((unsigned long)(5L + ((long)(extra_dbits[dcode])))));"]
7419 -> 7420 [label="dcode = dcode + 1;"]
7420 -> 7416 [label=""]
7418 -> 7421 [label="out_length = out_length >> 3;"]
7421 -> 7422 [label="[!(last_dist < (last_lit / 2U))]"]
7421 -> 7423 [label="[last_dist < (last_lit / 2U)]"]
7423 -> 7424 [label="[!(out_length < (in_length / 2UL))]"]
7423 -> 7425 [label="[out_length < (in_length / 2UL)]"]
7425 -> 7363 [label="return 1;"]
7424 -> 7409 [label=""]
7409 -> 7429 [label="[!(last_lit == 32767U)]"]
7409 -> 7428 [label="[last_lit == 32767U]"]
7428 -> 7430 [label="tmp___3 = 1;"]
7430 -> 7427 [label=""]
7427 -> 7363 [label="return tmp___3;"]
7429 -> 7433 [label="[!(last_dist == 32768U)]"]
7429 -> 7432 [label="[last_dist == 32768U]"]
7432 -> 7434 [label="tmp___3 = 1;"]
7434 -> 7427 [label=""]
7433 -> 7435 [label="tmp___3 = 0;"]
7435 -> 7427 [label=""]
7422 -> 7409 [label=""]
7411 -> 7409 [label=""]
7387 -> 7389 [label="dist = dist - 1;"]
7389 -> 7390 [label="(dyn_ltree[(((int)(length_code[lc])) + 256) + 1]).fc.freq = (ush )(((int)((dyn_ltree[(((int)(length_code[lc])) + 256) + 1]).fc.freq)) + 1);"]
7390 -> 7393 [label="[!(dist < 256)]"]
7390 -> 7392 [label="[dist < 256]"]
7392 -> 7394 [label="tmp___0 = (int)(dist_code[dist]);"]
7394 -> 7391 [label=""]
7391 -> 7396 [label="(dyn_dtree[tmp___0]).fc.freq = (ush )(((int)((dyn_dtree[tmp___0]).fc.freq)) + 1);"]
7396 -> 7397 [label="tmp___1 = last_dist;"]
7397 -> 7398 [label="last_dist = last_dist + 1U;"]
7398 -> 7399 [label="*(d_buf + tmp___1) = (unsigned short)dist;"]
7399 -> 7400 [label="flags = (unsigned char)(((int)flags) | ((int)flag_bit));"]
7400 -> 7385 [label=""]
7393 -> 7395 [label="tmp___0 = (int)(dist_code[256 + (dist >> 7)]);"]
7395 -> 7391 [label=""]}
subgraph cluster_spec_rewind {
label="spec_rewind()"
}
subgraph cluster_do_list {
label="do_list()"
4727 -> 4725 [label=""]
4725 -> 4728 [label="crc___1 = ((unsigned long)(((int)((unsigned short)(buf[0]))) | (((int)((unsigned short)(buf[1]))) << 8))) | (((unsigned long)(((int)((unsigned short)(*((buf + 2) + 0)))) | (((int)((unsigned short)(*((buf + 2) + 1)))) << 8))) << 16);"]
4728 -> 4729 [label="bytes_out = (long)(((unsigned long)(((int)((unsigned short)(*((buf + 4) + 0)))) | (((int)((unsigned short)(*((buf + 4) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((buf + 4) + 2) + 0)))) | (((int)((unsigned short)(*(((buf + 4) + 2) + 1)))) << 8))) << 16));"]
4729 -> 4715 [label=""]
4715 -> 4730 [label="tmp___2 = ctime((const time_t *)(&time_stamp));"]
4730 -> 4731 [label="date = tmp___2 + 4;"]
4731 -> 4732 [label="*(date + 12) = (char)'\x0';"]
4732 -> 4733 [label="[!(verbose != 0)]"]
4732 -> 4734 [label="[verbose != 0]"]
4734 -> 4735 [label="printf(\"%5s %08lx %11s \", methods[method___0], crc___1, date);"]
4735 -> 4733 [label=""]
4733 -> 4736 [label="printf(\"%9ld %9ld \", bytes_in, bytes_out);"]
4736 -> 4739 [label="[!(bytes_in == (-1L))]"]
4736 -> 4738 [label="[bytes_in == (-1L)]"]
4738 -> 4740 [label="total_in = -1L;"]
4740 -> 4741 [label="header_bytes = 0L;"]
4741 -> 4742 [label="bytes_out = header_bytes;"]
4742 -> 4743 [label="bytes_in = bytes_out;"]
4743 -> 4737 [label=""]
4737 -> 4749 [label="[!(bytes_out == (-1L))]"]
4737 -> 4748 [label="[bytes_out == (-1L)]"]
4748 -> 4750 [label="total_out = -1L;"]
4750 -> 4751 [label="header_bytes = 0L;"]
4751 -> 4752 [label="bytes_out = header_bytes;"]
4752 -> 4753 [label="bytes_in = bytes_out;"]
4753 -> 4747 [label=""]
4747 -> 4757 [label="tmp___3 = __getreent();"]
4757 -> 4758 [label="display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, tmp___3->_stdout);" style="dotted" arrowhead="empty"]
4659 -> 4660 [label="Function start dummy edge"]
4660 -> 4662 [label="ulg crc___1;"]
4662 -> 4664 [label="char *date;"]
4664 -> 4666 [label="struct _reent *tmp;"]
4666 -> 4668 [label="off_t tmp___0;"]
4668 -> 4670 [label="uch buf[8];"]
4670 -> 4672 [label="int tmp___1;"]
4672 -> 4674 [label="char *tmp___2;"]
4674 -> 4676 [label="struct _reent *tmp___3;"]
4676 -> 4679 [label="[!(first_time != 0)]"]
4676 -> 4678 [label="[first_time != 0]"]
4678 -> 4682 [label="[!(method___0 >= 0)]"]
4678 -> 4681 [label="[method___0 >= 0]"]
4681 -> 4683 [label="first_time = 0;"]
4683 -> 4684 [label="[!(verbose != 0)]"]
4683 -> 4685 [label="[verbose != 0]"]
4685 -> 4686 [label="printf(\"method  crc     date  time  \");"]
4686 -> 4684 [label=""]
4684 -> 4687 [label="[!(!quiet)]"]
4684 -> 4688 [label="[!quiet]"]
4688 -> 4689 [label="printf(\"compressed  uncompr. ratio uncompressed_name\n\");"]
4689 -> 4687 [label=""]
4687 -> 4680 [label=""]
4680 -> 4677 [label=""]
4677 -> 4712 [label="crc___1 = (unsigned long)(~0);"]
4712 -> 4713 [label="bytes_out = -1L;"]
4713 -> 4714 [label="bytes_in = ifile_size;"]
4714 -> 4715 [label="[!(method___0 == 8)]"]
4714 -> 4716 [label="[method___0 == 8]"]
4716 -> 4717 [label="[!(!last_member)]"]
4716 -> 4718 [label="[!last_member]"]
4718 -> 4719 [label="tmp___0 = lseek(ifd___0, -8LL, 2);"]
4719 -> 4720 [label="bytes_in = (long)tmp___0;"]
4720 -> 4721 [label="[!(bytes_in != (-1L))]"]
4720 -> 4722 [label="[bytes_in != (-1L)]"]
4722 -> 4723 [label="bytes_in = bytes_in + 8L;"]
4723 -> 4724 [label="tmp___1 = spec_read(ifd___0, (unsigned char *)((char *)buf), (int)(sizeof(buf)));" style="dotted" arrowhead="empty"]
4724 -> 4725 [label="[!(((unsigned int)tmp___1) != (sizeof(buf)))]"]
4724 -> 4726 [label="[((unsigned int)tmp___1) != (sizeof(buf))]"]
4726 -> 4727 [label="read_error();" style="dotted" arrowhead="empty"]
4721 -> 4715 [label=""]
4717 -> 4715 [label=""]
4682 -> 4691 [label="Goto: _L"]
4691 -> 4692 [label="[!(method___0 < 0)]"]
4691 -> 4693 [label="[method___0 < 0]"]
4693 -> 4696 [label="[!(total_in <= 0L)]"]
4693 -> 4695 [label="[total_in <= 0L]"]
4695 -> 4658 [label="return;"]
4696 -> 4698 [label="[!(total_out <= 0L)]"]
4696 -> 4699 [label="[total_out <= 0L]"]
4699 -> 4658 [label="return;"]
4698 -> 4694 [label=""]
4694 -> 4703 [label="[!(verbose != 0)]"]
4694 -> 4702 [label="[verbose != 0]"]
4702 -> 4704 [label="printf(\"                            %9lu %9lu \", total_in, total_out);"]
4704 -> 4701 [label=""]
4701 -> 4708 [label="tmp = __getreent();"]
4708 -> 4709 [label="display_ratio(total_out - (total_in - header_bytes), total_out, tmp->_stdout);" style="dotted" arrowhead="empty"]
4709 -> 4710 [label="printf(\" (totals)\n\");"]
4710 -> 4658 [label="return;"]
4703 -> 4705 [label="[!(!quiet)]"]
4703 -> 4706 [label="[!quiet]"]
4706 -> 4707 [label="printf(\"%9ld %9ld \", total_in, total_out);"]
4707 -> 4701 [label=""]
4705 -> 4701 [label=""]
4692 -> 4677 [label=""]
4679 -> 4691 [label="Label: _L"]
4758 -> 4759 [label="printf(\" %s\n\", ofname);"]
4759 -> 4658 [label="return;"]
4749 -> 4754 [label="[!(total_out >= 0L)]"]
4749 -> 4755 [label="[total_out >= 0L]"]
4755 -> 4756 [label="total_out = total_out + bytes_out;"]
4756 -> 4747 [label=""]
4754 -> 4747 [label=""]
4739 -> 4744 [label="[!(total_in >= 0L)]"]
4739 -> 4745 [label="[total_in >= 0L]"]
4745 -> 4746 [label="total_in = total_in + bytes_in;"]
4746 -> 4737 [label=""]
4744 -> 4737 [label=""]}
subgraph cluster_scan_tree {
label="scan_tree()"
7074 -> 7075 [label="Function start dummy edge"]
7075 -> 7077 [label="int n;"]
7077 -> 7079 [label="int prevlen;"]
7079 -> 7081 [label="int curlen;"]
7081 -> 7083 [label="int nextlen;"]
7083 -> 7085 [label="int count;"]
7085 -> 7087 [label="int max_count;"]
7087 -> 7089 [label="int min_count;"]
7089 -> 7090 [label="prevlen = -1;"]
7090 -> 7091 [label="nextlen = (int)((tree + 0)->dl.len);"]
7091 -> 7092 [label="count = 0;"]
7092 -> 7093 [label="max_count = 7;"]
7093 -> 7094 [label="min_count = 4;"]
7094 -> 7095 [label="[!(nextlen == 0)]"]
7094 -> 7096 [label="[nextlen == 0]"]
7096 -> 7097 [label="max_count = 138;"]
7097 -> 7098 [label="min_count = 3;"]
7098 -> 7095 [label=""]
7095 -> 7099 [label="(tree + (max_code + 1))->dl.len = (unsigned short)65535;"]
7099 -> 7100 [label="n = 0;"]
7100 -> 7101 [label="while"]
7101 -> 7103 [label="[!(n <= max_code)]"]
7101 -> 7102 [label="[n <= max_code]"]
7102 -> 7104 [label="curlen = nextlen;"]
7104 -> 7105 [label="nextlen = (int)((tree + (n + 1))->dl.len);"]
7105 -> 7106 [label="count = count + 1;"]
7106 -> 7109 [label="[!(count < max_count)]"]
7106 -> 7108 [label="[count < max_count]"]
7108 -> 7112 [label="[!(curlen == nextlen)]"]
7108 -> 7111 [label="[curlen == nextlen]"]
7111 -> 7146 [label="Goto: __Cont"]
7146 -> 7147 [label="n = n + 1;"]
7147 -> 7101 [label=""]
7112 -> 7115 [label="Goto: _L"]
7115 -> 7118 [label="[!(count < min_count)]"]
7115 -> 7117 [label="[count < min_count]"]
7117 -> 7119 [label="(bl_tree[curlen]).fc.freq = (unsigned short)(((int)((bl_tree[curlen]).fc.freq)) + count);"]
7119 -> 7107 [label=""]
7107 -> 7132 [label="count = 0;"]
7132 -> 7133 [label="prevlen = curlen;"]
7133 -> 7136 [label="[!(nextlen == 0)]"]
7133 -> 7135 [label="[nextlen == 0]"]
7135 -> 7137 [label="max_count = 138;"]
7137 -> 7138 [label="min_count = 3;"]
7138 -> 7134 [label=""]
7134 -> 7146 [label="Label: __Cont"]
7136 -> 7141 [label="[!(curlen == nextlen)]"]
7136 -> 7140 [label="[curlen == nextlen]"]
7140 -> 7142 [label="max_count = 6;"]
7142 -> 7143 [label="min_count = 3;"]
7143 -> 7134 [label=""]
7141 -> 7144 [label="max_count = 7;"]
7144 -> 7145 [label="min_count = 4;"]
7145 -> 7134 [label=""]
7118 -> 7122 [label="[!(curlen != 0)]"]
7118 -> 7121 [label="[curlen != 0]"]
7121 -> 7123 [label="[!(curlen != prevlen)]"]
7121 -> 7124 [label="[curlen != prevlen]"]
7124 -> 7125 [label="(bl_tree[curlen]).fc.freq = (ush )(((int)((bl_tree[curlen]).fc.freq)) + 1);"]
7125 -> 7123 [label=""]
7123 -> 7126 [label="(bl_tree[16]).fc.freq = (ush )(((int)((bl_tree[16]).fc.freq)) + 1);"]
7126 -> 7107 [label=""]
7122 -> 7129 [label="[!(count <= 10)]"]
7122 -> 7128 [label="[count <= 10]"]
7128 -> 7130 [label="(bl_tree[17]).fc.freq = (ush )(((int)((bl_tree[17]).fc.freq)) + 1);"]
7130 -> 7107 [label=""]
7129 -> 7131 [label="(bl_tree[18]).fc.freq = (ush )(((int)((bl_tree[18]).fc.freq)) + 1);"]
7131 -> 7107 [label=""]
7109 -> 7115 [label="Label: _L"]
7103 -> 7073 [label="return;"]}
subgraph cluster_xmalloc {
label="xmalloc()"
1211 -> 1209 [label=""]
1209 -> 1200 [label="return cp;"]
1201 -> 1202 [label="Function start dummy edge"]
1202 -> 1204 [label="voidp cp;"]
1204 -> 1206 [label="void *tmp;"]
1206 -> 1207 [label="tmp = malloc(size);"]
1207 -> 1208 [label="cp = tmp;"]
1208 -> 1209 [label="[!(((unsigned int)cp) == ((unsigned int)((void *)0)))]"]
1208 -> 1210 [label="[((unsigned int)cp) == ((unsigned int)((void *)0))]"]
1210 -> 1211 [label="error((char *)\"out of memory\");" style="dotted" arrowhead="empty"]}
subgraph cluster_getopt {
label="getopt()"
3170 -> 3165 [label="return tmp;"]}
subgraph cluster_huft_build {
label="huft_build()"
5095 -> 5096 [label="Function start dummy edge"]
5096 -> 5098 [label="unsigned int a;"]
5098 -> 5100 [label="unsigned int c[17];"]
5100 -> 5102 [label="unsigned int f;"]
5102 -> 5104 [label="int g;"]
5104 -> 5106 [label="int h;"]
5106 -> 5108 [label="unsigned int i___0;"]
5108 -> 5110 [label="unsigned int j___0;"]
5110 -> 5112 [label="int k;"]
5112 -> 5114 [label="int l;"]
5114 -> 5116 [label="unsigned int *p;"]
5116 -> 5118 [label="struct huft *q;"]
5118 -> 5120 [label="struct huft r;"]
5120 -> 5122 [label="struct huft *u[16];"]
5122 -> 5124 [label="unsigned int v[288];"]
5124 -> 5126 [label="int w;"]
5126 -> 5128 [label="unsigned int x[17];"]
5128 -> 5130 [label="unsigned int *xp;"]
5130 -> 5132 [label="int y;"]
5132 -> 5134 [label="unsigned int z;"]
5134 -> 5136 [label="unsigned int *tmp;"]
5136 -> 5138 [label="unsigned int *tmp___0;"]
5138 -> 5140 [label="unsigned int tmp___1;"]
5140 -> 5142 [label="unsigned int *tmp___2;"]
5142 -> 5144 [label="void *tmp___3;"]
5144 -> 5146 [label="int tmp___4;"]
5146 -> 5148 [label="unsigned int *tmp___5;"]
5148 -> 5150 [label="unsigned int tmp___6;"]
5150 -> 5152 [label="int tmp___7;"]
5152 -> 5153 [label="memset((void *)c, 0, sizeof(c));"]
5153 -> 5154 [label="p = b;"]
5154 -> 5155 [label="i___0 = n;"]
5155 -> 5156 [label="while"]
5156 -> 5157 [label=""]
5157 -> 5159 [label="c[*p] = (c[*p]) + 1U;"]
5159 -> 5160 [label="p = p + 1;"]
5160 -> 5161 [label="i___0 = i___0 - 1U;"]
5161 -> 5162 [label="[!(!i___0)]"]
5161 -> 5163 [label="[!i___0]"]
5163 -> 5158 [label="break"]
5158 -> 5165 [label="[!((c[0]) == n)]"]
5158 -> 5166 [label="[(c[0]) == n]"]
5166 -> 5167 [label="*t = (struct huft *)((void *)0);"]
5167 -> 5168 [label="*m = 0;"]
5168 -> 5094 [label="return 0;"]
5165 -> 5170 [label="l = *m;"]
5170 -> 5171 [label="j___0 = 1U;"]
5171 -> 5172 [label="while"]
5172 -> 5174 [label="[!(j___0 <= 16U)]"]
5172 -> 5173 [label="[j___0 <= 16U]"]
5173 -> 5175 [label="[!((c[j___0]) != 0U)]"]
5173 -> 5176 [label="[(c[j___0]) != 0U]"]
5176 -> 5174 [label="break"]
5174 -> 5179 [label="k = (int)j___0;"]
5179 -> 5180 [label="[!(((unsigned int)l) < j___0)]"]
5179 -> 5181 [label="[((unsigned int)l) < j___0]"]
5181 -> 5182 [label="l = (int)j___0;"]
5182 -> 5180 [label=""]
5180 -> 5183 [label="i___0 = 16U;"]
5183 -> 5184 [label="while"]
5184 -> 5186 [label="[!(i___0 != 0U)]"]
5184 -> 5185 [label="[i___0 != 0U]"]
5185 -> 5187 [label="[!((c[i___0]) != 0U)]"]
5185 -> 5188 [label="[(c[i___0]) != 0U]"]
5188 -> 5186 [label="break"]
5186 -> 5191 [label="g = (int)i___0;"]
5191 -> 5192 [label="[!(((unsigned int)l) > i___0)]"]
5191 -> 5193 [label="[((unsigned int)l) > i___0]"]
5193 -> 5194 [label="l = (int)i___0;"]
5194 -> 5192 [label=""]
5192 -> 5195 [label="*m = l;"]
5195 -> 5196 [label="y = 1 << j___0;"]
5196 -> 5197 [label="while"]
5197 -> 5199 [label="[!(j___0 < i___0)]"]
5197 -> 5198 [label="[j___0 < i___0]"]
5198 -> 5200 [label="y = (int)(((unsigned int)y) - (c[j___0]));"]
5200 -> 5201 [label="[!(y < 0)]"]
5200 -> 5202 [label="[y < 0]"]
5202 -> 5094 [label="return 2;"]
5201 -> 5204 [label="j___0 = j___0 + 1U;"]
5204 -> 5205 [label="y = y << 1;"]
5205 -> 5197 [label=""]
5199 -> 5206 [label="y = (int)(((unsigned int)y) - (c[i___0]));"]
5206 -> 5207 [label="[!(y < 0)]"]
5206 -> 5208 [label="[y < 0]"]
5208 -> 5094 [label="return 2;"]
5207 -> 5210 [label="c[i___0] = (c[i___0]) + ((unsigned int)y);"]
5210 -> 5211 [label="j___0 = 0U;"]
5211 -> 5212 [label="x[1] = j___0;"]
5212 -> 5213 [label="p = c + 1;"]
5213 -> 5214 [label="xp = x + 2;"]
5214 -> 5215 [label="while"]
5215 -> 5216 [label=""]
5216 -> 5218 [label="i___0 = i___0 - 1U;"]
5218 -> 5219 [label="[!(!i___0)]"]
5218 -> 5220 [label="[!i___0]"]
5220 -> 5217 [label="break"]
5217 -> 5228 [label="p = b;"]
5228 -> 5229 [label="i___0 = 0U;"]
5229 -> 5230 [label="while"]
5230 -> 5231 [label=""]
5231 -> 5233 [label="tmp___2 = p;"]
5233 -> 5234 [label="p = p + 1;"]
5234 -> 5235 [label="j___0 = *tmp___2;"]
5235 -> 5236 [label="[!(j___0 != 0U)]"]
5235 -> 5237 [label="[j___0 != 0U]"]
5237 -> 5238 [label="tmp___1 = x[j___0];"]
5238 -> 5239 [label="x[j___0] = (x[j___0]) + 1U;"]
5239 -> 5240 [label="v[tmp___1] = i___0;"]
5240 -> 5236 [label=""]
5236 -> 5241 [label="i___0 = i___0 + 1U;"]
5241 -> 5242 [label="[!(!(i___0 < n))]"]
5241 -> 5243 [label="[!(i___0 < n)]"]
5243 -> 5232 [label="break"]
5232 -> 5245 [label="i___0 = 0U;"]
5245 -> 5246 [label="x[0] = i___0;"]
5246 -> 5247 [label="p = v;"]
5247 -> 5248 [label="h = -1;"]
5248 -> 5249 [label="w = -l;"]
5249 -> 5250 [label="u[0] = (struct huft *)((void *)0);"]
5250 -> 5251 [label="q = (struct huft *)((void *)0);"]
5251 -> 5252 [label="z = 0U;"]
5252 -> 5253 [label="while"]
5253 -> 5255 [label="[!(k <= g)]"]
5253 -> 5254 [label="[k <= g]"]
5254 -> 5256 [label="a = c[k];"]
5256 -> 5257 [label="while"]
5257 -> 5258 [label=""]
5258 -> 5260 [label="tmp___6 = a;"]
5260 -> 5261 [label="a = a - 1U;"]
5261 -> 5262 [label="[!(!tmp___6)]"]
5261 -> 5263 [label="[!tmp___6]"]
5263 -> 5259 [label="break"]
5259 -> 5357 [label="k = k + 1;"]
5357 -> 5253 [label=""]
5262 -> 5265 [label="while"]
5265 -> 5267 [label="[!(k > (w + l))]"]
5265 -> 5266 [label="[k > (w + l)]"]
5266 -> 5268 [label="h = h + 1;"]
5268 -> 5269 [label="w = w + l;"]
5269 -> 5270 [label="z = (unsigned int)(g - w);"]
5270 -> 5273 [label="[!(z > ((unsigned int)l))]"]
5270 -> 5272 [label="[z > ((unsigned int)l)]"]
5272 -> 5274 [label="z = (unsigned int)l;"]
5274 -> 5271 [label=""]
5271 -> 5276 [label="j___0 = (unsigned int)(k - w);"]
5276 -> 5277 [label="f = (unsigned int)(1 << j___0);"]
5277 -> 5278 [label="[!(f > (a + 1U))]"]
5277 -> 5279 [label="[f > (a + 1U)]"]
5279 -> 5280 [label="f = f - (a + 1U);"]
5280 -> 5281 [label="xp = c + k;"]
5281 -> 5282 [label="while"]
5282 -> 5283 [label=""]
5283 -> 5285 [label="j___0 = j___0 + 1U;"]
5285 -> 5286 [label="[!(!(j___0 < z))]"]
5285 -> 5287 [label="[!(j___0 < z)]"]
5287 -> 5284 [label="break"]
5284 -> 5278 [label=""]
5278 -> 5295 [label="z = (unsigned int)(1 << j___0);"]
5295 -> 5296 [label="tmp___3 = malloc((z + 1U) * (sizeof(struct huft )));"]
5296 -> 5297 [label="q = (struct huft *)tmp___3;"]
5297 -> 5298 [label="[!(((unsigned int)q) == ((unsigned int)((struct huft *)((void *)0))))]"]
5297 -> 5299 [label="[((unsigned int)q) == ((unsigned int)((struct huft *)((void *)0)))]"]
5299 -> 5300 [label="[!(h != 0)]"]
5299 -> 5301 [label="[h != 0]"]
5301 -> 5302 [label="huft_free(u[0]);" style="dotted" arrowhead="empty"]
5302 -> 5300 [label=""]
5300 -> 5094 [label="return 3;"]
5298 -> 5304 [label="hufts = hufts + (z + 1U);"]
5304 -> 5305 [label="*t = q + 1;"]
5305 -> 5306 [label="t = &(q->v.t);"]
5306 -> 5307 [label="*t = (struct huft *)((void *)0);"]
5307 -> 5308 [label="q = q + 1;"]
5308 -> 5309 [label="u[h] = q;"]
5309 -> 5310 [label="[!(h != 0)]"]
5309 -> 5311 [label="[h != 0]"]
5311 -> 5312 [label="x[h] = i___0;"]
5312 -> 5313 [label="r.b = (unsigned char)l;"]
5313 -> 5314 [label="r.e = (unsigned char)(16U + j___0);"]
5314 -> 5315 [label="r.v.t = q;"]
5315 -> 5316 [label="j___0 = i___0 >> (w - l);"]
5316 -> 5317 [label="*((u[h - 1]) + j___0) = r;"]
5317 -> 5310 [label=""]
5310 -> 5265 [label=""]
5286 -> 5289 [label="f = f << 1;"]
5289 -> 5290 [label="xp = xp + 1;"]
5290 -> 5291 [label="[!(f <= (*xp))]"]
5290 -> 5292 [label="[f <= (*xp)]"]
5292 -> 5284 [label="break"]
5291 -> 5294 [label="f = f - (*xp);"]
5294 -> 5282 [label=""]
5273 -> 5275 [label="z = z;"]
5275 -> 5271 [label=""]
5267 -> 5318 [label="r.b = (unsigned char)(k - w);"]
5318 -> 5321 [label="[!(((unsigned int)p) >= ((unsigned int)(v + n)))]"]
5318 -> 5320 [label="[((unsigned int)p) >= ((unsigned int)(v + n))]"]
5320 -> 5322 [label="r.e = (unsigned char)99;"]
5322 -> 5319 [label=""]
5319 -> 5338 [label="f = (unsigned int)(1 << (k - w));"]
5338 -> 5339 [label="j___0 = i___0 >> w;"]
5339 -> 5340 [label="while"]
5340 -> 5342 [label="[!(j___0 < z)]"]
5340 -> 5341 [label="[j___0 < z]"]
5341 -> 5343 [label="*(q + j___0) = r;"]
5343 -> 5344 [label="j___0 = j___0 + f;"]
5344 -> 5340 [label=""]
5342 -> 5345 [label="j___0 = (unsigned int)(1 << (k - 1));"]
5345 -> 5346 [label="while"]
5346 -> 5348 [label="[!((i___0 & j___0) != 0U)]"]
5346 -> 5347 [label="[(i___0 & j___0) != 0U]"]
5347 -> 5349 [label="i___0 = i___0 ^ j___0;"]
5349 -> 5350 [label="j___0 = j___0 >> 1;"]
5350 -> 5346 [label=""]
5348 -> 5351 [label="i___0 = i___0 ^ j___0;"]
5351 -> 5352 [label="while"]
5352 -> 5354 [label="[!((i___0 & ((unsigned int)((1 << w) - 1))) != (x[h]))]"]
5352 -> 5353 [label="[(i___0 & ((unsigned int)((1 << w) - 1))) != (x[h])]"]
5353 -> 5355 [label="h = h - 1;"]
5355 -> 5356 [label="w = w - l;"]
5356 -> 5352 [label=""]
5354 -> 5257 [label=""]
5321 -> 5325 [label="[!((*p) < s)]"]
5321 -> 5324 [label="[(*p) < s]"]
5324 -> 5328 [label="[!((*p) < 256U)]"]
5324 -> 5327 [label="[(*p) < 256U]"]
5327 -> 5329 [label="tmp___4 = 16;"]
5329 -> 5326 [label=""]
5326 -> 5331 [label="r.e = (unsigned char)tmp___4;"]
5331 -> 5332 [label="r.v.n = (unsigned short)(*p);"]
5332 -> 5333 [label="p = p + 1;"]
5333 -> 5319 [label=""]
5328 -> 5330 [label="tmp___4 = 15;"]
5330 -> 5326 [label=""]
5325 -> 5334 [label="r.e = (unsigned char)(*(e + ((*p) - s)));"]
5334 -> 5335 [label="tmp___5 = p;"]
5335 -> 5336 [label="p = p + 1;"]
5336 -> 5337 [label="r.v.n = *(d + ((*tmp___5) - s));"]
5337 -> 5319 [label=""]
5255 -> 5360 [label="[!(y != 0)]"]
5255 -> 5359 [label="[y != 0]"]
5359 -> 5363 [label="[!(g != 1)]"]
5359 -> 5362 [label="[g != 1]"]
5362 -> 5364 [label="tmp___7 = 1;"]
5364 -> 5361 [label=""]
5361 -> 5358 [label=""]
5358 -> 5094 [label="return tmp___7;"]
5363 -> 5365 [label="tmp___7 = 0;"]
5365 -> 5361 [label=""]
5360 -> 5366 [label="tmp___7 = 0;"]
5366 -> 5358 [label=""]
5242 -> 5230 [label=""]
5219 -> 5222 [label="tmp = xp;"]
5222 -> 5223 [label="xp = xp + 1;"]
5223 -> 5224 [label="tmp___0 = p;"]
5224 -> 5225 [label="p = p + 1;"]
5225 -> 5226 [label="j___0 = j___0 + (*tmp___0);"]
5226 -> 5227 [label="*tmp = j___0;"]
5227 -> 5215 [label=""]
5187 -> 5190 [label="i___0 = i___0 - 1U;"]
5190 -> 5184 [label=""]
5175 -> 5178 [label="j___0 = j___0 + 1U;"]
5178 -> 5172 [label=""]
5162 -> 5156 [label=""]}
subgraph cluster_fillbuf {
label="fillbuf()"
1469 -> 1470 [label="Function start dummy edge"]
1470 -> 1472 [label="unsigned int tmp;"]
1472 -> 1474 [label="int tmp___0;"]
1474 -> 1476 [label="int tmp___1;"]
1476 -> 1477 [label="bitbuf = bitbuf << n;"]
1477 -> 1478 [label="while"]
1478 -> 1480 [label="[!(n > bitcount)]"]
1478 -> 1479 [label="[n > bitcount]"]
1479 -> 1481 [label="n = n - bitcount;"]
1481 -> 1482 [label="bitbuf = bitbuf | ((unsigned long)(subbitbuf << n));"]
1482 -> 1485 [label="[!(inptr < insize)]"]
1482 -> 1484 [label="[inptr < insize]"]
1484 -> 1486 [label="tmp = inptr;"]
1486 -> 1487 [label="inptr = inptr + 1U;"]
1487 -> 1488 [label="tmp___1 = (int)(*(inbuf + tmp));"]
1488 -> 1483 [label=""]
1483 -> 1491 [label="subbitbuf = (unsigned int)tmp___1;"]
1491 -> 1492 [label="[!(((int)subbitbuf) == (-1))]"]
1491 -> 1493 [label="[((int)subbitbuf) == (-1)]"]
1493 -> 1494 [label="subbitbuf = 0U;"]
1494 -> 1492 [label=""]
1492 -> 1495 [label="bitcount = 8;"]
1495 -> 1478 [label=""]
1485 -> 1489 [label="tmp___0 = fill_inbuf(1);" style="dotted" arrowhead="empty"]
1489 -> 1490 [label="tmp___1 = tmp___0;"]
1490 -> 1483 [label=""]
1480 -> 1496 [label="bitcount = bitcount - n;"]
1496 -> 1497 [label="bitbuf = bitbuf | ((unsigned long)(subbitbuf >> bitcount));"]
1497 -> 1468 [label="return;"]}
subgraph cluster_make_ofname {
label="make_ofname()"
4048 -> 4049 [label="Function start dummy edge"]
4049 -> 4051 [label="char *suff;"]
4051 -> 4053 [label="struct _reent *tmp;"]
4053 -> 4055 [label="int tmp___0;"]
4055 -> 4057 [label="int tmp___1;"]
4057 -> 4059 [label="struct _reent *tmp___2;"]
4059 -> 4060 [label="strcpy(ofname, (const char *)ifname);"]
4060 -> 4061 [label="suff = get_suffix(ofname);" style="dotted" arrowhead="empty"]
4061 -> 4064 [label="[!(decompress != 0)]"]
4061 -> 4063 [label="[decompress != 0]"]
4063 -> 4065 [label="[!(((unsigned int)suff) == ((unsigned int)((void *)0)))]"]
4063 -> 4066 [label="[((unsigned int)suff) == ((unsigned int)((void *)0))]"]
4066 -> 4067 [label="[!(!recursive)]"]
4066 -> 4068 [label="[!recursive]"]
4068 -> 4071 [label="[!(list != 0)]"]
4068 -> 4070 [label="[list != 0]"]
4070 -> 4047 [label="return 0;"]
4071 -> 4073 [label="[!(test != 0)]"]
4071 -> 4074 [label="[test != 0]"]
4074 -> 4047 [label="return 0;"]
4073 -> 4067 [label=""]
4067 -> 4078 [label="[!(verbose != 0)]"]
4067 -> 4077 [label="[verbose != 0]"]
4077 -> 4084 [label="Goto: _L"]
4084 -> 4085 [label="[!(!quiet)]"]
4084 -> 4086 [label="[!quiet]"]
4086 -> 4087 [label="tmp = __getreent();"]
4087 -> 4088 [label="fprintf(tmp->_stderr, \"%s: %s: unknown suffix -- ignored\n\", progname, ifname);"]
4088 -> 4085 [label=""]
4085 -> 4089 [label="[!(exit_code == 0)]"]
4085 -> 4090 [label="[exit_code == 0]"]
4090 -> 4091 [label="exit_code = 2;"]
4091 -> 4076 [label=""]
4076 -> 4047 [label="return 2;"]
4089 -> 4076 [label=""]
4078 -> 4080 [label="[!(!recursive)]"]
4078 -> 4081 [label="[!recursive]"]
4081 -> 4082 [label="[!(!quiet)]"]
4081 -> 4083 [label="[!quiet]"]
4083 -> 4084 [label="Label: _L"]
4082 -> 4076 [label=""]
4080 -> 4076 [label=""]
4065 -> 4093 [label="strlwr(suff);" style="dotted" arrowhead="empty"]
4093 -> 4094 [label="tmp___0 = strcmp((const char *)suff, \".tgz\");"]
4094 -> 4097 [label="[!(tmp___0 == 0)]"]
4094 -> 4096 [label="[tmp___0 == 0]"]
4096 -> 4098 [label="strcpy(suff, \".tar\");"]
4098 -> 4095 [label=""]
4095 -> 4062 [label=""]
4062 -> 4047 [label="return 0;"]
4097 -> 4099 [label="tmp___1 = strcmp((const char *)suff, \".taz\");"]
4099 -> 4102 [label="[!(tmp___1 == 0)]"]
4099 -> 4101 [label="[tmp___1 == 0]"]
4101 -> 4103 [label="strcpy(suff, \".tar\");"]
4103 -> 4095 [label=""]
4102 -> 4104 [label="*suff = (char)'\x0';"]
4104 -> 4095 [label=""]
4064 -> 4107 [label="[!(((unsigned int)suff) != ((unsigned int)((void *)0)))]"]
4064 -> 4106 [label="[((unsigned int)suff) != ((unsigned int)((void *)0))]"]
4106 -> 4110 [label="[!(verbose != 0)]"]
4106 -> 4109 [label="[verbose != 0]"]
4109 -> 4111 [label="tmp___2 = __getreent();"]
4111 -> 4112 [label="fprintf(tmp___2->_stderr, \"%s: %s already has %s suffix -- unchanged\n\", progname, ifname, suff);"]
4112 -> 4108 [label=""]
4108 -> 4119 [label="[!(exit_code == 0)]"]
4108 -> 4120 [label="[exit_code == 0]"]
4120 -> 4121 [label="exit_code = 2;"]
4121 -> 4119 [label=""]
4119 -> 4047 [label="return 2;"]
4110 -> 4113 [label="[!(!recursive)]"]
4110 -> 4114 [label="[!recursive]"]
4114 -> 4115 [label="[!(!quiet)]"]
4114 -> 4116 [label="[!quiet]"]
4116 -> 4117 [label="tmp___2 = __getreent();"]
4117 -> 4118 [label="fprintf(tmp___2->_stderr, \"%s: %s already has %s suffix -- unchanged\n\", progname, ifname, suff);"]
4118 -> 4108 [label=""]
4115 -> 4108 [label=""]
4113 -> 4108 [label=""]
4107 -> 4123 [label="save_orig_name = 0;"]
4123 -> 4124 [label="strcat(ofname, (const char *)z_suffix);"]
4124 -> 4062 [label=""]}
subgraph cluster_ran {
label="ran()"
}
subgraph cluster_zip {
label="zip()"
656 -> 657 [label="Function start dummy edge"]
657 -> 659 [label="uch flags__1;"]
659 -> 661 [label="ush attr;"]
661 -> 663 [label="ush deflate_flags;"]
663 -> 665 [label="int method___0;"]
665 -> 667 [label="unsigned int tmp;"]
667 -> 669 [label="unsigned int tmp___0;"]
669 -> 671 [label="unsigned int tmp___1;"]
671 -> 673 [label="unsigned int tmp___2;"]
673 -> 675 [label="unsigned int tmp___3;"]
675 -> 677 [label="unsigned int tmp___4;"]
677 -> 679 [label="unsigned int tmp___5;"]
679 -> 681 [label="unsigned int tmp___6;"]
681 -> 683 [label="unsigned int tmp___7;"]
683 -> 685 [label="unsigned int tmp___8;"]
685 -> 687 [label="unsigned int tmp___9;"]
687 -> 689 [label="unsigned int tmp___10;"]
689 -> 691 [label="unsigned int tmp___11;"]
691 -> 693 [label="unsigned int tmp___12;"]
693 -> 695 [label="char *p;"]
695 -> 697 [label="char *tmp___13;"]
697 -> 699 [label="unsigned int tmp___14;"]
699 -> 701 [label="char *tmp___15;"]
701 -> 703 [label="unsigned int tmp___16;"]
703 -> 705 [label="unsigned int tmp___17;"]
705 -> 707 [label="unsigned int tmp___18;"]
707 -> 709 [label="unsigned int tmp___19;"]
709 -> 711 [label="unsigned int tmp___20;"]
711 -> 713 [label="unsigned int tmp___21;"]
713 -> 715 [label="unsigned int tmp___22;"]
715 -> 717 [label="unsigned int tmp___23;"]
717 -> 719 [label="unsigned int tmp___24;"]
719 -> 721 [label="unsigned int tmp___25;"]
721 -> 723 [label="unsigned int tmp___26;"]
723 -> 725 [label="unsigned int tmp___27;"]
725 -> 727 [label="unsigned int tmp___28;"]
727 -> 729 [label="unsigned int tmp___29;"]
729 -> 731 [label="unsigned int tmp___30;"]
731 -> 733 [label="unsigned int tmp___31;"]
733 -> 734 [label="flags__1 = (uch )0;"]
734 -> 735 [label="attr = (ush )0;"]
735 -> 736 [label="deflate_flags = (ush )0;"]
736 -> 737 [label="ifd = in;"]
737 -> 738 [label="ofd = out;"]
738 -> 739 [label="outcnt = 0U;"]
739 -> 740 [label="method___0 = 8;"]
740 -> 741 [label="tmp = outcnt;"]
741 -> 742 [label="outcnt = outcnt + 1U;"]
742 -> 743 [label="*(outbuf + tmp) = (unsigned char)(*(\"\037\213\" + 0));"]
743 -> 744 [label="[!(outcnt == 16384U)]"]
743 -> 745 [label="[outcnt == 16384U]"]
745 -> 746 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
812 -> 813 [label="lm_init(level, &deflate_flags);" style="dotted" arrowhead="empty"]
813 -> 814 [label="tmp___11 = outcnt;"]
814 -> 815 [label="outcnt = outcnt + 1U;"]
815 -> 816 [label="*(outbuf + tmp___11) = (unsigned char)deflate_flags;"]
816 -> 817 [label="[!(outcnt == 16384U)]"]
816 -> 818 [label="[outcnt == 16384U]"]
818 -> 819 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
819 -> 817 [label=""]
817 -> 820 [label="tmp___12 = outcnt;"]
820 -> 821 [label="outcnt = outcnt + 1U;"]
821 -> 822 [label="*(outbuf + tmp___12) = (unsigned char)7;"]
822 -> 823 [label="[!(outcnt == 16384U)]"]
822 -> 824 [label="[outcnt == 16384U]"]
824 -> 825 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
825 -> 823 [label=""]
823 -> 826 [label="[!(save_orig_name != 0)]"]
823 -> 827 [label="[save_orig_name != 0]"]
827 -> 828 [label="tmp___13 = gzipbasename(ifname);" style="dotted" arrowhead="empty"]
828 -> 829 [label="p = tmp___13;"]
829 -> 830 [label="while"]
830 -> 831 [label=""]
831 -> 833 [label="tmp___14 = outcnt;"]
833 -> 834 [label="outcnt = outcnt + 1U;"]
834 -> 835 [label="*(outbuf + tmp___14) = (unsigned char)(*p);"]
835 -> 836 [label="[!(outcnt == 16384U)]"]
835 -> 837 [label="[outcnt == 16384U]"]
837 -> 838 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
838 -> 836 [label=""]
836 -> 839 [label="tmp___15 = p;"]
839 -> 840 [label="p = p + 1;"]
840 -> 841 [label="[!(!(*tmp___15))]"]
840 -> 842 [label="[!(*tmp___15)]"]
842 -> 832 [label="break"]
832 -> 826 [label=""]
826 -> 844 [label="header_bytes = (long)outcnt;"]
844 -> 845 [label="deflate();" style="dotted" arrowhead="empty"]
845 -> 848 [label="[!(outcnt < 16382U)]"]
845 -> 847 [label="[outcnt < 16382U]"]
847 -> 849 [label="tmp___16 = outcnt;"]
849 -> 850 [label="outcnt = outcnt + 1U;"]
850 -> 851 [label="*(outbuf + tmp___16) = (unsigned char)((crc & 65535UL) & 255UL);"]
851 -> 852 [label="tmp___17 = outcnt;"]
852 -> 853 [label="outcnt = outcnt + 1U;"]
853 -> 854 [label="*(outbuf + tmp___17) = (unsigned char)(((int)((unsigned short)(crc & 65535UL))) >> 8);"]
854 -> 846 [label=""]
846 -> 869 [label="[!(outcnt < 16382U)]"]
846 -> 868 [label="[outcnt < 16382U]"]
868 -> 870 [label="tmp___20 = outcnt;"]
870 -> 871 [label="outcnt = outcnt + 1U;"]
871 -> 872 [label="*(outbuf + tmp___20) = (unsigned char)((crc >> 16) & 255UL);"]
872 -> 873 [label="tmp___21 = outcnt;"]
873 -> 874 [label="outcnt = outcnt + 1U;"]
874 -> 875 [label="*(outbuf + tmp___21) = (unsigned char)(((int)((unsigned short)(crc >> 16))) >> 8);"]
875 -> 867 [label=""]
867 -> 890 [label="[!(outcnt < 16382U)]"]
867 -> 889 [label="[outcnt < 16382U]"]
889 -> 891 [label="tmp___24 = outcnt;"]
891 -> 892 [label="outcnt = outcnt + 1U;"]
892 -> 893 [label="*(outbuf + tmp___24) = (unsigned char)((bytes_in & 65535L) & 255L);"]
893 -> 894 [label="tmp___25 = outcnt;"]
894 -> 895 [label="outcnt = outcnt + 1U;"]
895 -> 896 [label="*(outbuf + tmp___25) = (unsigned char)(((int)((unsigned short)(bytes_in & 65535L))) >> 8);"]
896 -> 888 [label=""]
888 -> 911 [label="[!(outcnt < 16382U)]"]
888 -> 910 [label="[outcnt < 16382U]"]
910 -> 912 [label="tmp___28 = outcnt;"]
912 -> 913 [label="outcnt = outcnt + 1U;"]
913 -> 914 [label="*(outbuf + tmp___28) = (unsigned char)((((unsigned long)bytes_in) >> 16) & 255UL);"]
914 -> 915 [label="tmp___29 = outcnt;"]
915 -> 916 [label="outcnt = outcnt + 1U;"]
916 -> 917 [label="*(outbuf + tmp___29) = (unsigned char)(((int)((unsigned short)(((unsigned long)bytes_in) >> 16))) >> 8);"]
917 -> 909 [label=""]
909 -> 930 [label="header_bytes = (long)(((unsigned long)header_bytes) + ((unsigned long)(2U * (sizeof(long)))));"]
930 -> 931 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
931 -> 655 [label="return 0;"]
911 -> 918 [label="tmp___30 = outcnt;"]
918 -> 919 [label="outcnt = outcnt + 1U;"]
919 -> 920 [label="*(outbuf + tmp___30) = (unsigned char)((((unsigned long)bytes_in) >> 16) & 255UL);"]
920 -> 921 [label="[!(outcnt == 16384U)]"]
920 -> 922 [label="[outcnt == 16384U]"]
922 -> 923 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
923 -> 921 [label=""]
921 -> 924 [label="tmp___31 = outcnt;"]
924 -> 925 [label="outcnt = outcnt + 1U;"]
925 -> 926 [label="*(outbuf + tmp___31) = (unsigned char)(((int)((unsigned short)(((unsigned long)bytes_in) >> 16))) >> 8);"]
926 -> 927 [label="[!(outcnt == 16384U)]"]
926 -> 928 [label="[outcnt == 16384U]"]
928 -> 929 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
929 -> 909 [label=""]
927 -> 909 [label=""]
890 -> 897 [label="tmp___26 = outcnt;"]
897 -> 898 [label="outcnt = outcnt + 1U;"]
898 -> 899 [label="*(outbuf + tmp___26) = (unsigned char)((bytes_in & 65535L) & 255L);"]
899 -> 900 [label="[!(outcnt == 16384U)]"]
899 -> 901 [label="[outcnt == 16384U]"]
901 -> 902 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
902 -> 900 [label=""]
900 -> 903 [label="tmp___27 = outcnt;"]
903 -> 904 [label="outcnt = outcnt + 1U;"]
904 -> 905 [label="*(outbuf + tmp___27) = (unsigned char)(((int)((unsigned short)(bytes_in & 65535L))) >> 8);"]
905 -> 906 [label="[!(outcnt == 16384U)]"]
905 -> 907 [label="[outcnt == 16384U]"]
907 -> 908 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
908 -> 888 [label=""]
906 -> 888 [label=""]
869 -> 876 [label="tmp___22 = outcnt;"]
876 -> 877 [label="outcnt = outcnt + 1U;"]
877 -> 878 [label="*(outbuf + tmp___22) = (unsigned char)((crc >> 16) & 255UL);"]
878 -> 879 [label="[!(outcnt == 16384U)]"]
878 -> 880 [label="[outcnt == 16384U]"]
880 -> 881 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
881 -> 879 [label=""]
879 -> 882 [label="tmp___23 = outcnt;"]
882 -> 883 [label="outcnt = outcnt + 1U;"]
883 -> 884 [label="*(outbuf + tmp___23) = (unsigned char)(((int)((unsigned short)(crc >> 16))) >> 8);"]
884 -> 885 [label="[!(outcnt == 16384U)]"]
884 -> 886 [label="[outcnt == 16384U]"]
886 -> 887 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
887 -> 867 [label=""]
885 -> 867 [label=""]
848 -> 855 [label="tmp___18 = outcnt;"]
855 -> 856 [label="outcnt = outcnt + 1U;"]
856 -> 857 [label="*(outbuf + tmp___18) = (unsigned char)((crc & 65535UL) & 255UL);"]
857 -> 858 [label="[!(outcnt == 16384U)]"]
857 -> 859 [label="[outcnt == 16384U]"]
859 -> 860 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
860 -> 858 [label=""]
858 -> 861 [label="tmp___19 = outcnt;"]
861 -> 862 [label="outcnt = outcnt + 1U;"]
862 -> 863 [label="*(outbuf + tmp___19) = (unsigned char)(((int)((unsigned short)(crc & 65535UL))) >> 8);"]
863 -> 864 [label="[!(outcnt == 16384U)]"]
863 -> 865 [label="[outcnt == 16384U]"]
865 -> 866 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
866 -> 846 [label=""]
864 -> 846 [label=""]
841 -> 830 [label=""]
809 -> 789 [label=""]
789 -> 810 [label="crc = updcrc((unsigned short)0, 0U);"]
810 -> 811 [label="bi_init(out);" style="dotted" arrowhead="empty"]
811 -> 812 [label="ct_init(&attr, &method___0);" style="dotted" arrowhead="empty"]
803 -> 801 [label=""]
801 -> 804 [label="tmp___10 = outcnt;"]
804 -> 805 [label="outcnt = outcnt + 1U;"]
805 -> 806 [label="*(outbuf + tmp___10) = (unsigned char)(((int)((unsigned short)(((unsigned long)time_stamp) >> 16))) >> 8);"]
806 -> 807 [label="[!(outcnt == 16384U)]"]
806 -> 808 [label="[outcnt == 16384U]"]
808 -> 809 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
807 -> 789 [label=""]
788 -> 768 [label=""]
768 -> 791 [label="[!(outcnt < 16382U)]"]
768 -> 790 [label="[outcnt < 16382U]"]
790 -> 792 [label="tmp___7 = outcnt;"]
792 -> 793 [label="outcnt = outcnt + 1U;"]
793 -> 794 [label="*(outbuf + tmp___7) = (unsigned char)((((unsigned long)time_stamp) >> 16) & 255UL);"]
794 -> 795 [label="tmp___8 = outcnt;"]
795 -> 796 [label="outcnt = outcnt + 1U;"]
796 -> 797 [label="*(outbuf + tmp___8) = (unsigned char)(((int)((unsigned short)(((unsigned long)time_stamp) >> 16))) >> 8);"]
797 -> 789 [label=""]
791 -> 798 [label="tmp___9 = outcnt;"]
798 -> 799 [label="outcnt = outcnt + 1U;"]
799 -> 800 [label="*(outbuf + tmp___9) = (unsigned char)((((unsigned long)time_stamp) >> 16) & 255UL);"]
800 -> 801 [label="[!(outcnt == 16384U)]"]
800 -> 802 [label="[outcnt == 16384U]"]
802 -> 803 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
782 -> 780 [label=""]
780 -> 783 [label="tmp___6 = outcnt;"]
783 -> 784 [label="outcnt = outcnt + 1U;"]
784 -> 785 [label="*(outbuf + tmp___6) = (unsigned char)(((int)((unsigned short)(time_stamp & 65535L))) >> 8);"]
785 -> 786 [label="[!(outcnt == 16384U)]"]
785 -> 787 [label="[outcnt == 16384U]"]
787 -> 788 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
786 -> 768 [label=""]
767 -> 765 [label=""]
765 -> 770 [label="[!(outcnt < 16382U)]"]
765 -> 769 [label="[outcnt < 16382U]"]
769 -> 771 [label="tmp___3 = outcnt;"]
771 -> 772 [label="outcnt = outcnt + 1U;"]
772 -> 773 [label="*(outbuf + tmp___3) = (unsigned char)((time_stamp & 65535L) & 255L);"]
773 -> 774 [label="tmp___4 = outcnt;"]
774 -> 775 [label="outcnt = outcnt + 1U;"]
775 -> 776 [label="*(outbuf + tmp___4) = (unsigned char)(((int)((unsigned short)(time_stamp & 65535L))) >> 8);"]
776 -> 768 [label=""]
770 -> 777 [label="tmp___5 = outcnt;"]
777 -> 778 [label="outcnt = outcnt + 1U;"]
778 -> 779 [label="*(outbuf + tmp___5) = (unsigned char)((time_stamp & 65535L) & 255L);"]
779 -> 780 [label="[!(outcnt == 16384U)]"]
779 -> 781 [label="[outcnt == 16384U]"]
781 -> 782 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
758 -> 756 [label=""]
756 -> 759 [label="[!(save_orig_name != 0)]"]
756 -> 760 [label="[save_orig_name != 0]"]
760 -> 761 [label="flags__1 = (unsigned char)(((int)flags__1) | 8);"]
761 -> 759 [label=""]
759 -> 762 [label="tmp___2 = outcnt;"]
762 -> 763 [label="outcnt = outcnt + 1U;"]
763 -> 764 [label="*(outbuf + tmp___2) = flags__1;"]
764 -> 765 [label="[!(outcnt == 16384U)]"]
764 -> 766 [label="[outcnt == 16384U]"]
766 -> 767 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
752 -> 750 [label=""]
750 -> 753 [label="tmp___1 = outcnt;"]
753 -> 754 [label="outcnt = outcnt + 1U;"]
754 -> 755 [label="*(outbuf + tmp___1) = (unsigned char)8;"]
755 -> 756 [label="[!(outcnt == 16384U)]"]
755 -> 757 [label="[outcnt == 16384U]"]
757 -> 758 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
746 -> 744 [label=""]
744 -> 747 [label="tmp___0 = outcnt;"]
747 -> 748 [label="outcnt = outcnt + 1U;"]
748 -> 749 [label="*(outbuf + tmp___0) = (unsigned char)(*(\"\037\213\" + 1));"]
749 -> 750 [label="[!(outcnt == 16384U)]"]
749 -> 751 [label="[outcnt == 16384U]"]
751 -> 752 [label="flush_outbuf();" style="dotted" arrowhead="empty"]}
subgraph cluster_get_method {
label="get_method()"
4127 -> 4128 [label="Function start dummy edge"]
4128 -> 4130 [label="uch flags__1;"]
4130 -> 4132 [label="char magic[2];"]
4132 -> 4134 [label="ulg stamp;"]
4134 -> 4136 [label="unsigned int tmp;"]
4136 -> 4138 [label="int tmp___0;"]
4138 -> 4140 [label="int tmp___1;"]
4140 -> 4142 [label="unsigned int tmp___2;"]
4142 -> 4144 [label="int tmp___3;"]
4144 -> 4146 [label="int tmp___4;"]
4146 -> 4148 [label="unsigned int tmp___5;"]
4148 -> 4150 [label="int tmp___6;"]
4150 -> 4152 [label="int tmp___7;"]
4152 -> 4154 [label="unsigned int tmp___8;"]
4154 -> 4156 [label="int tmp___9;"]
4156 -> 4158 [label="int tmp___10;"]
4158 -> 4160 [label="unsigned int tmp___11;"]
4160 -> 4162 [label="int tmp___12;"]
4162 -> 4164 [label="int tmp___13;"]
4164 -> 4166 [label="struct _reent *tmp___14;"]
4166 -> 4168 [label="unsigned int tmp___15;"]
4168 -> 4170 [label="int tmp___16;"]
4170 -> 4172 [label="int tmp___17;"]
4172 -> 4174 [label="struct _reent *tmp___18;"]
4174 -> 4176 [label="struct _reent *tmp___19;"]
4176 -> 4178 [label="struct _reent *tmp___20;"]
4178 -> 4180 [label="unsigned int tmp___21;"]
4180 -> 4182 [label="int tmp___22;"]
4182 -> 4184 [label="int tmp___23;"]
4184 -> 4186 [label="unsigned int tmp___24;"]
4186 -> 4188 [label="int tmp___25;"]
4188 -> 4190 [label="int tmp___26;"]
4190 -> 4192 [label="unsigned int tmp___27;"]
4192 -> 4194 [label="int tmp___28;"]
4194 -> 4196 [label="int tmp___29;"]
4196 -> 4198 [label="unsigned int tmp___30;"]
4198 -> 4200 [label="int tmp___31;"]
4200 -> 4202 [label="int tmp___32;"]
4202 -> 4204 [label="unsigned int tmp___33;"]
4204 -> 4206 [label="unsigned int tmp___34;"]
4206 -> 4208 [label="unsigned int part;"]
4208 -> 4210 [label="unsigned int tmp___35;"]
4210 -> 4212 [label="int tmp___36;"]
4212 -> 4214 [label="int tmp___37;"]
4214 -> 4216 [label="unsigned int tmp___38;"]
4216 -> 4218 [label="int tmp___39;"]
4218 -> 4220 [label="int tmp___40;"]
4220 -> 4222 [label="struct _reent *tmp___41;"]
4222 -> 4224 [label="unsigned int len;"]
4224 -> 4226 [label="unsigned int tmp___42;"]
4226 -> 4228 [label="int tmp___43;"]
4228 -> 4230 [label="int tmp___44;"]
4230 -> 4232 [label="unsigned int tmp___45;"]
4232 -> 4234 [label="int tmp___46;"]
4234 -> 4236 [label="int tmp___47;"]
4236 -> 4238 [label="struct _reent *tmp___48;"]
4238 -> 4240 [label="unsigned int tmp___49;"]
4240 -> 4242 [label="unsigned int tmp___50;"]
4242 -> 4244 [label="char c;"]
4244 -> 4246 [label="unsigned int tmp___51;"]
4246 -> 4248 [label="int tmp___52;"]
4248 -> 4250 [label="char *p;"]
4250 -> 4252 [label="char *tmp___53;"]
4252 -> 4254 [label="char *base;"]
4254 -> 4256 [label="unsigned int tmp___54;"]
4256 -> 4258 [label="int tmp___55;"]
4258 -> 4260 [label="int tmp___56;"]
4260 -> 4262 [label="char *tmp___57;"]
4262 -> 4264 [label="unsigned int tmp___58;"]
4264 -> 4266 [label="int tmp___59;"]
4266 -> 4268 [label="int tmp___60;"]
4268 -> 4270 [label="int tmp___61;"]
4270 -> 4272 [label="int tmp___62;"]
4272 -> 4274 [label="int tmp___63;"]
4274 -> 4276 [label="int tmp___64;"]
4276 -> 4278 [label="int tmp___65;"]
4278 -> 4280 [label="int tmp___66;"]
4280 -> 4282 [label="int tmp___67;"]
4282 -> 4284 [label="int tmp___68;"]
4284 -> 4286 [label="struct _reent *tmp___69;"]
4286 -> 4288 [label="struct _reent *tmp___70;"]
4288 -> 4291 [label="[!(force != 0)]"]
4288 -> 4290 [label="[force != 0]"]
4290 -> 4294 [label="[!(to_stdout != 0)]"]
4290 -> 4293 [label="[to_stdout != 0]"]
4293 -> 4297 [label="[!(inptr < insize)]"]
4293 -> 4296 [label="[inptr < insize]"]
4296 -> 4298 [label="tmp = inptr;"]
4298 -> 4299 [label="inptr = inptr + 1U;"]
4299 -> 4300 [label="tmp___1 = (int)(*(inbuf + tmp));"]
4300 -> 4295 [label=""]
4295 -> 4303 [label="magic[0] = (char)tmp___1;"]
4303 -> 4306 [label="[!(inptr < insize)]"]
4303 -> 4305 [label="[inptr < insize]"]
4305 -> 4307 [label="tmp___2 = inptr;"]
4307 -> 4308 [label="inptr = inptr + 1U;"]
4308 -> 4309 [label="tmp___4 = (int)(*(inbuf + tmp___2));"]
4309 -> 4304 [label=""]
4304 -> 4312 [label="magic[1] = (char)tmp___4;"]
4312 -> 4292 [label=""]
4292 -> 4289 [label=""]
4289 -> 4333 [label="method = -1;"]
4333 -> 4334 [label="part_nb = part_nb + 1;"]
4334 -> 4335 [label="header_bytes = 0L;"]
4335 -> 4336 [label="last_member = 0;"]
4336 -> 4337 [label="tmp___67 = memcmp((const void *)magic, (const void *)\"\037\213\", 2U);"]
4337 -> 4340 [label="[!(tmp___67 == 0)]"]
4337 -> 4339 [label="[tmp___67 == 0]"]
4339 -> 4346 [label="Goto: _L___4"]
4346 -> 4349 [label="[!(inptr < insize)]"]
4346 -> 4348 [label="[inptr < insize]"]
4348 -> 4350 [label="tmp___11 = inptr;"]
4350 -> 4351 [label="inptr = inptr + 1U;"]
4351 -> 4352 [label="tmp___13 = (int)(*(inbuf + tmp___11));"]
4352 -> 4347 [label=""]
4347 -> 4355 [label="method = tmp___13;"]
4355 -> 4356 [label="[!(method != 8)]"]
4355 -> 4357 [label="[method != 8]"]
4357 -> 4358 [label="tmp___14 = __getreent();"]
4358 -> 4359 [label="fprintf(tmp___14->_stderr, \"%s: %s: unknown method %d -- get newer version of gzip\n\", progname, ifname, method);"]
4359 -> 4360 [label="exit_code = 1;"]
4360 -> 4126 [label="return -1;"]
4356 -> 4362 [label="work = &unzip;"]
4362 -> 4365 [label="[!(inptr < insize)]"]
4362 -> 4364 [label="[inptr < insize]"]
4364 -> 4366 [label="tmp___15 = inptr;"]
4366 -> 4367 [label="inptr = inptr + 1U;"]
4367 -> 4368 [label="tmp___17 = (int)(*(inbuf + tmp___15));"]
4368 -> 4363 [label=""]
4363 -> 4371 [label="flags__1 = (unsigned char)tmp___17;"]
4371 -> 4372 [label="[!((((int)flags__1) & 32) != 0)]"]
4371 -> 4373 [label="[(((int)flags__1) & 32) != 0]"]
4373 -> 4374 [label="tmp___18 = __getreent();"]
4374 -> 4375 [label="fprintf(tmp___18->_stderr, \"%s: %s is encrypted -- get newer version of gzip\n\", progname, ifname);"]
4375 -> 4376 [label="exit_code = 1;"]
4376 -> 4126 [label="return -1;"]
4372 -> 4378 [label="[!((((int)flags__1) & 2) != 0)]"]
4372 -> 4379 [label="[(((int)flags__1) & 2) != 0]"]
4379 -> 4380 [label="tmp___19 = __getreent();"]
4380 -> 4381 [label="fprintf(tmp___19->_stderr, \"%s: %s is a a multi-part gzip file -- get newer version of gzip\n\", progname, ifname);"]
4381 -> 4382 [label="exit_code = 1;"]
4382 -> 4383 [label="[!(force <= 1)]"]
4382 -> 4384 [label="[force <= 1]"]
4384 -> 4126 [label="return -1;"]
4383 -> 4378 [label=""]
4378 -> 4386 [label="[!((((int)flags__1) & 192) != 0)]"]
4378 -> 4387 [label="[(((int)flags__1) & 192) != 0]"]
4387 -> 4388 [label="tmp___20 = __getreent();"]
4388 -> 4389 [label="fprintf(tmp___20->_stderr, \"%s: %s has flags 0x%x -- get newer version of gzip\n\", progname, ifname, flags__1);"]
4389 -> 4390 [label="exit_code = 1;"]
4390 -> 4391 [label="[!(force <= 1)]"]
4390 -> 4392 [label="[force <= 1]"]
4392 -> 4126 [label="return -1;"]
4391 -> 4386 [label=""]
4386 -> 4396 [label="[!(inptr < insize)]"]
4386 -> 4395 [label="[inptr < insize]"]
4395 -> 4397 [label="tmp___21 = inptr;"]
4397 -> 4398 [label="inptr = inptr + 1U;"]
4398 -> 4399 [label="tmp___23 = (int)(*(inbuf + tmp___21));"]
4399 -> 4394 [label=""]
4394 -> 4402 [label="stamp = (unsigned long)tmp___23;"]
4402 -> 4405 [label="[!(inptr < insize)]"]
4402 -> 4404 [label="[inptr < insize]"]
4404 -> 4406 [label="tmp___24 = inptr;"]
4406 -> 4407 [label="inptr = inptr + 1U;"]
4407 -> 4408 [label="tmp___26 = (int)(*(inbuf + tmp___24));"]
4408 -> 4403 [label=""]
4403 -> 4411 [label="stamp = stamp | (((unsigned long)tmp___26) << 8);"]
4411 -> 4414 [label="[!(inptr < insize)]"]
4411 -> 4413 [label="[inptr < insize]"]
4413 -> 4415 [label="tmp___27 = inptr;"]
4415 -> 4416 [label="inptr = inptr + 1U;"]
4416 -> 4417 [label="tmp___29 = (int)(*(inbuf + tmp___27));"]
4417 -> 4412 [label=""]
4412 -> 4420 [label="stamp = stamp | (((unsigned long)tmp___29) << 16);"]
4420 -> 4423 [label="[!(inptr < insize)]"]
4420 -> 4422 [label="[inptr < insize]"]
4422 -> 4424 [label="tmp___30 = inptr;"]
4424 -> 4425 [label="inptr = inptr + 1U;"]
4425 -> 4426 [label="tmp___32 = (int)(*(inbuf + tmp___30));"]
4426 -> 4421 [label=""]
4421 -> 4429 [label="stamp = stamp | (((unsigned long)tmp___32) << 24);"]
4429 -> 4430 [label="[!(stamp != 0UL)]"]
4429 -> 4431 [label="[stamp != 0UL]"]
4431 -> 4432 [label="[!(!no_time)]"]
4431 -> 4433 [label="[!no_time]"]
4433 -> 4434 [label="time_stamp = (long)stamp;"]
4434 -> 4430 [label=""]
4430 -> 4437 [label="[!(inptr < insize)]"]
4430 -> 4436 [label="[inptr < insize]"]
4436 -> 4438 [label="tmp___33 = inptr;"]
4438 -> 4439 [label="inptr = inptr + 1U;"]
4439 -> 4435 [label=""]
4435 -> 4443 [label="[!(inptr < insize)]"]
4435 -> 4442 [label="[inptr < insize]"]
4442 -> 4444 [label="tmp___34 = inptr;"]
4444 -> 4445 [label="inptr = inptr + 1U;"]
4445 -> 4441 [label=""]
4441 -> 4447 [label="[!((((int)flags__1) & 2) != 0)]"]
4441 -> 4448 [label="[(((int)flags__1) & 2) != 0]"]
4448 -> 4451 [label="[!(inptr < insize)]"]
4448 -> 4450 [label="[inptr < insize]"]
4450 -> 4452 [label="tmp___35 = inptr;"]
4452 -> 4453 [label="inptr = inptr + 1U;"]
4453 -> 4454 [label="tmp___37 = (int)(*(inbuf + tmp___35));"]
4454 -> 4449 [label=""]
4449 -> 4457 [label="part = (unsigned int)tmp___37;"]
4457 -> 4460 [label="[!(inptr < insize)]"]
4457 -> 4459 [label="[inptr < insize]"]
4459 -> 4461 [label="tmp___38 = inptr;"]
4461 -> 4462 [label="inptr = inptr + 1U;"]
4462 -> 4463 [label="tmp___40 = (int)(*(inbuf + tmp___38));"]
4463 -> 4458 [label=""]
4458 -> 4466 [label="part = part | (((unsigned int)tmp___40) << 8);"]
4466 -> 4467 [label="[!(verbose != 0)]"]
4466 -> 4468 [label="[verbose != 0]"]
4468 -> 4469 [label="tmp___41 = __getreent();"]
4469 -> 4470 [label="fprintf(tmp___41->_stderr, \"%s: %s: part number %u\n\", progname, ifname, part);"]
4470 -> 4447 [label=""]
4447 -> 4471 [label="[!((((int)flags__1) & 4) != 0)]"]
4447 -> 4472 [label="[(((int)flags__1) & 4) != 0]"]
4472 -> 4475 [label="[!(inptr < insize)]"]
4472 -> 4474 [label="[inptr < insize]"]
4474 -> 4476 [label="tmp___42 = inptr;"]
4476 -> 4477 [label="inptr = inptr + 1U;"]
4477 -> 4478 [label="tmp___44 = (int)(*(inbuf + tmp___42));"]
4478 -> 4473 [label=""]
4473 -> 4481 [label="len = (unsigned int)tmp___44;"]
4481 -> 4484 [label="[!(inptr < insize)]"]
4481 -> 4483 [label="[inptr < insize]"]
4483 -> 4485 [label="tmp___45 = inptr;"]
4485 -> 4486 [label="inptr = inptr + 1U;"]
4486 -> 4487 [label="tmp___47 = (int)(*(inbuf + tmp___45));"]
4487 -> 4482 [label=""]
4482 -> 4490 [label="len = len | (((unsigned int)tmp___47) << 8);"]
4490 -> 4491 [label="[!(verbose != 0)]"]
4490 -> 4492 [label="[verbose != 0]"]
4492 -> 4493 [label="tmp___48 = __getreent();"]
4493 -> 4494 [label="fprintf(tmp___48->_stderr, \"%s: %s: extra field of %u bytes ignored\n\", progname, ifname, len);"]
4494 -> 4491 [label=""]
4491 -> 4495 [label="while"]
4495 -> 4496 [label=""]
4496 -> 4498 [label="tmp___50 = len;"]
4498 -> 4499 [label="len = len - 1U;"]
4499 -> 4500 [label="[!(!tmp___50)]"]
4499 -> 4501 [label="[!tmp___50]"]
4501 -> 4497 [label="break"]
4497 -> 4471 [label=""]
4471 -> 4509 [label="[!((((int)flags__1) & 8) != 0)]"]
4471 -> 4510 [label="[(((int)flags__1) & 8) != 0]"]
4510 -> 4513 [label="[!(no_name != 0)]"]
4510 -> 4512 [label="[no_name != 0]"]
4512 -> 4527 [label="Goto: _L___0"]
4527 -> 4528 [label="while"]
4528 -> 4529 [label=""]
4529 -> 4533 [label="[!(inptr < insize)]"]
4529 -> 4532 [label="[inptr < insize]"]
4532 -> 4534 [label="tmp___51 = inptr;"]
4534 -> 4535 [label="inptr = inptr + 1U;"]
4535 -> 4536 [label="c = (char)(*(inbuf + tmp___51));"]
4536 -> 4531 [label=""]
4531 -> 4539 [label="[!(!(((int)c) != 0))]"]
4531 -> 4540 [label="[!(((int)c) != 0)]"]
4540 -> 4530 [label="break"]
4530 -> 4509 [label=""]
4509 -> 4570 [label="[!((((int)flags__1) & 16) != 0)]"]
4509 -> 4571 [label="[(((int)flags__1) & 16) != 0]"]
4571 -> 4572 [label="while"]
4572 -> 4573 [label=""]
4573 -> 4577 [label="[!(inptr < insize)]"]
4573 -> 4576 [label="[inptr < insize]"]
4576 -> 4578 [label="tmp___58 = inptr;"]
4578 -> 4579 [label="inptr = inptr + 1U;"]
4579 -> 4580 [label="tmp___60 = (int)(*(inbuf + tmp___58));"]
4580 -> 4575 [label=""]
4575 -> 4583 [label="[!(!(tmp___60 != 0))]"]
4575 -> 4584 [label="[!(tmp___60 != 0)]"]
4584 -> 4574 [label="break"]
4574 -> 4570 [label=""]
4570 -> 4586 [label="[!(part_nb == 1)]"]
4570 -> 4587 [label="[part_nb == 1]"]
4587 -> 4588 [label="header_bytes = (long)(inptr + (2U * (sizeof(long))));"]
4588 -> 4586 [label=""]
4586 -> 4338 [label=""]
4338 -> 4640 [label="[!(method >= 0)]"]
4338 -> 4641 [label="[method >= 0]"]
4641 -> 4126 [label="return method;"]
4640 -> 4645 [label="[!(part_nb == 1)]"]
4640 -> 4644 [label="[part_nb == 1]"]
4644 -> 4646 [label="tmp___69 = __getreent();"]
4646 -> 4647 [label="fprintf(tmp___69->_stderr, \"\n%s: %s: not in gzip format\n\", progname, ifname);"]
4647 -> 4648 [label="exit_code = 1;"]
4648 -> 4126 [label="return -1;"]
4645 -> 4650 [label="[!(!quiet)]"]
4645 -> 4651 [label="[!quiet]"]
4651 -> 4652 [label="tmp___70 = __getreent();"]
4652 -> 4653 [label="fprintf(tmp___70->_stderr, \"\n%s: %s: decompression OK, trailing garbage ignored\n\", progname, ifname);"]
4653 -> 4650 [label=""]
4650 -> 4654 [label="[!(exit_code == 0)]"]
4650 -> 4655 [label="[exit_code == 0]"]
4655 -> 4656 [label="exit_code = 2;"]
4656 -> 4654 [label=""]
4654 -> 4126 [label="return -2;"]
4583 -> 4572 [label=""]
4577 -> 4581 [label="tmp___59 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4581 -> 4582 [label="tmp___60 = tmp___59;"]
4582 -> 4575 [label=""]
4539 -> 4528 [label=""]
4533 -> 4537 [label="tmp___52 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4537 -> 4538 [label="c = (char)tmp___52;"]
4538 -> 4531 [label=""]
4513 -> 4517 [label="[!(to_stdout != 0)]"]
4513 -> 4516 [label="[to_stdout != 0]"]
4516 -> 4520 [label="[!(!list)]"]
4516 -> 4519 [label="[!list]"]
4519 -> 4527 [label="Goto: _L___0"]
4520 -> 4523 [label="Goto: _L___1"]
4523 -> 4526 [label="[!(part_nb > 1)]"]
4523 -> 4525 [label="[part_nb > 1]"]
4525 -> 4527 [label="Label: _L___0"]
4526 -> 4542 [label="tmp___53 = gzipbasename(ofname);" style="dotted" arrowhead="empty"]
4542 -> 4543 [label="p = tmp___53;"]
4543 -> 4544 [label="base = p;"]
4544 -> 4545 [label="while"]
4545 -> 4546 [label=""]
4546 -> 4550 [label="[!(inptr < insize)]"]
4546 -> 4549 [label="[inptr < insize]"]
4549 -> 4551 [label="tmp___54 = inptr;"]
4551 -> 4552 [label="inptr = inptr + 1U;"]
4552 -> 4553 [label="tmp___56 = (int)(*(inbuf + tmp___54));"]
4553 -> 4548 [label=""]
4548 -> 4556 [label="*p = (char)tmp___56;"]
4556 -> 4557 [label="tmp___57 = p;"]
4557 -> 4558 [label="p = p + 1;"]
4558 -> 4559 [label="[!(((int)(*tmp___57)) == 0)]"]
4558 -> 4560 [label="[((int)(*tmp___57)) == 0]"]
4560 -> 4547 [label="break"]
4547 -> 4565 [label="[!(!list)]"]
4547 -> 4566 [label="[!list]"]
4566 -> 4567 [label="[!(base != 0)]"]
4566 -> 4568 [label="[base != 0]"]
4568 -> 4569 [label="list = 0;"]
4569 -> 4509 [label=""]
4567 -> 4509 [label=""]
4565 -> 4509 [label=""]
4559 -> 4562 [label="[!(((unsigned int)p) >= ((unsigned int)(ofname + (sizeof(ofname)))))]"]
4559 -> 4563 [label="[((unsigned int)p) >= ((unsigned int)(ofname + (sizeof(ofname))))]"]
4563 -> 4564 [label="error((char *)\"corrupted input -- file name too large\");" style="dotted" arrowhead="empty"]
4564 -> 4562 [label=""]
4562 -> 4545 [label=""]
4550 -> 4554 [label="tmp___55 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4554 -> 4555 [label="tmp___56 = tmp___55;"]
4555 -> 4548 [label=""]
4517 -> 4523 [label="Label: _L___1"]
4500 -> 4505 [label="[!(inptr < insize)]"]
4500 -> 4504 [label="[inptr < insize]"]
4504 -> 4506 [label="tmp___49 = inptr;"]
4506 -> 4507 [label="inptr = inptr + 1U;"]
4507 -> 4503 [label=""]
4503 -> 4495 [label=""]
4505 -> 4508 [label="fill_inbuf(0);" style="dotted" arrowhead="empty"]
4508 -> 4503 [label=""]
4484 -> 4488 [label="tmp___46 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4488 -> 4489 [label="tmp___47 = tmp___46;"]
4489 -> 4482 [label=""]
4475 -> 4479 [label="tmp___43 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4479 -> 4480 [label="tmp___44 = tmp___43;"]
4480 -> 4473 [label=""]
4467 -> 4447 [label=""]
4460 -> 4464 [label="tmp___39 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4464 -> 4465 [label="tmp___40 = tmp___39;"]
4465 -> 4458 [label=""]
4451 -> 4455 [label="tmp___36 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4455 -> 4456 [label="tmp___37 = tmp___36;"]
4456 -> 4449 [label=""]
4443 -> 4446 [label="fill_inbuf(0);" style="dotted" arrowhead="empty"]
4446 -> 4441 [label=""]
4437 -> 4440 [label="fill_inbuf(0);" style="dotted" arrowhead="empty"]
4440 -> 4435 [label=""]
4432 -> 4430 [label=""]
4423 -> 4427 [label="tmp___31 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4427 -> 4428 [label="tmp___32 = tmp___31;"]
4428 -> 4421 [label=""]
4414 -> 4418 [label="tmp___28 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4418 -> 4419 [label="tmp___29 = tmp___28;"]
4419 -> 4412 [label=""]
4405 -> 4409 [label="tmp___25 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4409 -> 4410 [label="tmp___26 = tmp___25;"]
4410 -> 4403 [label=""]
4396 -> 4400 [label="tmp___22 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4400 -> 4401 [label="tmp___23 = tmp___22;"]
4401 -> 4394 [label=""]
4365 -> 4369 [label="tmp___16 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4369 -> 4370 [label="tmp___17 = tmp___16;"]
4370 -> 4363 [label=""]
4349 -> 4353 [label="tmp___12 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4353 -> 4354 [label="tmp___13 = tmp___12;"]
4354 -> 4347 [label=""]
4340 -> 4342 [label="tmp___68 = memcmp((const void *)magic, (const void *)\"\037\236\", 2U);"]
4342 -> 4345 [label="[!(tmp___68 == 0)]"]
4342 -> 4344 [label="[tmp___68 == 0]"]
4344 -> 4346 [label="Label: _L___4"]
4345 -> 4589 [label="tmp___65 = memcmp((const void *)magic, (const void *)\"PK\003\004\", 2U);"]
4589 -> 4592 [label="[!(tmp___65 == 0)]"]
4589 -> 4591 [label="[tmp___65 == 0]"]
4591 -> 4595 [label="[!(inptr == 2U)]"]
4591 -> 4594 [label="[inptr == 2U]"]
4594 -> 4596 [label="tmp___66 = memcmp((const void *)((char *)inbuf), (const void *)\"PK\003\004\", 4U);"]
4596 -> 4599 [label="[!(tmp___66 == 0)]"]
4596 -> 4598 [label="[tmp___66 == 0]"]
4598 -> 4600 [label="inptr = 0U;"]
4600 -> 4601 [label="work = &unzip;"]
4601 -> 4602 [label="tmp___61 = check_zipfile(in);" style="dotted" arrowhead="empty"]
4602 -> 4603 [label="[!(tmp___61 != 0)]"]
4602 -> 4604 [label="[tmp___61 != 0]"]
4604 -> 4126 [label="return -1;"]
4603 -> 4606 [label="last_member = 1;"]
4606 -> 4597 [label=""]
4597 -> 4593 [label=""]
4593 -> 4338 [label=""]
4599 -> 4609 [label="Goto: _L___3"]
4609 -> 4610 [label="tmp___64 = memcmp((const void *)magic, (const void *)\"\037\036\", 2U);"]
4610 -> 4613 [label="[!(tmp___64 == 0)]"]
4610 -> 4612 [label="[tmp___64 == 0]"]
4612 -> 4614 [label="work = &unpack;"]
4614 -> 4615 [label="method = 2;"]
4615 -> 4338 [label=""]
4613 -> 4616 [label="tmp___63 = memcmp((const void *)magic, (const void *)\"\037\235\", 2U);"]
4616 -> 4619 [label="[!(tmp___63 == 0)]"]
4616 -> 4618 [label="[tmp___63 == 0]"]
4618 -> 4620 [label="work = &unlzw;"]
4620 -> 4621 [label="method = 1;"]
4621 -> 4622 [label="last_member = 1;"]
4622 -> 4338 [label=""]
4619 -> 4623 [label="tmp___62 = memcmp((const void *)magic, (const void *)\"\037\240\", 2U);"]
4623 -> 4626 [label="[!(tmp___62 == 0)]"]
4623 -> 4625 [label="[tmp___62 == 0]"]
4625 -> 4627 [label="work = &unlzh;"]
4627 -> 4628 [label="method = 3;"]
4628 -> 4629 [label="last_member = 1;"]
4629 -> 4338 [label=""]
4626 -> 4630 [label="[!(force != 0)]"]
4626 -> 4631 [label="[force != 0]"]
4631 -> 4632 [label="[!(to_stdout != 0)]"]
4631 -> 4633 [label="[to_stdout != 0]"]
4633 -> 4634 [label="[!(!list)]"]
4633 -> 4635 [label="[!list]"]
4635 -> 4636 [label="method = 0;"]
4636 -> 4637 [label="work = &copy;"]
4637 -> 4638 [label="inptr = 0U;"]
4638 -> 4639 [label="last_member = 1;"]
4639 -> 4338 [label=""]
4634 -> 4338 [label=""]
4632 -> 4338 [label=""]
4630 -> 4338 [label=""]
4595 -> 4609 [label="Goto: _L___3"]
4592 -> 4609 [label="Label: _L___3"]
4306 -> 4310 [label="tmp___3 = fill_inbuf(1);" style="dotted" arrowhead="empty"]
4310 -> 4311 [label="tmp___4 = tmp___3;"]
4311 -> 4304 [label=""]
4297 -> 4301 [label="tmp___0 = fill_inbuf(1);" style="dotted" arrowhead="empty"]
4301 -> 4302 [label="tmp___1 = tmp___0;"]
4302 -> 4295 [label=""]
4294 -> 4314 [label="Goto: _L"]
4314 -> 4317 [label="[!(inptr < insize)]"]
4314 -> 4316 [label="[inptr < insize]"]
4316 -> 4318 [label="tmp___5 = inptr;"]
4318 -> 4319 [label="inptr = inptr + 1U;"]
4319 -> 4320 [label="tmp___7 = (int)(*(inbuf + tmp___5));"]
4320 -> 4315 [label=""]
4315 -> 4323 [label="magic[0] = (char)tmp___7;"]
4323 -> 4326 [label="[!(inptr < insize)]"]
4323 -> 4325 [label="[inptr < insize]"]
4325 -> 4327 [label="tmp___8 = inptr;"]
4327 -> 4328 [label="inptr = inptr + 1U;"]
4328 -> 4329 [label="tmp___10 = (int)(*(inbuf + tmp___8));"]
4329 -> 4324 [label=""]
4324 -> 4332 [label="magic[1] = (char)tmp___10;"]
4332 -> 4289 [label=""]
4326 -> 4330 [label="tmp___9 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4330 -> 4331 [label="tmp___10 = tmp___9;"]
4331 -> 4324 [label=""]
4317 -> 4321 [label="tmp___6 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
4321 -> 4322 [label="tmp___7 = tmp___6;"]
4322 -> 4315 [label=""]
4291 -> 4314 [label="Label: _L"]}
subgraph cluster_write_buf {
label="write_buf()"
558 -> 559 [label="Function start dummy edge"]
559 -> 561 [label="unsigned int n;"]
561 -> 563 [label="int tmp;"]
563 -> 564 [label="while"]
564 -> 565 [label=""]
565 -> 567 [label="tmp = spec_write(fd, (unsigned char *)buf, (int)cnt);" style="dotted" arrowhead="empty"]
567 -> 568 [label="n = (unsigned int)tmp;"]
568 -> 569 [label="[!(!(n != cnt))]"]
568 -> 570 [label="[!(n != cnt)]"]
570 -> 566 [label="break"]
566 -> 557 [label="return;"]
574 -> 572 [label=""]
572 -> 575 [label="cnt = cnt - n;"]
575 -> 576 [label="buf = (void *)(((char *)buf) + n);"]
576 -> 564 [label=""]
569 -> 572 [label="[!(n == 4294967295U)]"]
569 -> 573 [label="[n == 4294967295U]"]
573 -> 574 [label="write_error();" style="dotted" arrowhead="empty"]}
subgraph cluster_version {
label="version()"
302 -> 303 [label="Function start dummy edge"]
303 -> 305 [label="struct _reent *tmp;"]
305 -> 307 [label="struct _reent *tmp___0;"]
307 -> 309 [label="struct _reent *tmp___1;"]
309 -> 311 [label="struct _reent *tmp___2;"]
311 -> 313 [label="struct _reent *tmp___3;"]
313 -> 314 [label="tmp = __getreent();"]
314 -> 315 [label="fprintf(tmp->_stderr, \"Compilation options:\n%s %s \", \"NO_DIR\", \"NO_UTIME\");"]
315 -> 316 [label="tmp___0 = __getreent();"]
316 -> 317 [label="fprintf(tmp___0->_stderr, \"NO_CHOWN \");"]
317 -> 318 [label="tmp___1 = __getreent();"]
318 -> 319 [label="fprintf(tmp___1->_stderr, \"PROTO \");"]
319 -> 320 [label="tmp___2 = __getreent();"]
320 -> 321 [label="fprintf(tmp___2->_stderr, \"DYN_ALLOC \");"]
321 -> 322 [label="tmp___3 = __getreent();"]
322 -> 323 [label="fprintf(tmp___3->_stderr, \"\n\");"]
323 -> 301 [label="return;"]}
subgraph cluster_check_ofname {
label="check_ofname()"
4911 -> 4912 [label="Function start dummy edge"]
4912 -> 4914 [label="struct stat ostat;"]
4914 -> 4916 [label="int tmp;"]
4916 -> 4918 [label="int tmp___0;"]
4918 -> 4920 [label="int tmp___1;"]
4920 -> 4922 [label="const char *tmp___2;"]
4922 -> 4924 [label="struct _reent *tmp___3;"]
4924 -> 4926 [label="struct _reent *tmp___4;"]
4926 -> 4928 [label="int tmp___5;"]
4928 -> 4930 [label="int tmp___6;"]
4930 -> 4932 [label="char response[80];"]
4932 -> 4934 [label="struct _reent *tmp___7;"]
4934 -> 4936 [label="struct _reent *tmp___8;"]
4936 -> 4938 [label="struct _reent *tmp___9;"]
4938 -> 4940 [label="struct _reent *tmp___10;"]
4940 -> 4942 [label="struct _reent *tmp___11;"]
4942 -> 4944 [label="int tmp___12;"]
4944 -> 4946 [label="struct _reent *tmp___13;"]
4946 -> 4948 [label="int tmp___15;"]
4948 -> 4950 [label="int tmp___16;"]
4950 -> 4952 [label="struct _reent *tmp___17;"]
4952 -> 4954 [label="int tmp___18;"]
4954 -> 4955 [label="tmp = stat((const char *)ofname, &ostat);"]
4955 -> 4956 [label="[!(tmp != 0)]"]
4955 -> 4957 [label="[tmp != 0]"]
4957 -> 4910 [label="return 0;"]
4964 -> 4965 [label="tmp___0 = stat((const char *)ofname, &ostat);"]
4965 -> 4966 [label="[!(tmp___0 != 0)]"]
4965 -> 4967 [label="[tmp___0 != 0]"]
4967 -> 4910 [label="return 0;"]
4966 -> 4959 [label=""]
4959 -> 4969 [label="tmp___6 = same_file(&istat, &ostat);" style="dotted" arrowhead="empty"]
4969 -> 4970 [label="[!(tmp___6 != 0)]"]
4969 -> 4971 [label="[tmp___6 != 0]"]
4971 -> 4972 [label="tmp___5 = strcmp((const char *)ifname, (const char *)ofname);"]
4972 -> 4975 [label="[!(tmp___5 == 0)]"]
4972 -> 4974 [label="[tmp___5 == 0]"]
4974 -> 4978 [label="[!(decompress != 0)]"]
4974 -> 4977 [label="[decompress != 0]"]
4977 -> 4979 [label="tmp___2 = \"de\";"]
4979 -> 4976 [label=""]
4976 -> 4981 [label="tmp___3 = __getreent();"]
4981 -> 4982 [label="fprintf(tmp___3->_stderr, \"%s: %s: cannot %scompress onto itself\n\", progname, ifname, tmp___2);"]
4982 -> 4973 [label=""]
4973 -> 4985 [label="exit_code = 1;"]
4985 -> 4910 [label="return 1;"]
4978 -> 4980 [label="tmp___2 = \"\";"]
4980 -> 4976 [label=""]
4975 -> 4983 [label="tmp___4 = __getreent();"]
4983 -> 4984 [label="fprintf(tmp___4->_stderr, \"%s: %s and %s are the same file\n\", progname, ifname, ofname);"]
4984 -> 4973 [label=""]
4970 -> 4987 [label="[!(!force)]"]
4970 -> 4988 [label="[!force]"]
4988 -> 4989 [label="strcpy(response, \"n\");"]
4989 -> 4990 [label="tmp___7 = __getreent();"]
4990 -> 4991 [label="fprintf(tmp___7->_stderr, \"%s: %s already exists;\", progname, ofname);"]
4991 -> 4992 [label="[!(foreground != 0)]"]
4991 -> 4993 [label="[foreground != 0]"]
4993 -> 4994 [label="tmp___11 = __getreent();"]
4994 -> 4995 [label="tmp___12 = fileno(tmp___11->_stdin);"]
4995 -> 4996 [label="[!(tmp___12 <= 2)]"]
4995 -> 4997 [label="[tmp___12 <= 2]"]
4997 -> 4998 [label="tmp___8 = __getreent();"]
4998 -> 4999 [label="fprintf(tmp___8->_stderr, \" do you wish to overwrite (y or n)? \");"]
4999 -> 5000 [label="tmp___9 = __getreent();"]
5000 -> 5001 [label="fflush(tmp___9->_stderr);"]
5001 -> 5002 [label="tmp___10 = __getreent();"]
5002 -> 5003 [label="fgets(response, (int)((sizeof(response)) - 1U), tmp___10->_stdin);"]
5003 -> 4992 [label=""]
4992 -> 5004 [label="tmp___16 = isupper((int)(response[0]));"]
5004 -> 5007 [label="[!(tmp___16 != 0)]"]
5004 -> 5006 [label="[tmp___16 != 0]"]
5006 -> 5008 [label="tmp___15 = (((int)(response[0])) - 65) + 97;"]
5008 -> 5005 [label=""]
5005 -> 5010 [label="[!(tmp___15 != 121)]"]
5005 -> 5011 [label="[tmp___15 != 121]"]
5011 -> 5012 [label="tmp___13 = __getreent();"]
5012 -> 5013 [label="fprintf(tmp___13->_stderr, \"\tnot overwritten\n\");"]
5013 -> 5014 [label="[!(exit_code == 0)]"]
5013 -> 5015 [label="[exit_code == 0]"]
5015 -> 5016 [label="exit_code = 2;"]
5016 -> 5014 [label=""]
5014 -> 4910 [label="return 1;"]
5010 -> 4987 [label=""]
4987 -> 5018 [label="tmp___18 = unlink(ofname);"]
5018 -> 5019 [label="[!(tmp___18 != 0)]"]
5018 -> 5020 [label="[tmp___18 != 0]"]
5020 -> 5021 [label="tmp___17 = __getreent();"]
5021 -> 5022 [label="fprintf(tmp___17->_stderr, \"%s: \", progname);"]
5022 -> 5023 [label="perror((const char *)ofname);"]
5023 -> 5024 [label="exit_code = 1;"]
5024 -> 4910 [label="return 1;"]
5019 -> 4910 [label="return 0;"]
5007 -> 5009 [label="tmp___15 = (int)(response[0]);"]
5009 -> 5005 [label=""]
4996 -> 4992 [label=""]
4961 -> 4962 [label="[!(tmp___1 != 0)]"]
4961 -> 4963 [label="[tmp___1 != 0]"]
4963 -> 4964 [label="shorten_name(ofname);" style="dotted" arrowhead="empty"]
4962 -> 4959 [label=""]
4956 -> 4959 [label="[!(!decompress)]"]
4956 -> 4960 [label="[!decompress]"]
4960 -> 4961 [label="tmp___1 = name_too_long(ofname, &ostat);" style="dotted" arrowhead="empty"]}
subgraph cluster_display_ratio {
label="display_ratio()"
1179 -> 1180 [label="Function start dummy edge"]
1180 -> 1182 [label="long ratio;"]
1182 -> 1185 [label="[!(den == 0L)]"]
1182 -> 1184 [label="[den == 0L]"]
1184 -> 1186 [label="ratio = 0L;"]
1186 -> 1183 [label=""]
1183 -> 1194 [label="[!(ratio < 0L)]"]
1183 -> 1193 [label="[ratio < 0L]"]
1193 -> 1195 [label="putc('-', file);"]
1195 -> 1196 [label="ratio = -ratio;"]
1196 -> 1192 [label=""]
1192 -> 1198 [label="fprintf(file, \"%2ld.%1ld%%\", ratio / 10L, ratio % 10L);"]
1198 -> 1178 [label="return;"]
1194 -> 1197 [label="putc(' ', file);"]
1197 -> 1192 [label=""]
1185 -> 1189 [label="[!(den < 2147483L)]"]
1185 -> 1188 [label="[den < 2147483L]"]
1188 -> 1190 [label="ratio = (1000L * num) / den;"]
1190 -> 1183 [label=""]
1189 -> 1191 [label="ratio = num / (den / 1000L);"]
1191 -> 1183 [label=""]}
subgraph cluster_longest_match {
label="longest_match()"
2297 -> 2298 [label="Function start dummy edge"]
2298 -> 2300 [label="unsigned int chain_length;"]
2300 -> 2302 [label="uch *scan;"]
2302 -> 2304 [label="uch *match;"]
2304 -> 2306 [label="int len;"]
2306 -> 2308 [label="int best_len;"]
2308 -> 2310 [label="IPos limit;"]
2310 -> 2312 [label="unsigned int tmp;"]
2312 -> 2314 [label="uch *strend;"]
2314 -> 2316 [label="uch scan_end1;"]
2316 -> 2318 [label="uch scan_end;"]
2318 -> 2319 [label="chain_length = max_chain_length;"]
2319 -> 2320 [label="scan = window + strstart;"]
2320 -> 2321 [label="best_len = (int)prev_length;"]
2321 -> 2324 [label="[!(strstart > 32506U)]"]
2321 -> 2323 [label="[strstart > 32506U]"]
2323 -> 2325 [label="tmp = strstart - 32506U;"]
2325 -> 2322 [label=""]
2322 -> 2327 [label="limit = tmp;"]
2327 -> 2328 [label="strend = (window + strstart) + 258;"]
2328 -> 2329 [label="scan_end1 = *(scan + (best_len - 1));"]
2329 -> 2330 [label="scan_end = *(scan + best_len);"]
2330 -> 2331 [label="[!(prev_length >= good_match)]"]
2330 -> 2332 [label="[prev_length >= good_match]"]
2332 -> 2333 [label="chain_length = chain_length >> 2;"]
2333 -> 2331 [label=""]
2331 -> 2334 [label="while"]
2334 -> 2335 [label=""]
2335 -> 2337 [label="match = window + cur_match;"]
2337 -> 2340 [label="[!(((int)(*(match + best_len))) != ((int)scan_end))]"]
2337 -> 2339 [label="[((int)(*(match + best_len))) != ((int)scan_end)]"]
2339 -> 2421 [label="Goto: __Cont"]
2421 -> 2422 [label="cur_match = (unsigned int)(*(prev + (cur_match & 32767U)));"]
2422 -> 2425 [label="[!(cur_match > limit)]"]
2422 -> 2424 [label="[cur_match > limit]"]
2424 -> 2426 [label="chain_length = chain_length - 1U;"]
2426 -> 2427 [label="[!(!(chain_length != 0U))]"]
2426 -> 2428 [label="[!(chain_length != 0U)]"]
2428 -> 2336 [label="break"]
2336 -> 2296 [label="return best_len;"]
2427 -> 2423 [label=""]
2423 -> 2334 [label=""]
2425 -> 2336 [label="break"]
2340 -> 2344 [label="[!(((int)(*(match + (best_len - 1)))) != ((int)scan_end1))]"]
2340 -> 2343 [label="[((int)(*(match + (best_len - 1)))) != ((int)scan_end1)]"]
2343 -> 2421 [label="Goto: __Cont"]
2344 -> 2348 [label="[!(((int)(*match)) != ((int)(*scan)))]"]
2344 -> 2347 [label="[((int)(*match)) != ((int)(*scan))]"]
2347 -> 2421 [label="Goto: __Cont"]
2348 -> 2350 [label="match = match + 1;"]
2350 -> 2351 [label="[!(((int)(*match)) != ((int)(*(scan + 1))))]"]
2350 -> 2352 [label="[((int)(*match)) != ((int)(*(scan + 1)))]"]
2352 -> 2421 [label="Goto: __Cont"]
2351 -> 2338 [label=""]
2338 -> 2354 [label="scan = scan + 2;"]
2354 -> 2355 [label="match = match + 1;"]
2355 -> 2356 [label="while"]
2356 -> 2357 [label=""]
2357 -> 2359 [label="scan = scan + 1;"]
2359 -> 2360 [label="match = match + 1;"]
2360 -> 2363 [label="[!(((int)(*scan)) == ((int)(*match)))]"]
2360 -> 2362 [label="[((int)(*scan)) == ((int)(*match))]"]
2362 -> 2364 [label="scan = scan + 1;"]
2364 -> 2365 [label="match = match + 1;"]
2365 -> 2368 [label="[!(((int)(*scan)) == ((int)(*match)))]"]
2365 -> 2367 [label="[((int)(*scan)) == ((int)(*match))]"]
2367 -> 2369 [label="scan = scan + 1;"]
2369 -> 2370 [label="match = match + 1;"]
2370 -> 2373 [label="[!(((int)(*scan)) == ((int)(*match)))]"]
2370 -> 2372 [label="[((int)(*scan)) == ((int)(*match))]"]
2372 -> 2374 [label="scan = scan + 1;"]
2374 -> 2375 [label="match = match + 1;"]
2375 -> 2378 [label="[!(((int)(*scan)) == ((int)(*match)))]"]
2375 -> 2377 [label="[((int)(*scan)) == ((int)(*match))]"]
2377 -> 2379 [label="scan = scan + 1;"]
2379 -> 2380 [label="match = match + 1;"]
2380 -> 2383 [label="[!(((int)(*scan)) == ((int)(*match)))]"]
2380 -> 2382 [label="[((int)(*scan)) == ((int)(*match))]"]
2382 -> 2384 [label="scan = scan + 1;"]
2384 -> 2385 [label="match = match + 1;"]
2385 -> 2388 [label="[!(((int)(*scan)) == ((int)(*match)))]"]
2385 -> 2387 [label="[((int)(*scan)) == ((int)(*match))]"]
2387 -> 2389 [label="scan = scan + 1;"]
2389 -> 2390 [label="match = match + 1;"]
2390 -> 2393 [label="[!(((int)(*scan)) == ((int)(*match)))]"]
2390 -> 2392 [label="[((int)(*scan)) == ((int)(*match))]"]
2392 -> 2394 [label="scan = scan + 1;"]
2394 -> 2395 [label="match = match + 1;"]
2395 -> 2398 [label="[!(((int)(*scan)) == ((int)(*match)))]"]
2395 -> 2397 [label="[((int)(*scan)) == ((int)(*match))]"]
2397 -> 2399 [label="[!(!(((unsigned int)scan) < ((unsigned int)strend)))]"]
2397 -> 2400 [label="[!(((unsigned int)scan) < ((unsigned int)strend))]"]
2400 -> 2358 [label="break"]
2358 -> 2410 [label="len = 258 - (strend - scan);"]
2410 -> 2411 [label="scan = strend - 258;"]
2411 -> 2412 [label="[!(len > best_len)]"]
2411 -> 2413 [label="[len > best_len]"]
2413 -> 2414 [label="match_start = cur_match;"]
2414 -> 2415 [label="best_len = len;"]
2415 -> 2416 [label="[!(len >= nice_match)]"]
2415 -> 2417 [label="[len >= nice_match]"]
2417 -> 2336 [label="break"]
2416 -> 2419 [label="scan_end1 = *(scan + (best_len - 1));"]
2419 -> 2420 [label="scan_end = *(scan + best_len);"]
2420 -> 2412 [label=""]
2412 -> 2421 [label="Label: __Cont"]
2399 -> 2396 [label=""]
2396 -> 2391 [label=""]
2391 -> 2386 [label=""]
2386 -> 2381 [label=""]
2381 -> 2376 [label=""]
2376 -> 2371 [label=""]
2371 -> 2366 [label=""]
2366 -> 2361 [label=""]
2361 -> 2356 [label=""]
2398 -> 2358 [label="break"]
2393 -> 2358 [label="break"]
2388 -> 2358 [label="break"]
2383 -> 2358 [label="break"]
2378 -> 2358 [label="break"]
2373 -> 2358 [label="break"]
2368 -> 2358 [label="break"]
2363 -> 2358 [label="break"]
2324 -> 2326 [label="tmp = 0U;"]
2326 -> 2322 [label=""]}
subgraph cluster_compress_block {
label="compress_block()"
7438 -> 7439 [label="Function start dummy edge"]
7439 -> 7441 [label="unsigned int dist;"]
7441 -> 7443 [label="int lc;"]
7443 -> 7445 [label="unsigned int lx;"]
7445 -> 7447 [label="unsigned int dx;"]
7447 -> 7449 [label="unsigned int fx;"]
7449 -> 7451 [label="uch flag;"]
7451 -> 7453 [label="unsigned int code;"]
7453 -> 7455 [label="int extra;"]
7455 -> 7457 [label="unsigned int tmp;"]
7457 -> 7459 [label="unsigned int tmp___0;"]
7459 -> 7461 [label="struct _reent *tmp___1;"]
7461 -> 7463 [label="struct _reent *tmp___2;"]
7463 -> 7465 [label="unsigned int tmp___3;"]
7465 -> 7467 [label="struct _reent *tmp___4;"]
7467 -> 7469 [label="struct _reent *tmp___5;"]
7469 -> 7470 [label="lx = 0U;"]
7470 -> 7471 [label="dx = 0U;"]
7471 -> 7472 [label="fx = 0U;"]
7472 -> 7473 [label="flag = (uch )0;"]
7473 -> 7474 [label="[!(last_lit != 0U)]"]
7473 -> 7475 [label="[last_lit != 0U]"]
7475 -> 7476 [label="while"]
7476 -> 7477 [label=""]
7477 -> 7479 [label="[!((lx & 7U) == 0U)]"]
7477 -> 7480 [label="[(lx & 7U) == 0U]"]
7480 -> 7481 [label="tmp = fx;"]
7481 -> 7482 [label="fx = fx + 1U;"]
7482 -> 7483 [label="flag = flag_buf[tmp];"]
7483 -> 7479 [label=""]
7479 -> 7484 [label="tmp___0 = lx;"]
7484 -> 7485 [label="lx = lx + 1U;"]
7485 -> 7486 [label="lc = (int)(*(inbuf + tmp___0));"]
7486 -> 7489 [label="[!((((int)flag) & 1) == 0)]"]
7486 -> 7488 [label="[(((int)flag) & 1) == 0]"]
7488 -> 7490 [label="[!(verbose > 1)]"]
7488 -> 7491 [label="[verbose > 1]"]
7491 -> 7492 [label="tmp___1 = __getreent();"]
7492 -> 7493 [label="fprintf(tmp___1->_stderr, \"\ncd %3d \", lc);"]
7493 -> 7490 [label=""]
7490 -> 7494 [label="send_bits((int)((ltree + lc)->fc.code), (int)((ltree + lc)->dl.len));" style="dotted" arrowhead="empty"]
7494 -> 7487 [label=""]
7487 -> 7524 [label="flag = (unsigned char)(((int)flag) >> 1);"]
7524 -> 7525 [label="[!(!(lx < last_lit))]"]
7524 -> 7526 [label="[!(lx < last_lit)]"]
7526 -> 7478 [label="break"]
7478 -> 7474 [label=""]
7474 -> 7528 [label="[!(verbose > 1)]"]
7474 -> 7529 [label="[verbose > 1]"]
7529 -> 7530 [label="tmp___5 = __getreent();"]
7530 -> 7531 [label="fprintf(tmp___5->_stderr, \"\ncd %3d \", 256);"]
7531 -> 7528 [label=""]
7528 -> 7532 [label="send_bits((int)((ltree + 256)->fc.code), (int)((ltree + 256)->dl.len));" style="dotted" arrowhead="empty"]
7532 -> 7437 [label="return;"]
7525 -> 7476 [label=""]
7489 -> 7495 [label="code = (unsigned int)(length_code[lc]);"]
7495 -> 7496 [label="[!(verbose > 1)]"]
7495 -> 7497 [label="[verbose > 1]"]
7497 -> 7498 [label="tmp___2 = __getreent();"]
7498 -> 7499 [label="fprintf(tmp___2->_stderr, \"\ncd %3d \", (code + 256U) + 1U);"]
7499 -> 7496 [label=""]
7496 -> 7500 [label="send_bits((int)((ltree + ((code + 256U) + 1U))->fc.code), (int)((ltree + ((code + 256U) + 1U))->dl.len));" style="dotted" arrowhead="empty"]
7500 -> 7501 [label="extra = extra_lbits[code];"]
7501 -> 7502 [label="[!(extra != 0)]"]
7501 -> 7503 [label="[extra != 0]"]
7503 -> 7504 [label="lc = lc - (base_length[code]);"]
7504 -> 7505 [label="send_bits(lc, extra);" style="dotted" arrowhead="empty"]
7505 -> 7502 [label=""]
7502 -> 7506 [label="tmp___3 = dx;"]
7506 -> 7507 [label="dx = dx + 1U;"]
7507 -> 7508 [label="dist = (unsigned int)(*(d_buf + tmp___3));"]
7508 -> 7511 [label="[!(dist < 256U)]"]
7508 -> 7510 [label="[dist < 256U]"]
7510 -> 7512 [label="code = (unsigned int)(dist_code[dist]);"]
7512 -> 7509 [label=""]
7509 -> 7514 [label="[!(verbose > 1)]"]
7509 -> 7515 [label="[verbose > 1]"]
7515 -> 7516 [label="tmp___4 = __getreent();"]
7516 -> 7517 [label="fprintf(tmp___4->_stderr, \"\ncd %3d \", code);"]
7517 -> 7514 [label=""]
7514 -> 7518 [label="send_bits((int)((dtree + code)->fc.code), (int)((dtree + code)->dl.len));" style="dotted" arrowhead="empty"]
7518 -> 7519 [label="extra = extra_dbits[code];"]
7519 -> 7520 [label="[!(extra != 0)]"]
7519 -> 7521 [label="[extra != 0]"]
7521 -> 7522 [label="dist = dist - ((unsigned int)(base_dist[code]));"]
7522 -> 7523 [label="send_bits((int)dist, extra);" style="dotted" arrowhead="empty"]
7523 -> 7487 [label=""]
7520 -> 7487 [label=""]
7511 -> 7513 [label="code = (unsigned int)(dist_code[256U + (dist >> 7)]);"]
7513 -> 7509 [label=""]}
subgraph cluster_deflate {
label="deflate()"
2589 -> 2590 [label="Function start dummy edge"]
2590 -> 2592 [label="IPos hash_head;"]
2592 -> 2594 [label="IPos prev_match;"]
2594 -> 2596 [label="int flush;"]
2596 -> 2598 [label="int match_available;"]
2598 -> 2600 [label="unsigned int match_length;"]
2600 -> 2602 [label="ulg tmp;"]
2602 -> 2604 [label="int tmp___0;"]
2604 -> 2606 [label="char *tmp___1;"]
2606 -> 2608 [label="char *tmp___2;"]
2608 -> 2610 [label="int tmp___3;"]
2610 -> 2612 [label="char *tmp___4;"]
2612 -> 2614 [label="ulg tmp___5;"]
2614 -> 2615 [label="match_available = 0;"]
2615 -> 2616 [label="match_length = 2U;"]
2616 -> 2617 [label="[!(compr_level <= 3)]"]
2616 -> 2618 [label="[compr_level <= 3]"]
2618 -> 2619 [label="tmp = deflate_fast();" style="dotted" arrowhead="empty"]
2710 -> 2700 [label=""]
2700 -> 2701 [label=""]
2701 -> 2705 [label="[!(lookahead < 262U)]"]
2701 -> 2704 [label="[lookahead < 262U]"]
2704 -> 2706 [label="[!(!(!eofile))]"]
2704 -> 2707 [label="[!(!eofile)]"]
2707 -> 2702 [label="break"]
2702 -> 2621 [label=""]
2621 -> 2623 [label="[!(lookahead != 0U)]"]
2621 -> 2622 [label="[lookahead != 0U]"]
2622 -> 2624 [label="ins_h = ((ins_h << 5) ^ ((unsigned int)(*(window + ((strstart + 3U) - 1U))))) & (((unsigned int)(1 << 15)) - 1U);"]
2624 -> 2625 [label="hash_head = (unsigned int)(*((prev + 32768) + ins_h));"]
2625 -> 2626 [label="*(prev + (strstart & 32767U)) = (unsigned short)hash_head;"]
2626 -> 2627 [label="*((prev + 32768) + ins_h) = (unsigned short)strstart;"]
2627 -> 2628 [label="prev_length = match_length;"]
2628 -> 2629 [label="prev_match = match_start;"]
2629 -> 2630 [label="match_length = 2U;"]
2630 -> 2631 [label="[!(hash_head != 0U)]"]
2630 -> 2632 [label="[hash_head != 0U]"]
2632 -> 2633 [label="[!(prev_length < max_lazy_match)]"]
2632 -> 2634 [label="[prev_length < max_lazy_match]"]
2634 -> 2635 [label="[!((strstart - hash_head) <= 32506U)]"]
2634 -> 2636 [label="[(strstart - hash_head) <= 32506U]"]
2636 -> 2637 [label="tmp___0 = longest_match(hash_head);" style="dotted" arrowhead="empty"]
2637 -> 2638 [label="match_length = (unsigned int)tmp___0;"]
2638 -> 2639 [label="[!(match_length > lookahead)]"]
2638 -> 2640 [label="[match_length > lookahead]"]
2640 -> 2641 [label="match_length = lookahead;"]
2641 -> 2639 [label=""]
2639 -> 2642 [label="[!(match_length == 3U)]"]
2639 -> 2643 [label="[match_length == 3U]"]
2643 -> 2644 [label="[!((strstart - match_start) > 4096U)]"]
2643 -> 2645 [label="[(strstart - match_start) > 4096U]"]
2645 -> 2646 [label="match_length = match_length - 1U;"]
2646 -> 2631 [label=""]
2631 -> 2649 [label="[!(prev_length >= 3U)]"]
2631 -> 2648 [label="[prev_length >= 3U]"]
2648 -> 2652 [label="[!(match_length <= prev_length)]"]
2648 -> 2651 [label="[match_length <= prev_length]"]
2651 -> 2653 [label="flush = ct_tally((int)((strstart - 1U) - prev_match), (int)(prev_length - 3U));" style="dotted" arrowhead="empty"]
2653 -> 2654 [label="lookahead = lookahead - (prev_length - 1U);"]
2654 -> 2655 [label="prev_length = prev_length - 2U;"]
2655 -> 2656 [label="while"]
2656 -> 2657 [label=""]
2657 -> 2659 [label="strstart = strstart + 1U;"]
2659 -> 2660 [label="ins_h = ((ins_h << 5) ^ ((unsigned int)(*(window + ((strstart + 3U) - 1U))))) & (((unsigned int)(1 << 15)) - 1U);"]
2660 -> 2661 [label="hash_head = (unsigned int)(*((prev + 32768) + ins_h));"]
2661 -> 2662 [label="*(prev + (strstart & 32767U)) = (unsigned short)hash_head;"]
2662 -> 2663 [label="*((prev + 32768) + ins_h) = (unsigned short)strstart;"]
2663 -> 2664 [label="prev_length = prev_length - 1U;"]
2664 -> 2665 [label="[!(!(prev_length != 0U))]"]
2664 -> 2666 [label="[!(prev_length != 0U)]"]
2666 -> 2658 [label="break"]
2658 -> 2668 [label="match_available = 0;"]
2668 -> 2669 [label="match_length = 2U;"]
2669 -> 2670 [label="strstart = strstart + 1U;"]
2670 -> 2671 [label="[!(flush != 0)]"]
2670 -> 2672 [label="[flush != 0]"]
2672 -> 2675 [label="[!(block_start >= 0L)]"]
2672 -> 2674 [label="[block_start >= 0L]"]
2674 -> 2676 [label="tmp___1 = (char *)(window + ((unsigned int)block_start));"]
2676 -> 2673 [label=""]
2673 -> 2678 [label="flush_block(tmp___1, (unsigned long)(((long)strstart) - block_start), 0);" style="dotted" arrowhead="empty"]
2678 -> 2679 [label="block_start = (long)strstart;"]
2679 -> 2671 [label=""]
2671 -> 2650 [label=""]
2650 -> 2647 [label=""]
2647 -> 2700 [label="while"]
2675 -> 2677 [label="tmp___1 = (char *)((void *)0);"]
2677 -> 2673 [label=""]
2665 -> 2656 [label=""]
2652 -> 2681 [label="Goto: _L"]
2681 -> 2684 [label="[!(match_available != 0)]"]
2681 -> 2683 [label="[match_available != 0]"]
2683 -> 2685 [label="tmp___3 = ct_tally(0, (int)(*(window + (strstart - 1U))));" style="dotted" arrowhead="empty"]
2685 -> 2686 [label="[!(tmp___3 != 0)]"]
2685 -> 2687 [label="[tmp___3 != 0]"]
2687 -> 2690 [label="[!(block_start >= 0L)]"]
2687 -> 2689 [label="[block_start >= 0L]"]
2689 -> 2691 [label="tmp___2 = (char *)(window + ((unsigned int)block_start));"]
2691 -> 2688 [label=""]
2688 -> 2693 [label="flush_block(tmp___2, (unsigned long)(((long)strstart) - block_start), 0);" style="dotted" arrowhead="empty"]
2693 -> 2694 [label="block_start = (long)strstart;"]
2694 -> 2686 [label=""]
2686 -> 2695 [label="strstart = strstart + 1U;"]
2695 -> 2696 [label="lookahead = lookahead - 1U;"]
2696 -> 2647 [label=""]
2690 -> 2692 [label="tmp___2 = (char *)((void *)0);"]
2692 -> 2688 [label=""]
2684 -> 2697 [label="match_available = 1;"]
2697 -> 2698 [label="strstart = strstart + 1U;"]
2698 -> 2699 [label="lookahead = lookahead - 1U;"]
2699 -> 2647 [label=""]
2649 -> 2681 [label="Label: _L"]
2644 -> 2631 [label=""]
2642 -> 2631 [label=""]
2635 -> 2631 [label=""]
2633 -> 2631 [label=""]
2623 -> 2711 [label="[!(match_available != 0)]"]
2623 -> 2712 [label="[match_available != 0]"]
2712 -> 2713 [label="ct_tally(0, (int)(*(window + (strstart - 1U))));" style="dotted" arrowhead="empty"]
2713 -> 2711 [label=""]
2711 -> 2716 [label="[!(block_start >= 0L)]"]
2711 -> 2715 [label="[block_start >= 0L]"]
2715 -> 2717 [label="tmp___4 = (char *)(window + ((unsigned int)block_start));"]
2717 -> 2714 [label=""]
2714 -> 2719 [label="tmp___5 = flush_block(tmp___4, (unsigned long)(((long)strstart) - block_start), 1);" style="dotted" arrowhead="empty"]
2719 -> 2588 [label="return tmp___5;"]
2716 -> 2718 [label="tmp___4 = (char *)((void *)0);"]
2718 -> 2714 [label=""]
2706 -> 2703 [label=""]
2703 -> 2710 [label="fill_window();" style="dotted" arrowhead="empty"]
2705 -> 2702 [label="break"]
2619 -> 2588 [label="return tmp;"]
2617 -> 2621 [label="while"]}
subgraph cluster_create_outfile {
label="create_outfile()"
3851 -> 3852 [label="Function start dummy edge"]
3852 -> 3854 [label="struct stat ostat;"]
3854 -> 3856 [label="int flags__1;"]
3856 -> 3858 [label="int tmp;"]
3858 -> 3860 [label="struct _reent *tmp___0;"]
3860 -> 3862 [label="int tmp___1;"]
3862 -> 3864 [label="int tmp___2;"]
3864 -> 3866 [label="struct _reent *tmp___3;"]
3866 -> 3867 [label="flags__1 = 68097;"]
3867 -> 3868 [label="[!(ascii != 0)]"]
3867 -> 3869 [label="[ascii != 0]"]
3869 -> 3870 [label="[!(decompress != 0)]"]
3869 -> 3871 [label="[decompress != 0]"]
3871 -> 3872 [label="flags__1 = flags__1 & (-65537);"]
3872 -> 3868 [label=""]
3868 -> 3873 [label="while"]
3873 -> 3874 [label=""]
3874 -> 3876 [label="tmp = check_ofname();" style="dotted" arrowhead="empty"]
3876 -> 3877 [label="[!(tmp != 0)]"]
3876 -> 3878 [label="[tmp != 0]"]
3878 -> 3879 [label="close(ifd);"]
3879 -> 3850 [label="return 1;"]
3877 -> 3881 [label="remove_ofname = 1;"]
3881 -> 3882 [label="ofd = open((const char *)ofname, flags__1);"]
3882 -> 3883 [label="[!(ofd == (-1))]"]
3882 -> 3884 [label="[ofd == (-1)]"]
3884 -> 3885 [label="perror((const char *)ofname);"]
3885 -> 3886 [label="close(ifd);"]
3886 -> 3887 [label="exit_code = 1;"]
3887 -> 3850 [label="return 1;"]
3883 -> 3889 [label="tmp___1 = fstat(ofd, &ostat);"]
3889 -> 3890 [label="[!(tmp___1 != 0)]"]
3889 -> 3891 [label="[tmp___1 != 0]"]
3891 -> 3892 [label="tmp___0 = __getreent();"]
3892 -> 3893 [label="fprintf(tmp___0->_stderr, \"%s: \", progname);"]
3893 -> 3894 [label="perror((const char *)ofname);"]
3894 -> 3895 [label="close(ifd);"]
3895 -> 3896 [label="close(ofd);"]
3896 -> 3897 [label="unlink(ofname);"]
3897 -> 3898 [label="exit_code = 1;"]
3898 -> 3850 [label="return 1;"]
3890 -> 3900 [label="tmp___2 = name_too_long(ofname, &ostat);" style="dotted" arrowhead="empty"]
3900 -> 3901 [label="[!(!tmp___2)]"]
3900 -> 3902 [label="[!tmp___2]"]
3902 -> 3850 [label="return 0;"]
3901 -> 3904 [label="[!(decompress != 0)]"]
3901 -> 3905 [label="[decompress != 0]"]
3905 -> 3906 [label="[!(!quiet)]"]
3905 -> 3907 [label="[!quiet]"]
3907 -> 3908 [label="tmp___3 = __getreent();"]
3908 -> 3909 [label="fprintf(tmp___3->_stderr, \"%s: %s: warning, name truncated\n\", progname, ofname);"]
3909 -> 3906 [label=""]
3906 -> 3910 [label="[!(exit_code == 0)]"]
3906 -> 3911 [label="[exit_code == 0]"]
3911 -> 3912 [label="exit_code = 2;"]
3912 -> 3910 [label=""]
3910 -> 3850 [label="return 0;"]
3904 -> 3914 [label="close(ofd);"]
3914 -> 3915 [label="unlink(ofname);"]
3915 -> 3916 [label="shorten_name(ofname);" style="dotted" arrowhead="empty"]
3916 -> 3873 [label=""]
3870 -> 3868 [label=""]}
subgraph cluster_build_tree {
label="build_tree()"
6965 -> 6966 [label="Function start dummy edge"]
6966 -> 6968 [label="ct_data *tree;"]
6968 -> 6970 [label="ct_data *stree;"]
6970 -> 6972 [label="int elems;"]
6972 -> 6974 [label="int n;"]
6974 -> 6976 [label="int m;"]
6976 -> 6978 [label="int max_code;"]
6978 -> 6980 [label="int node;"]
6980 -> 6982 [label="int new;"]
6982 -> 6984 [label="int tmp;"]
6984 -> 6986 [label="int tmp___0;"]
6986 -> 6988 [label="int tmp___1;"]
6988 -> 6990 [label="ush tmp___2;"]
6990 -> 6992 [label="int tmp___3;"]
6992 -> 6993 [label="tree = desc->dyn_tree;"]
6993 -> 6994 [label="stree = desc->static_tree;"]
6994 -> 6995 [label="elems = desc->elems;"]
6995 -> 6996 [label="max_code = -1;"]
6996 -> 6997 [label="node = elems;"]
6997 -> 6998 [label="heap_len = 0;"]
6998 -> 6999 [label="heap_max = 573;"]
6999 -> 7000 [label="n = 0;"]
7000 -> 7001 [label="while"]
7001 -> 7003 [label="[!(n < elems)]"]
7001 -> 7002 [label="[n < elems]"]
7002 -> 7006 [label="[!(((int)((tree + n)->fc.freq)) != 0)]"]
7002 -> 7005 [label="[((int)((tree + n)->fc.freq)) != 0]"]
7005 -> 7007 [label="heap_len = heap_len + 1;"]
7007 -> 7008 [label="max_code = n;"]
7008 -> 7009 [label="heap[heap_len] = max_code;"]
7009 -> 7010 [label="depth[n] = (unsigned char)0;"]
7010 -> 7004 [label=""]
7004 -> 7012 [label="n = n + 1;"]
7012 -> 7001 [label=""]
7006 -> 7011 [label="(tree + n)->dl.len = (unsigned short)0;"]
7011 -> 7004 [label=""]
7003 -> 7013 [label="while"]
7013 -> 7015 [label="[!(heap_len < 2)]"]
7013 -> 7014 [label="[heap_len < 2]"]
7014 -> 7016 [label="heap_len = heap_len + 1;"]
7016 -> 7019 [label="[!(max_code < 2)]"]
7016 -> 7018 [label="[max_code < 2]"]
7018 -> 7020 [label="max_code = max_code + 1;"]
7020 -> 7021 [label="tmp = max_code;"]
7021 -> 7017 [label=""]
7017 -> 7023 [label="heap[heap_len] = tmp;"]
7023 -> 7024 [label="new = tmp;"]
7024 -> 7025 [label="(tree + new)->fc.freq = (unsigned short)1;"]
7025 -> 7026 [label="depth[new] = (unsigned char)0;"]
7026 -> 7027 [label="opt_len = opt_len - 1;"]
7027 -> 7028 [label="[!(stree != 0)]"]
7027 -> 7029 [label="[stree != 0]"]
7029 -> 7030 [label="static_len = static_len - ((ulg )((stree + new)->dl.len));"]
7030 -> 7028 [label=""]
7028 -> 7013 [label=""]
7019 -> 7022 [label="tmp = 0;"]
7022 -> 7017 [label=""]
7015 -> 7031 [label="desc->max_code = max_code;"]
7031 -> 7032 [label="n = heap_len / 2;"]
7032 -> 7033 [label="while"]
7033 -> 7035 [label="[!(n >= 1)]"]
7033 -> 7034 [label="[n >= 1]"]
7034 -> 7036 [label="pqdownheap(tree, n);" style="dotted" arrowhead="empty"]
7064 -> 7065 [label="[!(!(heap_len >= 2))]"]
7064 -> 7066 [label="[!(heap_len >= 2)]"]
7066 -> 7040 [label="break"]
7040 -> 7068 [label="heap_max = heap_max - 1;"]
7068 -> 7069 [label="heap[heap_max] = heap[1];"]
7069 -> 7070 [label="gen_bitlen(desc);" style="dotted" arrowhead="empty"]
7070 -> 7071 [label="gen_codes(tree, max_code);" style="dotted" arrowhead="empty"]
7071 -> 6964 [label="return;"]
7065 -> 7038 [label=""]
7038 -> 7039 [label=""]
7039 -> 7041 [label="n = heap[1];"]
7041 -> 7042 [label="tmp___0 = heap_len;"]
7042 -> 7043 [label="heap_len = heap_len - 1;"]
7043 -> 7044 [label="heap[1] = heap[tmp___0];"]
7044 -> 7045 [label="pqdownheap(tree, 1);" style="dotted" arrowhead="empty"]
7045 -> 7046 [label="m = heap[1];"]
7046 -> 7047 [label="heap_max = heap_max - 1;"]
7047 -> 7048 [label="heap[heap_max] = n;"]
7048 -> 7049 [label="heap_max = heap_max - 1;"]
7049 -> 7050 [label="heap[heap_max] = m;"]
7050 -> 7051 [label="(tree + node)->fc.freq = (unsigned short)(((int)((tree + n)->fc.freq)) + ((int)((tree + m)->fc.freq)));"]
7051 -> 7054 [label="[!(((int)(depth[n])) >= ((int)(depth[m])))]"]
7051 -> 7053 [label="[((int)(depth[n])) >= ((int)(depth[m]))]"]
7053 -> 7055 [label="tmp___1 = (int)(depth[n]);"]
7055 -> 7052 [label=""]
7052 -> 7057 [label="depth[node] = (unsigned char)(tmp___1 + 1);"]
7057 -> 7058 [label="tmp___2 = (unsigned short)node;"]
7058 -> 7059 [label="(tree + m)->dl.dad = tmp___2;"]
7059 -> 7060 [label="(tree + n)->dl.dad = tmp___2;"]
7060 -> 7061 [label="tmp___3 = node;"]
7061 -> 7062 [label="node = node + 1;"]
7062 -> 7063 [label="heap[1] = tmp___3;"]
7063 -> 7064 [label="pqdownheap(tree, 1);" style="dotted" arrowhead="empty"]
7054 -> 7056 [label="tmp___1 = (int)(depth[m]);"]
7056 -> 7052 [label=""]
7036 -> 7037 [label="n = n - 1;"]
7037 -> 7033 [label=""]
7035 -> 7038 [label="while"]}
subgraph cluster_do_stat {
label="do_stat()"
3918 -> 3919 [label="Function start dummy edge"]
3919 -> 3921 [label="int tmp;"]
3921 -> 3923 [label="int tmp___0;"]
3923 -> 3924 [label="errno = 0;"]
3924 -> 3925 [label="[!(!to_stdout)]"]
3924 -> 3926 [label="[!to_stdout]"]
3926 -> 3927 [label="[!(!force)]"]
3926 -> 3928 [label="[!force]"]
3928 -> 3929 [label="tmp = lstat((const char *)name, sbuf);"]
3929 -> 3917 [label="return tmp;"]
3927 -> 3925 [label=""]
3925 -> 3931 [label="tmp___0 = stat((const char *)name, sbuf);"]
3931 -> 3917 [label="return tmp___0;"]}
subgraph cluster_gen_bitlen {
label="gen_bitlen()"
6818 -> 6819 [label="Function start dummy edge"]
6819 -> 6821 [label="ct_data *tree;"]
6821 -> 6823 [label="int *extra;"]
6823 -> 6825 [label="int base;"]
6825 -> 6827 [label="int max_code;"]
6827 -> 6829 [label="int max_length;"]
6829 -> 6831 [label="ct_data *stree;"]
6831 -> 6833 [label="int h;"]
6833 -> 6835 [label="int n;"]
6835 -> 6837 [label="int m;"]
6837 -> 6839 [label="int bits;"]
6839 -> 6841 [label="int xbits;"]
6841 -> 6843 [label="ush f;"]
6843 -> 6845 [label="int overflow;"]
6845 -> 6846 [label="tree = desc->dyn_tree;"]
6846 -> 6847 [label="extra = desc->extra_bits;"]
6847 -> 6848 [label="base = desc->extra_base;"]
6848 -> 6849 [label="max_code = desc->max_code;"]
6849 -> 6850 [label="max_length = desc->max_length;"]
6850 -> 6851 [label="stree = desc->static_tree;"]
6851 -> 6852 [label="overflow = 0;"]
6852 -> 6853 [label="bits = 0;"]
6853 -> 6854 [label="while"]
6854 -> 6856 [label="[!(bits <= 15)]"]
6854 -> 6855 [label="[bits <= 15]"]
6855 -> 6857 [label="bl_count[bits] = (unsigned short)0;"]
6857 -> 6858 [label="bits = bits + 1;"]
6858 -> 6854 [label=""]
6856 -> 6859 [label="(tree + (heap[heap_max]))->dl.len = (unsigned short)0;"]
6859 -> 6860 [label="h = heap_max + 1;"]
6860 -> 6861 [label="while"]
6861 -> 6863 [label="[!(h < 573)]"]
6861 -> 6862 [label="[h < 573]"]
6862 -> 6864 [label="n = heap[h];"]
6864 -> 6865 [label="bits = ((int)((tree + ((tree + n)->dl.dad))->dl.len)) + 1;"]
6865 -> 6866 [label="[!(bits > max_length)]"]
6865 -> 6867 [label="[bits > max_length]"]
6867 -> 6868 [label="bits = max_length;"]
6868 -> 6869 [label="overflow = overflow + 1;"]
6869 -> 6866 [label=""]
6866 -> 6870 [label="(tree + n)->dl.len = (unsigned short)bits;"]
6870 -> 6871 [label="[!(n > max_code)]"]
6870 -> 6872 [label="[n > max_code]"]
6872 -> 6884 [label="Goto: __Cont"]
6884 -> 6885 [label="h = h + 1;"]
6885 -> 6861 [label=""]
6871 -> 6874 [label="bl_count[bits] = (ush )(((int)(bl_count[bits])) + 1);"]
6874 -> 6875 [label="xbits = 0;"]
6875 -> 6876 [label="[!(n >= base)]"]
6875 -> 6877 [label="[n >= base]"]
6877 -> 6878 [label="xbits = *(extra + (n - base));"]
6878 -> 6876 [label=""]
6876 -> 6879 [label="f = (tree + n)->fc.freq;"]
6879 -> 6880 [label="opt_len = opt_len + (((unsigned long)f) * ((unsigned long)(bits + xbits)));"]
6880 -> 6881 [label="[!(stree != 0)]"]
6880 -> 6882 [label="[stree != 0]"]
6882 -> 6883 [label="static_len = static_len + (((unsigned long)f) * ((unsigned long)(((int)((stree + n)->dl.len)) + xbits)));"]
6883 -> 6881 [label=""]
6881 -> 6884 [label="Label: __Cont"]
6863 -> 6886 [label="[!(overflow == 0)]"]
6863 -> 6887 [label="[overflow == 0]"]
6887 -> 6817 [label="return;"]
6886 -> 6889 [label="while"]
6889 -> 6890 [label=""]
6890 -> 6892 [label="bits = max_length - 1;"]
6892 -> 6893 [label="while"]
6893 -> 6895 [label="[!(((int)(bl_count[bits])) == 0)]"]
6893 -> 6894 [label="[((int)(bl_count[bits])) == 0]"]
6894 -> 6896 [label="bits = bits - 1;"]
6896 -> 6893 [label=""]
6895 -> 6897 [label="bl_count[bits] = (ush )(((int)(bl_count[bits])) - 1);"]
6897 -> 6898 [label="bl_count[bits + 1] = (unsigned short)(((int)(bl_count[bits + 1])) + 2);"]
6898 -> 6899 [label="bl_count[max_length] = (ush )(((int)(bl_count[max_length])) - 1);"]
6899 -> 6900 [label="overflow = overflow - 2;"]
6900 -> 6901 [label="[!(!(overflow > 0))]"]
6900 -> 6902 [label="[!(overflow > 0)]"]
6902 -> 6891 [label="break"]
6891 -> 6904 [label="bits = max_length;"]
6904 -> 6905 [label="while"]
6905 -> 6907 [label="[!(bits != 0)]"]
6905 -> 6906 [label="[bits != 0]"]
6906 -> 6908 [label="n = (int)(bl_count[bits]);"]
6908 -> 6909 [label="while"]
6909 -> 6911 [label="[!(n != 0)]"]
6909 -> 6910 [label="[n != 0]"]
6910 -> 6912 [label="h = h - 1;"]
6912 -> 6913 [label="m = heap[h];"]
6913 -> 6914 [label="[!(m > max_code)]"]
6913 -> 6915 [label="[m > max_code]"]
6915 -> 6909 [label="continue"]
6914 -> 6917 [label="[!(((unsigned int)((tree + m)->dl.len)) != ((unsigned int)bits))]"]
6914 -> 6918 [label="[((unsigned int)((tree + m)->dl.len)) != ((unsigned int)bits)]"]
6918 -> 6919 [label="opt_len = opt_len + ((ulg )((((long)bits) - ((long)((tree + m)->dl.len))) * ((long)((tree + m)->fc.freq))));"]
6919 -> 6920 [label="(tree + m)->dl.len = (unsigned short)bits;"]
6920 -> 6917 [label=""]
6917 -> 6921 [label="n = n - 1;"]
6921 -> 6909 [label=""]
6911 -> 6922 [label="bits = bits - 1;"]
6922 -> 6905 [label=""]
6907 -> 6817 [label="return;"]
6901 -> 6889 [label=""]}
subgraph cluster_unzip {
label="unzip()"
436 -> 437 [label="res = tmp;"]
437 -> 440 [label="[!(res == 3)]"]
437 -> 439 [label="[res == 3]"]
439 -> 441 [label="error(\"out of memory\");" style="dotted" arrowhead="empty"]
441 -> 438 [label=""]
438 -> 433 [label=""]
433 -> 490 [label="[!(!pkzip)]"]
433 -> 489 [label="[!pkzip]"]
489 -> 491 [label="n = 0;"]
491 -> 492 [label="while"]
492 -> 494 [label="[!(n < 8)]"]
492 -> 493 [label="[n < 8]"]
493 -> 497 [label="[!(inptr < insize)]"]
493 -> 496 [label="[inptr < insize]"]
496 -> 498 [label="tmp___7 = inptr;"]
498 -> 499 [label="inptr = inptr + 1U;"]
499 -> 500 [label="tmp___9 = (int)(*(inbuf + tmp___7));"]
500 -> 495 [label=""]
495 -> 503 [label="buf[n] = (unsigned char)tmp___9;"]
503 -> 504 [label="n = n + 1;"]
504 -> 492 [label=""]
497 -> 501 [label="tmp___8 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
501 -> 502 [label="tmp___9 = tmp___8;"]
502 -> 495 [label=""]
494 -> 505 [label="orig_crc = ((unsigned long)(((int)((unsigned short)(buf[0]))) | (((int)((unsigned short)(buf[1]))) << 8))) | (((unsigned long)(((int)((unsigned short)(*((buf + 2) + 0)))) | (((int)((unsigned short)(*((buf + 2) + 1)))) << 8))) << 16);"]
505 -> 506 [label="orig_len___0 = ((unsigned long)(((int)((unsigned short)(*((buf + 4) + 0)))) | (((int)((unsigned short)(*((buf + 4) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((buf + 4) + 2) + 0)))) | (((int)((unsigned short)(*(((buf + 4) + 2) + 1)))) << 8))) << 16);"]
506 -> 488 [label=""]
488 -> 525 [label="tmp___13 = updcrc((unsigned short)outbuf, 0U);"]
525 -> 526 [label="[!(orig_crc != tmp___13)]"]
525 -> 527 [label="[orig_crc != tmp___13]"]
527 -> 528 [label="error(\"invalid compressed data--crc error\");" style="dotted" arrowhead="empty"]
528 -> 526 [label=""]
526 -> 529 [label="[!(orig_len___0 != ((unsigned long)bytes_out))]"]
526 -> 530 [label="[orig_len___0 != ((unsigned long)bytes_out)]"]
530 -> 531 [label="error(\"invalid compressed data--length error\");" style="dotted" arrowhead="empty"]
531 -> 529 [label=""]
529 -> 532 [label="[!(pkzip != 0)]"]
529 -> 533 [label="[pkzip != 0]"]
533 -> 534 [label="[!((inptr + 4U) < insize)]"]
533 -> 535 [label="[(inptr + 4U) < insize]"]
535 -> 536 [label="[!((((unsigned long)(((int)((unsigned short)(*((inbuf + inptr) + 0)))) | (((int)((unsigned short)(*((inbuf + inptr) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((inbuf + inptr) + 2) + 0)))) | (((int)((unsigned short)(*(((inbuf + inptr) + 2) + 1)))) << 8))) << 16)) == 67324752UL)]"]
535 -> 537 [label="[(((unsigned long)(((int)((unsigned short)(*((inbuf + inptr) + 0)))) | (((int)((unsigned short)(*((inbuf + inptr) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((inbuf + inptr) + 2) + 0)))) | (((int)((unsigned short)(*(((inbuf + inptr) + 2) + 1)))) << 8))) << 16)) == 67324752UL]"]
537 -> 540 [label="[!(to_stdout != 0)]"]
537 -> 539 [label="[to_stdout != 0]"]
539 -> 541 [label="[!(!quiet)]"]
539 -> 542 [label="[!quiet]"]
542 -> 543 [label="tmp___14 = __getreent();"]
543 -> 544 [label="fprintf(tmp___14->_stderr, \"%s: %s has more than one entry--rest ignored\n\", progname, ifname);"]
544 -> 541 [label=""]
541 -> 545 [label="[!(exit_code == 0)]"]
541 -> 546 [label="[exit_code == 0]"]
546 -> 547 [label="exit_code = 2;"]
547 -> 545 [label=""]
545 -> 532 [label=""]
532 -> 554 [label="pkzip = 0;"]
554 -> 555 [label="ext_header = pkzip;"]
555 -> 371 [label="return 0;"]
540 -> 548 [label="tmp___15 = __getreent();"]
548 -> 549 [label="fprintf(tmp___15->_stderr, \"%s: %s has more than one entry -- unchanged\n\", progname, ifname);"]
549 -> 550 [label="exit_code = 1;"]
550 -> 551 [label="pkzip = 0;"]
551 -> 552 [label="ext_header = pkzip;"]
552 -> 371 [label="return 1;"]
536 -> 532 [label=""]
534 -> 532 [label=""]
490 -> 507 [label="[!(ext_header != 0)]"]
490 -> 508 [label="[ext_header != 0]"]
508 -> 509 [label="n = 0;"]
509 -> 510 [label="while"]
510 -> 512 [label="[!(n < 16)]"]
510 -> 511 [label="[n < 16]"]
511 -> 515 [label="[!(inptr < insize)]"]
511 -> 514 [label="[inptr < insize]"]
514 -> 516 [label="tmp___10 = inptr;"]
516 -> 517 [label="inptr = inptr + 1U;"]
517 -> 518 [label="tmp___12 = (int)(*(inbuf + tmp___10));"]
518 -> 513 [label=""]
513 -> 521 [label="buf[n] = (unsigned char)tmp___12;"]
521 -> 522 [label="n = n + 1;"]
522 -> 510 [label=""]
515 -> 519 [label="tmp___11 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
519 -> 520 [label="tmp___12 = tmp___11;"]
520 -> 513 [label=""]
512 -> 523 [label="orig_crc = ((unsigned long)(((int)((unsigned short)(*((buf + 4) + 0)))) | (((int)((unsigned short)(*((buf + 4) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((buf + 4) + 2) + 0)))) | (((int)((unsigned short)(*(((buf + 4) + 2) + 1)))) << 8))) << 16);"]
523 -> 524 [label="orig_len___0 = ((unsigned long)(((int)((unsigned short)(*((buf + 12) + 0)))) | (((int)((unsigned short)(*((buf + 12) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((buf + 12) + 2) + 0)))) | (((int)((unsigned short)(*(((buf + 12) + 2) + 1)))) << 8))) << 16);"]
524 -> 488 [label=""]
507 -> 488 [label=""]
440 -> 442 [label="[!(res != 0)]"]
440 -> 443 [label="[res != 0]"]
443 -> 444 [label="error(\"invalid compressed data--format violated\");" style="dotted" arrowhead="empty"]
444 -> 438 [label=""]
442 -> 438 [label=""]
484 -> 482 [label=""]
482 -> 462 [label=""]
462 -> 463 [label=""]
463 -> 465 [label="tmp___6 = n___0;"]
465 -> 466 [label="n___0 = n___0 - 1;"]
466 -> 467 [label="[!(!tmp___6)]"]
466 -> 468 [label="[!tmp___6]"]
468 -> 464 [label="break"]
464 -> 485 [label="flush_window();" style="dotted" arrowhead="empty"]
485 -> 448 [label=""]
448 -> 433 [label=""]
467 -> 472 [label="[!(inptr < insize)]"]
467 -> 471 [label="[inptr < insize]"]
471 -> 473 [label="tmp___2 = inptr;"]
473 -> 474 [label="inptr = inptr + 1U;"]
474 -> 475 [label="tmp___4 = (int)(*(inbuf + tmp___2));"]
475 -> 470 [label=""]
470 -> 478 [label="c = (unsigned char)tmp___4;"]
478 -> 479 [label="tmp___5 = outcnt;"]
479 -> 480 [label="outcnt = outcnt + 1U;"]
480 -> 481 [label="*(window + tmp___5) = c;"]
481 -> 482 [label="[!(outcnt == 32768U)]"]
481 -> 483 [label="[outcnt == 32768U]"]
483 -> 484 [label="flush_window();" style="dotted" arrowhead="empty"]
472 -> 476 [label="tmp___3 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
476 -> 477 [label="tmp___4 = tmp___3;"]
477 -> 470 [label=""]
372 -> 373 [label="Function start dummy edge"]
373 -> 375 [label="ulg orig_crc;"]
375 -> 377 [label="ulg orig_len___0;"]
377 -> 379 [label="int n;"]
379 -> 381 [label="uch buf[16];"]
381 -> 383 [label="int res;"]
383 -> 385 [label="int tmp;"]
385 -> 387 [label="ulg n___0;"]
387 -> 389 [label="struct _reent *tmp___0;"]
389 -> 391 [label="int tmp___1;"]
391 -> 393 [label="uch c;"]
393 -> 395 [label="unsigned int tmp___2;"]
395 -> 397 [label="int tmp___3;"]
397 -> 399 [label="int tmp___4;"]
399 -> 401 [label="unsigned int tmp___5;"]
401 -> 403 [label="ulg tmp___6;"]
403 -> 405 [label="unsigned int tmp___7;"]
405 -> 407 [label="int tmp___8;"]
407 -> 409 [label="int tmp___9;"]
409 -> 411 [label="unsigned int tmp___10;"]
411 -> 413 [label="int tmp___11;"]
413 -> 415 [label="int tmp___12;"]
415 -> 417 [label="ulg tmp___13;"]
417 -> 419 [label="struct _reent *tmp___14;"]
419 -> 421 [label="struct _reent *tmp___15;"]
421 -> 422 [label="orig_crc = (ulg )0;"]
422 -> 423 [label="orig_len___0 = (ulg )0;"]
423 -> 424 [label="ifd = in;"]
424 -> 425 [label="ofd = out;"]
425 -> 426 [label="updcrc((unsigned short)((void *)0), 0U);"]
426 -> 427 [label="[!(pkzip != 0)]"]
426 -> 428 [label="[pkzip != 0]"]
428 -> 429 [label="[!(!ext_header)]"]
428 -> 430 [label="[!ext_header]"]
430 -> 431 [label="orig_crc = ((unsigned long)(((int)((unsigned short)(*((inbuf + 14) + 0)))) | (((int)((unsigned short)(*((inbuf + 14) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((inbuf + 14) + 2) + 0)))) | (((int)((unsigned short)(*(((inbuf + 14) + 2) + 1)))) << 8))) << 16);"]
431 -> 432 [label="orig_len___0 = ((unsigned long)(((int)((unsigned short)(*((inbuf + 22) + 0)))) | (((int)((unsigned short)(*((inbuf + 22) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((inbuf + 22) + 2) + 0)))) | (((int)((unsigned short)(*(((inbuf + 22) + 2) + 1)))) << 8))) << 16);"]
432 -> 427 [label=""]
427 -> 435 [label="[!(method == 8)]"]
427 -> 434 [label="[method == 8]"]
434 -> 436 [label="tmp = inflate();" style="dotted" arrowhead="empty"]
435 -> 447 [label="[!(pkzip != 0)]"]
435 -> 446 [label="[pkzip != 0]"]
446 -> 450 [label="[!(method == 0)]"]
446 -> 449 [label="[method == 0]"]
449 -> 451 [label="n___0 = ((unsigned long)(((int)((unsigned short)(*((inbuf + 22) + 0)))) | (((int)((unsigned short)(*((inbuf + 22) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((inbuf + 22) + 2) + 0)))) | (((int)((unsigned short)(*(((inbuf + 22) + 2) + 1)))) << 8))) << 16);"]
451 -> 454 [label="[!(decrypt != 0)]"]
451 -> 453 [label="[decrypt != 0]"]
453 -> 455 [label="tmp___1 = 12;"]
455 -> 452 [label=""]
452 -> 457 [label="[!(n___0 != ((((unsigned long)(((int)((unsigned short)(*((inbuf + 18) + 0)))) | (((int)((unsigned short)(*((inbuf + 18) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((inbuf + 18) + 2) + 0)))) | (((int)((unsigned short)(*(((inbuf + 18) + 2) + 1)))) << 8))) << 16)) - ((unsigned long)tmp___1)))]"]
452 -> 458 [label="[n___0 != ((((unsigned long)(((int)((unsigned short)(*((inbuf + 18) + 0)))) | (((int)((unsigned short)(*((inbuf + 18) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((inbuf + 18) + 2) + 0)))) | (((int)((unsigned short)(*(((inbuf + 18) + 2) + 1)))) << 8))) << 16)) - ((unsigned long)tmp___1))]"]
458 -> 459 [label="tmp___0 = __getreent();"]
459 -> 460 [label="fprintf(tmp___0->_stderr, \"len %ld, siz %ld\n\", n___0, ((unsigned long)(((int)((unsigned short)(*((inbuf + 18) + 0)))) | (((int)((unsigned short)(*((inbuf + 18) + 1)))) << 8))) | (((unsigned long)(((int)((unsigned short)(*(((inbuf + 18) + 2) + 0)))) | (((int)((unsigned short)(*(((inbuf + 18) + 2) + 1)))) << 8))) << 16));"]
460 -> 461 [label="error(\"invalid compressed data--length mismatch\");" style="dotted" arrowhead="empty"]
461 -> 457 [label=""]
457 -> 462 [label="while"]
454 -> 456 [label="tmp___1 = 0;"]
456 -> 452 [label=""]
450 -> 486 [label="error(\"internal error, invalid method\");" style="dotted" arrowhead="empty"]
486 -> 448 [label=""]
447 -> 487 [label="error(\"internal error, invalid method\");" style="dotted" arrowhead="empty"]
487 -> 433 [label=""]
429 -> 427 [label=""]}
subgraph cluster_spec_putc {
label="spec_putc()"
}
subgraph cluster_inflate_codes {
label="inflate_codes()"
5632 -> 5633 [label="w = 0U;"]
5633 -> 5629 [label=""]
5629 -> 5634 [label="[!(!n)]"]
5629 -> 5635 [label="[!n]"]
5635 -> 5597 [label="break"]
5597 -> 5503 [label=""]
5503 -> 5454 [label=""]
5454 -> 5455 [label=""]
5455 -> 5457 [label="while"]
5457 -> 5459 [label="[!(k < ((unsigned int)bl))]"]
5457 -> 5458 [label="[k < ((unsigned int)bl)]"]
5458 -> 5462 [label="[!(inptr < insize)]"]
5458 -> 5461 [label="[inptr < insize]"]
5461 -> 5463 [label="tmp = inptr;"]
5463 -> 5464 [label="inptr = inptr + 1U;"]
5464 -> 5465 [label="tmp___1 = (int)(*(inbuf + tmp));"]
5465 -> 5460 [label=""]
5460 -> 5468 [label="b = b | (((unsigned long)((unsigned char)tmp___1)) << k);"]
5468 -> 5469 [label="k = k + 8U;"]
5469 -> 5457 [label=""]
5462 -> 5466 [label="tmp___0 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5466 -> 5467 [label="tmp___1 = tmp___0;"]
5467 -> 5460 [label=""]
5459 -> 5470 [label="t = tl + (((unsigned int)b) & ml);"]
5470 -> 5471 [label="e = (unsigned int)(t->e);"]
5471 -> 5472 [label="[!(e > 16U)]"]
5471 -> 5473 [label="[e > 16U]"]
5473 -> 5474 [label="while"]
5474 -> 5475 [label=""]
5475 -> 5477 [label="[!(e == 99U)]"]
5475 -> 5478 [label="[e == 99U]"]
5478 -> 5384 [label="return 1;"]
5385 -> 5386 [label="Function start dummy edge"]
5386 -> 5388 [label="unsigned int e;"]
5388 -> 5390 [label="unsigned int n;"]
5390 -> 5392 [label="unsigned int d;"]
5392 -> 5394 [label="unsigned int w;"]
5394 -> 5396 [label="struct huft *t;"]
5396 -> 5398 [label="unsigned int ml;"]
5398 -> 5400 [label="unsigned int md;"]
5400 -> 5402 [label="ulg b;"]
5402 -> 5404 [label="unsigned int k;"]
5404 -> 5406 [label="unsigned int tmp;"]
5406 -> 5408 [label="int tmp___0;"]
5408 -> 5410 [label="int tmp___1;"]
5410 -> 5412 [label="unsigned int tmp___2;"]
5412 -> 5414 [label="int tmp___3;"]
5414 -> 5416 [label="int tmp___4;"]
5416 -> 5418 [label="unsigned int tmp___5;"]
5418 -> 5420 [label="unsigned int tmp___6;"]
5420 -> 5422 [label="int tmp___7;"]
5422 -> 5424 [label="int tmp___8;"]
5424 -> 5426 [label="unsigned int tmp___9;"]
5426 -> 5428 [label="int tmp___10;"]
5428 -> 5430 [label="int tmp___11;"]
5430 -> 5432 [label="unsigned int tmp___12;"]
5432 -> 5434 [label="int tmp___13;"]
5434 -> 5436 [label="int tmp___14;"]
5436 -> 5438 [label="unsigned int tmp___15;"]
5438 -> 5440 [label="int tmp___16;"]
5440 -> 5442 [label="int tmp___17;"]
5442 -> 5444 [label="unsigned int tmp___19;"]
5444 -> 5446 [label="unsigned int tmp___20;"]
5446 -> 5448 [label="unsigned int tmp___21;"]
5448 -> 5449 [label="b = bb;"]
5449 -> 5450 [label="k = bk;"]
5450 -> 5451 [label="w = outcnt;"]
5451 -> 5452 [label="ml = (unsigned int)(mask_bits[bl]);"]
5452 -> 5453 [label="md = (unsigned int)(mask_bits[bd]);"]
5453 -> 5454 [label="while"]
5477 -> 5480 [label="b = b >> ((int)(t->b));"]
5480 -> 5481 [label="k = k - ((unsigned int)(t->b));"]
5481 -> 5482 [label="e = e - 16U;"]
5482 -> 5483 [label="while"]
5483 -> 5485 [label="[!(k < e)]"]
5483 -> 5484 [label="[k < e]"]
5484 -> 5488 [label="[!(inptr < insize)]"]
5484 -> 5487 [label="[inptr < insize]"]
5487 -> 5489 [label="tmp___2 = inptr;"]
5489 -> 5490 [label="inptr = inptr + 1U;"]
5490 -> 5491 [label="tmp___4 = (int)(*(inbuf + tmp___2));"]
5491 -> 5486 [label=""]
5486 -> 5494 [label="b = b | (((unsigned long)((unsigned char)tmp___4)) << k);"]
5494 -> 5495 [label="k = k + 8U;"]
5495 -> 5483 [label=""]
5488 -> 5492 [label="tmp___3 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5492 -> 5493 [label="tmp___4 = tmp___3;"]
5493 -> 5486 [label=""]
5485 -> 5496 [label="t = (t->v.t) + (((unsigned int)b) & ((unsigned int)(mask_bits[e])));"]
5496 -> 5497 [label="e = (unsigned int)(t->e);"]
5497 -> 5498 [label="[!(!(e > 16U))]"]
5497 -> 5499 [label="[!(e > 16U)]"]
5499 -> 5476 [label="break"]
5476 -> 5472 [label=""]
5472 -> 5501 [label="b = b >> ((int)(t->b));"]
5501 -> 5502 [label="k = k - ((unsigned int)(t->b));"]
5502 -> 5505 [label="[!(e == 16U)]"]
5502 -> 5504 [label="[e == 16U]"]
5504 -> 5506 [label="tmp___5 = w;"]
5506 -> 5507 [label="w = w + 1U;"]
5507 -> 5508 [label="*(window + tmp___5) = (unsigned char)(t->v.n);"]
5508 -> 5509 [label="[!(w == 32768U)]"]
5508 -> 5510 [label="[w == 32768U]"]
5510 -> 5511 [label="outcnt = w;"]
5511 -> 5512 [label="flush_window();" style="dotted" arrowhead="empty"]
5512 -> 5513 [label="w = 0U;"]
5513 -> 5509 [label=""]
5509 -> 5503 [label=""]
5505 -> 5514 [label="[!(e == 15U)]"]
5505 -> 5515 [label="[e == 15U]"]
5515 -> 5456 [label="break"]
5456 -> 5637 [label="outcnt = w;"]
5637 -> 5638 [label="bb = b;"]
5638 -> 5639 [label="bk = k;"]
5639 -> 5384 [label="return 0;"]
5514 -> 5517 [label="while"]
5517 -> 5519 [label="[!(k < e)]"]
5517 -> 5518 [label="[k < e]"]
5518 -> 5522 [label="[!(inptr < insize)]"]
5518 -> 5521 [label="[inptr < insize]"]
5521 -> 5523 [label="tmp___6 = inptr;"]
5523 -> 5524 [label="inptr = inptr + 1U;"]
5524 -> 5525 [label="tmp___8 = (int)(*(inbuf + tmp___6));"]
5525 -> 5520 [label=""]
5520 -> 5528 [label="b = b | (((unsigned long)((unsigned char)tmp___8)) << k);"]
5528 -> 5529 [label="k = k + 8U;"]
5529 -> 5517 [label=""]
5522 -> 5526 [label="tmp___7 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5526 -> 5527 [label="tmp___8 = tmp___7;"]
5527 -> 5520 [label=""]
5519 -> 5530 [label="n = ((unsigned int)(t->v.n)) + (((unsigned int)b) & ((unsigned int)(mask_bits[e])));"]
5530 -> 5531 [label="b = b >> e;"]
5531 -> 5532 [label="k = k - e;"]
5532 -> 5533 [label="while"]
5533 -> 5535 [label="[!(k < ((unsigned int)bd))]"]
5533 -> 5534 [label="[k < ((unsigned int)bd)]"]
5534 -> 5538 [label="[!(inptr < insize)]"]
5534 -> 5537 [label="[inptr < insize]"]
5537 -> 5539 [label="tmp___9 = inptr;"]
5539 -> 5540 [label="inptr = inptr + 1U;"]
5540 -> 5541 [label="tmp___11 = (int)(*(inbuf + tmp___9));"]
5541 -> 5536 [label=""]
5536 -> 5544 [label="b = b | (((unsigned long)((unsigned char)tmp___11)) << k);"]
5544 -> 5545 [label="k = k + 8U;"]
5545 -> 5533 [label=""]
5538 -> 5542 [label="tmp___10 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5542 -> 5543 [label="tmp___11 = tmp___10;"]
5543 -> 5536 [label=""]
5535 -> 5546 [label="t = td + (((unsigned int)b) & md);"]
5546 -> 5547 [label="e = (unsigned int)(t->e);"]
5547 -> 5548 [label="[!(e > 16U)]"]
5547 -> 5549 [label="[e > 16U]"]
5549 -> 5550 [label="while"]
5550 -> 5551 [label=""]
5551 -> 5553 [label="[!(e == 99U)]"]
5551 -> 5554 [label="[e == 99U]"]
5554 -> 5384 [label="return 1;"]
5553 -> 5556 [label="b = b >> ((int)(t->b));"]
5556 -> 5557 [label="k = k - ((unsigned int)(t->b));"]
5557 -> 5558 [label="e = e - 16U;"]
5558 -> 5559 [label="while"]
5559 -> 5561 [label="[!(k < e)]"]
5559 -> 5560 [label="[k < e]"]
5560 -> 5564 [label="[!(inptr < insize)]"]
5560 -> 5563 [label="[inptr < insize]"]
5563 -> 5565 [label="tmp___12 = inptr;"]
5565 -> 5566 [label="inptr = inptr + 1U;"]
5566 -> 5567 [label="tmp___14 = (int)(*(inbuf + tmp___12));"]
5567 -> 5562 [label=""]
5562 -> 5570 [label="b = b | (((unsigned long)((unsigned char)tmp___14)) << k);"]
5570 -> 5571 [label="k = k + 8U;"]
5571 -> 5559 [label=""]
5564 -> 5568 [label="tmp___13 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5568 -> 5569 [label="tmp___14 = tmp___13;"]
5569 -> 5562 [label=""]
5561 -> 5572 [label="t = (t->v.t) + (((unsigned int)b) & ((unsigned int)(mask_bits[e])));"]
5572 -> 5573 [label="e = (unsigned int)(t->e);"]
5573 -> 5574 [label="[!(!(e > 16U))]"]
5573 -> 5575 [label="[!(e > 16U)]"]
5575 -> 5552 [label="break"]
5552 -> 5548 [label=""]
5548 -> 5577 [label="b = b >> ((int)(t->b));"]
5577 -> 5578 [label="k = k - ((unsigned int)(t->b));"]
5578 -> 5579 [label="while"]
5579 -> 5581 [label="[!(k < e)]"]
5579 -> 5580 [label="[k < e]"]
5580 -> 5584 [label="[!(inptr < insize)]"]
5580 -> 5583 [label="[inptr < insize]"]
5583 -> 5585 [label="tmp___15 = inptr;"]
5585 -> 5586 [label="inptr = inptr + 1U;"]
5586 -> 5587 [label="tmp___17 = (int)(*(inbuf + tmp___15));"]
5587 -> 5582 [label=""]
5582 -> 5590 [label="b = b | (((unsigned long)((unsigned char)tmp___17)) << k);"]
5590 -> 5591 [label="k = k + 8U;"]
5591 -> 5579 [label=""]
5584 -> 5588 [label="tmp___16 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5588 -> 5589 [label="tmp___17 = tmp___16;"]
5589 -> 5582 [label=""]
5581 -> 5592 [label="d = (w - ((unsigned int)(t->v.n))) - (((unsigned int)b) & ((unsigned int)(mask_bits[e])));"]
5592 -> 5593 [label="b = b >> e;"]
5593 -> 5594 [label="k = k - e;"]
5594 -> 5595 [label="while"]
5595 -> 5596 [label=""]
5596 -> 5598 [label="d = d & 32767U;"]
5598 -> 5601 [label="[!(d > w)]"]
5598 -> 5600 [label="[d > w]"]
5600 -> 5602 [label="tmp___19 = d;"]
5602 -> 5599 [label=""]
5599 -> 5604 [label="e = 32768U - tmp___19;"]
5604 -> 5607 [label="[!(e > n)]"]
5604 -> 5606 [label="[e > n]"]
5606 -> 5608 [label="e = n;"]
5608 -> 5605 [label=""]
5605 -> 5610 [label="n = n - e;"]
5610 -> 5613 [label="[!((w - d) >= e)]"]
5610 -> 5612 [label="[(w - d) >= e]"]
5612 -> 5614 [label="memcpy((void *)(window + w), (const void *)(window + d), e);"]
5614 -> 5615 [label="w = w + e;"]
5615 -> 5616 [label="d = d + e;"]
5616 -> 5611 [label=""]
5611 -> 5629 [label="[!(w == 32768U)]"]
5611 -> 5630 [label="[w == 32768U]"]
5630 -> 5631 [label="outcnt = w;"]
5631 -> 5632 [label="flush_window();" style="dotted" arrowhead="empty"]
5613 -> 5617 [label="while"]
5617 -> 5618 [label=""]
5618 -> 5620 [label="tmp___20 = w;"]
5620 -> 5621 [label="w = w + 1U;"]
5621 -> 5622 [label="tmp___21 = d;"]
5622 -> 5623 [label="d = d + 1U;"]
5623 -> 5624 [label="*(window + tmp___20) = *(window + tmp___21);"]
5624 -> 5625 [label="e = e - 1U;"]
5625 -> 5626 [label="[!(!e)]"]
5625 -> 5627 [label="[!e]"]
5627 -> 5619 [label="break"]
5619 -> 5611 [label=""]
5626 -> 5617 [label=""]
5607 -> 5609 [label="e = e;"]
5609 -> 5605 [label=""]
5601 -> 5603 [label="tmp___19 = w;"]
5603 -> 5599 [label=""]
5574 -> 5550 [label=""]
5498 -> 5474 [label=""]
5634 -> 5595 [label=""]}
subgraph cluster_decode_c {
label="decode_c()"
1842 -> 1834 [label=""]
1834 -> 1843 [label="blocksize = blocksize - 1U;"]
1843 -> 1844 [label="j__1 = (unsigned int)(*(d_buf + (bitbuf >> ((16U * (sizeof(char))) - 12U))));"]
1844 -> 1845 [label="[!(j__1 >= 510U)]"]
1844 -> 1846 [label="[j__1 >= 510U]"]
1846 -> 1847 [label="mask = 1U << (((16U * (sizeof(char))) - 1U) - 12U);"]
1847 -> 1848 [label="while"]
1848 -> 1849 [label=""]
1849 -> 1853 [label="[!((bitbuf & ((unsigned long)mask)) != 0UL)]"]
1849 -> 1852 [label="[(bitbuf & ((unsigned long)mask)) != 0UL]"]
1852 -> 1854 [label="j__1 = (unsigned int)(*((prev + 32768) + j__1));"]
1854 -> 1851 [label=""]
1851 -> 1856 [label="mask = mask >> 1;"]
1856 -> 1857 [label="[!(!(j__1 >= 510U))]"]
1856 -> 1858 [label="[!(j__1 >= 510U)]"]
1858 -> 1850 [label="break"]
1850 -> 1845 [label=""]
1845 -> 1860 [label="fillbuf((int)(*(outbuf + j__1)));" style="dotted" arrowhead="empty"]
1828 -> 1829 [label="Function start dummy edge"]
1829 -> 1831 [label="unsigned int j__1;"]
1831 -> 1833 [label="unsigned int mask;"]
1833 -> 1834 [label="[!(blocksize == 0U)]"]
1833 -> 1835 [label="[blocksize == 0U]"]
1835 -> 1836 [label="blocksize = getbits(16);" style="dotted" arrowhead="empty"]
1841 -> 1842 [label="read_pt_len(14, 4, -1);" style="dotted" arrowhead="empty"]
1836 -> 1837 [label="[!(blocksize == 0U)]"]
1836 -> 1838 [label="[blocksize == 0U]"]
1838 -> 1827 [label="return 510U;"]
1837 -> 1840 [label="read_pt_len(19, 5, 3);" style="dotted" arrowhead="empty"]
1840 -> 1841 [label="read_c_len();" style="dotted" arrowhead="empty"]
1860 -> 1827 [label="return j__1;"]
1857 -> 1848 [label=""]
1853 -> 1855 [label="j__1 = (unsigned int)(*(prev + j__1));"]
1855 -> 1851 [label=""]}
subgraph cluster_flush_block {
label="flush_block()"
7354 -> 7355 [label="compress_block(dyn_ltree, dyn_dtree);" style="dotted" arrowhead="empty"]
7355 -> 7356 [label="compressed_len = compressed_len + (3UL + opt_len);"]
7356 -> 7322 [label=""]
7322 -> 7357 [label="init_block();" style="dotted" arrowhead="empty"]
7301 -> 7302 [label="Function start dummy edge"]
7302 -> 7304 [label="ulg opt_lenb;"]
7304 -> 7306 [label="ulg static_lenb;"]
7306 -> 7308 [label="int max_blindex;"]
7308 -> 7309 [label="flag_buf[last_flags] = flags;"]
7309 -> 7310 [label="[!(((int)(*file_type)) == 65535)]"]
7309 -> 7311 [label="[((int)(*file_type)) == 65535]"]
7311 -> 7312 [label="set_file_type();" style="dotted" arrowhead="empty"]
7312 -> 7310 [label=""]
7310 -> 7313 [label="build_tree(&l_desc);" style="dotted" arrowhead="empty"]
7315 -> 7316 [label="opt_lenb = ((opt_len + 3UL) + 7UL) >> 3;"]
7316 -> 7317 [label="static_lenb = ((static_len + 3UL) + 7UL) >> 3;"]
7317 -> 7318 [label="input_len = input_len + stored_len;"]
7318 -> 7319 [label="[!(static_lenb <= opt_lenb)]"]
7318 -> 7320 [label="[static_lenb <= opt_lenb]"]
7320 -> 7321 [label="opt_lenb = static_lenb;"]
7321 -> 7319 [label=""]
7319 -> 7324 [label="[!(stored_len <= opt_lenb)]"]
7319 -> 7323 [label="[stored_len <= opt_lenb]"]
7323 -> 7327 [label="[!(eof != 0)]"]
7323 -> 7326 [label="[eof != 0]"]
7326 -> 7330 [label="[!(compressed_len == 0UL)]"]
7326 -> 7329 [label="[compressed_len == 0UL]"]
7329 -> 7334 [label="Goto: _L___2"]
7334 -> 7337 [label="[!((stored_len + 4UL) <= opt_lenb)]"]
7334 -> 7336 [label="[(stored_len + 4UL) <= opt_lenb]"]
7336 -> 7340 [label="[!(((unsigned int)buf) != ((unsigned int)((char *)0)))]"]
7336 -> 7339 [label="[((unsigned int)buf) != ((unsigned int)((char *)0))]"]
7339 -> 7341 [label="send_bits(eof, 3);" style="dotted" arrowhead="empty"]
7341 -> 7342 [label="compressed_len = ((compressed_len + 3UL) + 7UL) & 4294967288UL;"]
7342 -> 7343 [label="compressed_len = compressed_len + ((stored_len + 4UL) << 3);"]
7343 -> 7344 [label="copy_block(buf, (unsigned int)stored_len, 1);" style="dotted" arrowhead="empty"]
7344 -> 7338 [label=""]
7338 -> 7322 [label=""]
7360 -> 7361 [label="compressed_len = compressed_len + 7UL;"]
7361 -> 7358 [label=""]
7358 -> 7300 [label="return compressed_len >> 3;"]
7340 -> 7346 [label="Goto: _L"]
7346 -> 7349 [label="[!(static_lenb == opt_lenb)]"]
7346 -> 7348 [label="[static_lenb == opt_lenb]"]
7348 -> 7350 [label="send_bits((1 << 1) + eof, 3);" style="dotted" arrowhead="empty"]
7350 -> 7351 [label="compress_block(static_ltree, static_dtree);" style="dotted" arrowhead="empty"]
7351 -> 7352 [label="compressed_len = compressed_len + (3UL + static_len);"]
7352 -> 7322 [label=""]
7349 -> 7353 [label="send_bits((2 << 1) + eof, 3);" style="dotted" arrowhead="empty"]
7353 -> 7354 [label="send_all_trees((l_desc.max_code) + 1, (d_desc.max_code) + 1, max_blindex + 1);" style="dotted" arrowhead="empty"]
7337 -> 7346 [label="Label: _L"]
7330 -> 7334 [label="Goto: _L___2"]
7327 -> 7334 [label="Goto: _L___2"]
7324 -> 7334 [label="Label: _L___2"]
7314 -> 7315 [label="max_blindex = build_bl_tree();" style="dotted" arrowhead="empty"]
7313 -> 7314 [label="build_tree(&d_desc);" style="dotted" arrowhead="empty"]
7357 -> 7358 [label="[!(eof != 0)]"]
7357 -> 7359 [label="[eof != 0]"]
7359 -> 7360 [label="bi_windup();" style="dotted" arrowhead="empty"]}
subgraph cluster_clear_bufs {
label="clear_bufs()"
606 -> 607 [label="Function start dummy edge"]
607 -> 608 [label="outcnt = 0U;"]
608 -> 609 [label="inptr = 0U;"]
609 -> 610 [label="insize = inptr;"]
610 -> 611 [label="bytes_out = 0L;"]
611 -> 612 [label="bytes_in = bytes_out;"]
612 -> 605 [label="return;"]}
subgraph cluster_decode_p {
label="decode_p()"
1890 -> 1891 [label="j__1 = (1U << (j__1 - 1U)) + tmp;"]
1891 -> 1888 [label=""]
1888 -> 1862 [label="return j__1;"]
1863 -> 1864 [label="Function start dummy edge"]
1864 -> 1866 [label="unsigned int j__1;"]
1866 -> 1868 [label="unsigned int mask;"]
1868 -> 1870 [label="unsigned int tmp;"]
1870 -> 1871 [label="j__1 = (unsigned int)(pt_table[bitbuf >> ((16U * (sizeof(char))) - 8U)]);"]
1871 -> 1872 [label="[!(j__1 >= 14U)]"]
1871 -> 1873 [label="[j__1 >= 14U]"]
1873 -> 1874 [label="mask = 1U << (((16U * (sizeof(char))) - 1U) - 8U);"]
1874 -> 1875 [label="while"]
1875 -> 1876 [label=""]
1876 -> 1880 [label="[!((bitbuf & ((unsigned long)mask)) != 0UL)]"]
1876 -> 1879 [label="[(bitbuf & ((unsigned long)mask)) != 0UL]"]
1879 -> 1881 [label="j__1 = (unsigned int)(*((prev + 32768) + j__1));"]
1881 -> 1878 [label=""]
1878 -> 1883 [label="mask = mask >> 1;"]
1883 -> 1884 [label="[!(!(j__1 >= 14U))]"]
1883 -> 1885 [label="[!(j__1 >= 14U)]"]
1885 -> 1877 [label="break"]
1877 -> 1872 [label=""]
1872 -> 1887 [label="fillbuf((int)(pt_len[j__1]));" style="dotted" arrowhead="empty"]
1887 -> 1888 [label="[!(j__1 != 0U)]"]
1887 -> 1889 [label="[j__1 != 0U]"]
1889 -> 1890 [label="tmp = getbits((int)(j__1 - 1U));" style="dotted" arrowhead="empty"]
1884 -> 1875 [label=""]
1880 -> 1882 [label="j__1 = (unsigned int)(*(prev + j__1));"]
1882 -> 1878 [label=""]}
subgraph cluster_copy {
label="copy()"
602 -> 598 [label=""]
598 -> 603 [label="bytes_in = bytes_out;"]
603 -> 578 [label="return 0;"]
594 -> 595 [label="bytes_out = (long)(((unsigned long)bytes_out) + ((unsigned long)insize));"]
595 -> 596 [label="tmp = spec_read(in, (unsigned char *)((char *)inbuf), 32768);" style="dotted" arrowhead="empty"]
596 -> 597 [label="insize = (unsigned int)tmp;"]
597 -> 584 [label=""]
584 -> 585 [label=""]
585 -> 589 [label="[!(insize != 0U)]"]
585 -> 588 [label="[insize != 0U]"]
588 -> 590 [label="[!(!(((int)insize) != (-1)))]"]
588 -> 591 [label="[!(((int)insize) != (-1))]"]
591 -> 586 [label="break"]
586 -> 598 [label="[!(((int)insize) == (-1))]"]
586 -> 599 [label="[((int)insize) == (-1)]"]
599 -> 600 [label="[!(errno != 0)]"]
599 -> 601 [label="[errno != 0]"]
601 -> 602 [label="read_error();" style="dotted" arrowhead="empty"]
600 -> 598 [label=""]
590 -> 587 [label=""]
587 -> 594 [label="write_buf(out, (void *)((char *)inbuf), insize);" style="dotted" arrowhead="empty"]
589 -> 586 [label="break"]}
subgraph cluster_copy_block {
label="copy_block()"
2141 -> 2142 [label="Function start dummy edge"]
2142 -> 2144 [label="unsigned int tmp;"]
2144 -> 2146 [label="unsigned int tmp___0;"]
2146 -> 2148 [label="unsigned int tmp___1;"]
2148 -> 2150 [label="unsigned int tmp___2;"]
2150 -> 2152 [label="unsigned int tmp___3;"]
2152 -> 2154 [label="unsigned int tmp___4;"]
2154 -> 2156 [label="unsigned int tmp___5;"]
2156 -> 2158 [label="unsigned int tmp___6;"]
2158 -> 2160 [label="unsigned int tmp___7;"]
2160 -> 2162 [label="char *tmp___8;"]
2162 -> 2164 [label="unsigned int tmp___9;"]
2164 -> 2165 [label="bi_windup();" style="dotted" arrowhead="empty"]
2165 -> 2166 [label="[!(header != 0)]"]
2165 -> 2167 [label="[header != 0]"]
2167 -> 2170 [label="[!(outcnt < 16382U)]"]
2167 -> 2169 [label="[outcnt < 16382U]"]
2169 -> 2171 [label="tmp = outcnt;"]
2171 -> 2172 [label="outcnt = outcnt + 1U;"]
2172 -> 2173 [label="*(outbuf + tmp) = (unsigned char)(((int)((unsigned short)len)) & 255);"]
2173 -> 2174 [label="tmp___0 = outcnt;"]
2174 -> 2175 [label="outcnt = outcnt + 1U;"]
2175 -> 2176 [label="*(outbuf + tmp___0) = (unsigned char)(((int)((unsigned short)len)) >> 8);"]
2176 -> 2168 [label=""]
2168 -> 2191 [label="[!(outcnt < 16382U)]"]
2168 -> 2190 [label="[outcnt < 16382U]"]
2190 -> 2192 [label="tmp___3 = outcnt;"]
2192 -> 2193 [label="outcnt = outcnt + 1U;"]
2193 -> 2194 [label="*(outbuf + tmp___3) = (unsigned char)(((int)((unsigned short)(~len))) & 255);"]
2194 -> 2195 [label="tmp___4 = outcnt;"]
2195 -> 2196 [label="outcnt = outcnt + 1U;"]
2196 -> 2197 [label="*(outbuf + tmp___4) = (unsigned char)(((int)((unsigned short)(~len))) >> 8);"]
2197 -> 2166 [label=""]
2166 -> 2210 [label="while"]
2210 -> 2211 [label=""]
2211 -> 2213 [label="tmp___9 = len;"]
2213 -> 2214 [label="len = len - 1U;"]
2214 -> 2215 [label="[!(!tmp___9)]"]
2214 -> 2216 [label="[!tmp___9]"]
2216 -> 2212 [label="break"]
2212 -> 2140 [label="return;"]
2215 -> 2218 [label="tmp___7 = outcnt;"]
2218 -> 2219 [label="outcnt = outcnt + 1U;"]
2219 -> 2220 [label="tmp___8 = buf;"]
2220 -> 2221 [label="buf = buf + 1;"]
2221 -> 2222 [label="*(outbuf + tmp___7) = (unsigned char)(*tmp___8);"]
2222 -> 2223 [label="[!(outcnt == 16384U)]"]
2222 -> 2224 [label="[outcnt == 16384U]"]
2224 -> 2225 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
2225 -> 2223 [label=""]
2223 -> 2210 [label=""]
2191 -> 2198 [label="tmp___5 = outcnt;"]
2198 -> 2199 [label="outcnt = outcnt + 1U;"]
2199 -> 2200 [label="*(outbuf + tmp___5) = (unsigned char)(((int)((unsigned short)(~len))) & 255);"]
2200 -> 2201 [label="[!(outcnt == 16384U)]"]
2200 -> 2202 [label="[outcnt == 16384U]"]
2202 -> 2203 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
2203 -> 2201 [label=""]
2201 -> 2204 [label="tmp___6 = outcnt;"]
2204 -> 2205 [label="outcnt = outcnt + 1U;"]
2205 -> 2206 [label="*(outbuf + tmp___6) = (unsigned char)(((int)((unsigned short)(~len))) >> 8);"]
2206 -> 2207 [label="[!(outcnt == 16384U)]"]
2206 -> 2208 [label="[outcnt == 16384U]"]
2208 -> 2209 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
2209 -> 2166 [label=""]
2207 -> 2166 [label=""]
2170 -> 2177 [label="tmp___1 = outcnt;"]
2177 -> 2178 [label="outcnt = outcnt + 1U;"]
2178 -> 2179 [label="*(outbuf + tmp___1) = (unsigned char)(((int)((unsigned short)len)) & 255);"]
2179 -> 2180 [label="[!(outcnt == 16384U)]"]
2179 -> 2181 [label="[outcnt == 16384U]"]
2181 -> 2182 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
2182 -> 2180 [label=""]
2180 -> 2183 [label="tmp___2 = outcnt;"]
2183 -> 2184 [label="outcnt = outcnt + 1U;"]
2184 -> 2185 [label="*(outbuf + tmp___2) = (unsigned char)(((int)((unsigned short)len)) >> 8);"]
2185 -> 2186 [label="[!(outcnt == 16384U)]"]
2185 -> 2187 [label="[outcnt == 16384U]"]
2187 -> 2188 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
2188 -> 2168 [label=""]
2186 -> 2168 [label=""]}
subgraph cluster_huft_free {
label="huft_free()"
5369 -> 5370 [label="Function start dummy edge"]
5370 -> 5372 [label="struct huft *p;"]
5372 -> 5374 [label="struct huft *q;"]
5374 -> 5375 [label="p = t;"]
5375 -> 5376 [label="while"]
5376 -> 5378 [label="[!(((unsigned int)p) != ((unsigned int)((struct huft *)((void *)0))))]"]
5376 -> 5377 [label="[((unsigned int)p) != ((unsigned int)((struct huft *)((void *)0)))]"]
5377 -> 5379 [label="p = p - 1;"]
5379 -> 5380 [label="q = p->v.t;"]
5380 -> 5381 [label="free((void *)((char *)p));"]
5381 -> 5382 [label="p = q;"]
5382 -> 5376 [label=""]
5378 -> 5368 [label="return 0;"]}
subgraph cluster_copy_stat {
label="copy_stat()"
5028 -> 5029 [label="Function start dummy edge"]
5029 -> 5031 [label="struct _reent *tmp___0;"]
5031 -> 5033 [label="int tmp___1;"]
5033 -> 5034 [label="remove_ofname = 0;"]
5034 -> 5035 [label="tmp___1 = unlink(ifname);"]
5035 -> 5036 [label="[!(tmp___1 != 0)]"]
5035 -> 5037 [label="[tmp___1 != 0]"]
5037 -> 5038 [label="[!(!quiet)]"]
5037 -> 5039 [label="[!quiet]"]
5039 -> 5040 [label="tmp___0 = __getreent();"]
5040 -> 5041 [label="fprintf(tmp___0->_stderr, \"%s: \", progname);"]
5041 -> 5038 [label=""]
5038 -> 5042 [label="[!(exit_code == 0)]"]
5038 -> 5043 [label="[exit_code == 0]"]
5043 -> 5044 [label="exit_code = 2;"]
5044 -> 5042 [label=""]
5042 -> 5045 [label="[!(!quiet)]"]
5042 -> 5046 [label="[!quiet]"]
5046 -> 5047 [label="perror((const char *)ifname);"]
5047 -> 5036 [label=""]
5036 -> 5027 [label="return;"]
5045 -> 5036 [label=""]}
subgraph cluster_send_tree {
label="send_tree()"
7150 -> 7151 [label="Function start dummy edge"]
7151 -> 7153 [label="int n;"]
7153 -> 7155 [label="int prevlen;"]
7155 -> 7157 [label="int curlen;"]
7157 -> 7159 [label="int nextlen;"]
7159 -> 7161 [label="int count;"]
7161 -> 7163 [label="int max_count;"]
7163 -> 7165 [label="int min_count;"]
7165 -> 7167 [label="struct _reent *tmp;"]
7167 -> 7169 [label="struct _reent *tmp___0;"]
7169 -> 7171 [label="struct _reent *tmp___1;"]
7171 -> 7173 [label="struct _reent *tmp___2;"]
7173 -> 7175 [label="struct _reent *tmp___3;"]
7175 -> 7176 [label="prevlen = -1;"]
7176 -> 7177 [label="nextlen = (int)((tree + 0)->dl.len);"]
7177 -> 7178 [label="count = 0;"]
7178 -> 7179 [label="max_count = 7;"]
7179 -> 7180 [label="min_count = 4;"]
7180 -> 7181 [label="[!(nextlen == 0)]"]
7180 -> 7182 [label="[nextlen == 0]"]
7182 -> 7183 [label="max_count = 138;"]
7183 -> 7184 [label="min_count = 3;"]
7184 -> 7181 [label=""]
7181 -> 7185 [label="n = 0;"]
7185 -> 7186 [label="while"]
7186 -> 7188 [label="[!(n <= max_code)]"]
7186 -> 7187 [label="[n <= max_code]"]
7187 -> 7189 [label="curlen = nextlen;"]
7189 -> 7190 [label="nextlen = (int)((tree + (n + 1))->dl.len);"]
7190 -> 7191 [label="count = count + 1;"]
7191 -> 7194 [label="[!(count < max_count)]"]
7191 -> 7193 [label="[count < max_count]"]
7193 -> 7197 [label="[!(curlen == nextlen)]"]
7193 -> 7196 [label="[curlen == nextlen]"]
7196 -> 7262 [label="Goto: __Cont"]
7262 -> 7263 [label="n = n + 1;"]
7263 -> 7186 [label=""]
7197 -> 7200 [label="Goto: _L"]
7200 -> 7203 [label="[!(count < min_count)]"]
7200 -> 7202 [label="[count < min_count]"]
7202 -> 7204 [label="while"]
7204 -> 7205 [label=""]
7205 -> 7207 [label="[!(verbose > 1)]"]
7205 -> 7208 [label="[verbose > 1]"]
7208 -> 7209 [label="tmp = __getreent();"]
7209 -> 7210 [label="fprintf(tmp->_stderr, \"\ncd %3d \", curlen);"]
7210 -> 7207 [label=""]
7207 -> 7211 [label="send_bits((int)((bl_tree[curlen]).fc.code), (int)((bl_tree[curlen]).dl.len));" style="dotted" arrowhead="empty"]
7211 -> 7212 [label="count = count - 1;"]
7212 -> 7213 [label="[!(!(count != 0))]"]
7212 -> 7214 [label="[!(count != 0)]"]
7214 -> 7206 [label="break"]
7206 -> 7192 [label=""]
7192 -> 7248 [label="count = 0;"]
7248 -> 7249 [label="prevlen = curlen;"]
7249 -> 7252 [label="[!(nextlen == 0)]"]
7249 -> 7251 [label="[nextlen == 0]"]
7251 -> 7253 [label="max_count = 138;"]
7253 -> 7254 [label="min_count = 3;"]
7254 -> 7250 [label=""]
7250 -> 7262 [label="Label: __Cont"]
7252 -> 7257 [label="[!(curlen == nextlen)]"]
7252 -> 7256 [label="[curlen == nextlen]"]
7256 -> 7258 [label="max_count = 6;"]
7258 -> 7259 [label="min_count = 3;"]
7259 -> 7250 [label=""]
7257 -> 7260 [label="max_count = 7;"]
7260 -> 7261 [label="min_count = 4;"]
7261 -> 7250 [label=""]
7213 -> 7204 [label=""]
7203 -> 7218 [label="[!(curlen != 0)]"]
7203 -> 7217 [label="[curlen != 0]"]
7217 -> 7219 [label="[!(curlen != prevlen)]"]
7217 -> 7220 [label="[curlen != prevlen]"]
7220 -> 7221 [label="[!(verbose > 1)]"]
7220 -> 7222 [label="[verbose > 1]"]
7222 -> 7223 [label="tmp___0 = __getreent();"]
7223 -> 7224 [label="fprintf(tmp___0->_stderr, \"\ncd %3d \", curlen);"]
7224 -> 7221 [label=""]
7221 -> 7225 [label="send_bits((int)((bl_tree[curlen]).fc.code), (int)((bl_tree[curlen]).dl.len));" style="dotted" arrowhead="empty"]
7225 -> 7226 [label="count = count - 1;"]
7226 -> 7219 [label=""]
7219 -> 7227 [label="[!(verbose > 1)]"]
7219 -> 7228 [label="[verbose > 1]"]
7228 -> 7229 [label="tmp___1 = __getreent();"]
7229 -> 7230 [label="fprintf(tmp___1->_stderr, \"\ncd %3d \", 16);"]
7230 -> 7227 [label=""]
7227 -> 7231 [label="send_bits((int)((bl_tree[16]).fc.code), (int)((bl_tree[16]).dl.len));" style="dotted" arrowhead="empty"]
7231 -> 7232 [label="send_bits(count - 3, 2);" style="dotted" arrowhead="empty"]
7232 -> 7192 [label=""]
7218 -> 7235 [label="[!(count <= 10)]"]
7218 -> 7234 [label="[count <= 10]"]
7234 -> 7236 [label="[!(verbose > 1)]"]
7234 -> 7237 [label="[verbose > 1]"]
7237 -> 7238 [label="tmp___2 = __getreent();"]
7238 -> 7239 [label="fprintf(tmp___2->_stderr, \"\ncd %3d \", 17);"]
7239 -> 7236 [label=""]
7236 -> 7240 [label="send_bits((int)((bl_tree[17]).fc.code), (int)((bl_tree[17]).dl.len));" style="dotted" arrowhead="empty"]
7240 -> 7241 [label="send_bits(count - 3, 3);" style="dotted" arrowhead="empty"]
7241 -> 7192 [label=""]
7235 -> 7242 [label="[!(verbose > 1)]"]
7235 -> 7243 [label="[verbose > 1]"]
7243 -> 7244 [label="tmp___3 = __getreent();"]
7244 -> 7245 [label="fprintf(tmp___3->_stderr, \"\ncd %3d \", 18);"]
7245 -> 7242 [label=""]
7242 -> 7246 [label="send_bits((int)((bl_tree[18]).fc.code), (int)((bl_tree[18]).dl.len));" style="dotted" arrowhead="empty"]
7246 -> 7247 [label="send_bits(count - 11, 7);" style="dotted" arrowhead="empty"]
7247 -> 7192 [label=""]
7194 -> 7200 [label="Label: _L"]
7188 -> 7149 [label="return;"]}
subgraph cluster_getopt_long {
label="getopt_long()"
3173 -> 3174 [label="Function start dummy edge"]
3174 -> 3176 [label="int tmp;"]
3176 -> 3177 [label="tmp = _getopt_internal(argc, argv, options, long_options, opt_index, 0);" style="dotted" arrowhead="empty"]
3177 -> 3172 [label="return tmp;"]}
subgraph cluster_spec_init {
label="spec_init()"
}
subgraph cluster_gen_codes {
label="gen_codes()"
6925 -> 6926 [label="Function start dummy edge"]
6926 -> 6928 [label="ush next_code[16];"]
6928 -> 6930 [label="ush code;"]
6930 -> 6932 [label="int bits;"]
6932 -> 6934 [label="int n;"]
6934 -> 6936 [label="int len;"]
6936 -> 6938 [label="ush tmp;"]
6938 -> 6940 [label="unsigned int tmp___0;"]
6940 -> 6941 [label="code = (ush )0;"]
6941 -> 6942 [label="bits = 1;"]
6942 -> 6943 [label="while"]
6943 -> 6945 [label="[!(bits <= 15)]"]
6943 -> 6944 [label="[bits <= 15]"]
6944 -> 6946 [label="code = (unsigned short)((((int)code) + ((int)(bl_count[bits - 1]))) << 1);"]
6946 -> 6947 [label="next_code[bits] = code;"]
6947 -> 6948 [label="bits = bits + 1;"]
6948 -> 6943 [label=""]
6945 -> 6949 [label="n = 0;"]
6949 -> 6950 [label="while"]
6950 -> 6952 [label="[!(n <= max_code)]"]
6950 -> 6951 [label="[n <= max_code]"]
6951 -> 6953 [label="len = (int)((tree + n)->dl.len);"]
6953 -> 6954 [label="[!(len == 0)]"]
6953 -> 6955 [label="[len == 0]"]
6955 -> 6961 [label="Goto: __Cont"]
6961 -> 6962 [label="n = n + 1;"]
6962 -> 6950 [label=""]
6954 -> 6957 [label="tmp = next_code[len];"]
6957 -> 6958 [label="next_code[len] = (ush )(((int)(next_code[len])) + 1);"]
6958 -> 6959 [label="tmp___0 = bi_reverse((unsigned int)tmp, len);" style="dotted" arrowhead="empty"]
6959 -> 6960 [label="(tree + n)->fc.code = (unsigned short)tmp___0;"]
6960 -> 6961 [label="Label: __Cont"]
6952 -> 6924 [label="return;"]}
subgraph cluster_debug_time {
label="debug_time()"
}
subgraph cluster_shorten_name {
label="shorten_name()"
4815 -> 4816 [label="Function start dummy edge"]
4816 -> 4818 [label="int len;"]
4818 -> 4820 [label="char *trunc___0;"]
4820 -> 4822 [label="int plen;"]
4822 -> 4824 [label="int min_part;"]
4824 -> 4826 [label="char *p;"]
4826 -> 4828 [label="size_t tmp;"]
4828 -> 4830 [label="int tmp___0;"]
4830 -> 4832 [label="size_t tmp___1;"]
4832 -> 4834 [label="char *tmp___2;"]
4834 -> 4835 [label="trunc___0 = (char *)((void *)0);"]
4835 -> 4836 [label="min_part = 3;"]
4836 -> 4837 [label="tmp = strlen((const char *)name);"]
4837 -> 4838 [label="len = (int)tmp;"]
4838 -> 4839 [label="[!(decompress != 0)]"]
4838 -> 4840 [label="[decompress != 0]"]
4840 -> 4841 [label="[!(len <= 1)]"]
4840 -> 4842 [label="[len <= 1]"]
4842 -> 4843 [label="error((char *)\"name too short\");" style="dotted" arrowhead="empty"]
4843 -> 4841 [label=""]
4841 -> 4844 [label="*(name + (len - 1)) = (char)'\x0';"]
4844 -> 4814 [label="return;"]
4839 -> 4846 [label="p = get_suffix(name);" style="dotted" arrowhead="empty"]
4846 -> 4847 [label="[!(((unsigned int)p) == ((unsigned int)((void *)0)))]"]
4846 -> 4848 [label="[((unsigned int)p) == ((unsigned int)((void *)0))]"]
4848 -> 4849 [label="error((char *)\"can\'t recover suffix\n\");" style="dotted" arrowhead="empty"]
4849 -> 4847 [label=""]
4847 -> 4850 [label="*p = (char)'\x0';"]
4850 -> 4851 [label="save_orig_name = 1;"]
4851 -> 4852 [label="[!(len > 4)]"]
4851 -> 4853 [label="[len > 4]"]
4853 -> 4854 [label="tmp___0 = strcmp((const char *)(p - 4), \".tar\");"]
4854 -> 4855 [label="[!(tmp___0 == 0)]"]
4854 -> 4856 [label="[tmp___0 == 0]"]
4856 -> 4857 [label="strcpy(p - 4, \".tgz\");"]
4857 -> 4814 [label="return;"]
4855 -> 4852 [label=""]
4852 -> 4859 [label="while"]
4859 -> 4860 [label=""]
4860 -> 4862 [label="p = strrchr((const char *)name, ':');"]
4862 -> 4865 [label="[!(p != 0)]"]
4862 -> 4864 [label="[p != 0]"]
4864 -> 4866 [label="p = p + 1;"]
4866 -> 4863 [label=""]
4863 -> 4868 [label="while"]
4868 -> 4870 [label="[!((*p) != 0)]"]
4868 -> 4869 [label="[(*p) != 0]"]
4869 -> 4871 [label="tmp___1 = strcspn((const char *)p, \".\");"]
4871 -> 4872 [label="plen = (int)tmp___1;"]
4872 -> 4873 [label="p = p + plen;"]
4873 -> 4874 [label="[!(plen > min_part)]"]
4873 -> 4875 [label="[plen > min_part]"]
4875 -> 4876 [label="trunc___0 = p - 1;"]
4876 -> 4874 [label=""]
4874 -> 4877 [label="[!((*p) != 0)]"]
4874 -> 4878 [label="[(*p) != 0]"]
4878 -> 4879 [label="p = p + 1;"]
4879 -> 4877 [label=""]
4877 -> 4868 [label=""]
4870 -> 4882 [label="[!(((unsigned int)trunc___0) == ((unsigned int)((void *)0)))]"]
4870 -> 4881 [label="[((unsigned int)trunc___0) == ((unsigned int)((void *)0))]"]
4881 -> 4883 [label="min_part = min_part - 1;"]
4883 -> 4884 [label="[!(!(min_part != 0))]"]
4883 -> 4885 [label="[!(min_part != 0)]"]
4885 -> 4861 [label="break"]
4861 -> 4890 [label="[!(((unsigned int)trunc___0) != ((unsigned int)((void *)0)))]"]
4861 -> 4889 [label="[((unsigned int)trunc___0) != ((unsigned int)((void *)0))]"]
4889 -> 4891 [label="while"]
4891 -> 4892 [label=""]
4892 -> 4894 [label="*(trunc___0 + 0) = *(trunc___0 + 1);"]
4894 -> 4895 [label="tmp___2 = trunc___0;"]
4895 -> 4896 [label="trunc___0 = trunc___0 + 1;"]
4896 -> 4897 [label="[!(!(*tmp___2))]"]
4896 -> 4898 [label="[!(*tmp___2)]"]
4898 -> 4893 [label="break"]
4893 -> 4900 [label="trunc___0 = trunc___0 - 1;"]
4900 -> 4888 [label=""]
4888 -> 4908 [label="strcpy(trunc___0, (const char *)z_suffix);"]
4908 -> 4814 [label="return;"]
4897 -> 4891 [label=""]
4890 -> 4901 [label="trunc___0 = strrchr((const char *)name, (int)(*(\".\" + 0)));"]
4901 -> 4902 [label="[!(((unsigned int)trunc___0) == ((unsigned int)((void *)0)))]"]
4901 -> 4903 [label="[((unsigned int)trunc___0) == ((unsigned int)((void *)0))]"]
4903 -> 4904 [label="error((char *)\"internal error in shorten_name\");" style="dotted" arrowhead="empty"]
4904 -> 4902 [label=""]
4902 -> 4905 [label="[!(((int)(*(trunc___0 + 1))) == 0)]"]
4902 -> 4906 [label="[((int)(*(trunc___0 + 1))) == 0]"]
4906 -> 4907 [label="trunc___0 = trunc___0 - 1;"]
4907 -> 4888 [label=""]
4905 -> 4888 [label=""]
4884 -> 4880 [label=""]
4880 -> 4859 [label=""]
4882 -> 4861 [label="break"]
4865 -> 4867 [label="p = name;"]
4867 -> 4863 [label=""]}
subgraph cluster_same_file {
label="same_file()"
4762 -> 4763 [label="Function start dummy edge"]
4763 -> 4765 [label="int tmp;"]
4765 -> 4768 [label="[!((stat1->st_ino) == (stat2->st_ino))]"]
4765 -> 4767 [label="[(stat1->st_ino) == (stat2->st_ino)]"]
4767 -> 4771 [label="[!((stat1->st_dev) == (stat2->st_dev))]"]
4767 -> 4770 [label="[(stat1->st_dev) == (stat2->st_dev)]"]
4770 -> 4772 [label="tmp = 1;"]
4772 -> 4769 [label=""]
4769 -> 4766 [label=""]
4766 -> 4761 [label="return tmp;"]
4771 -> 4773 [label="tmp = 0;"]
4773 -> 4769 [label=""]
4768 -> 4774 [label="tmp = 0;"]
4774 -> 4766 [label=""]}
subgraph cluster_help {
label="help()"
265 -> 266 [label="Function start dummy edge"]
266 -> 268 [label="char **p;"]
268 -> 270 [label="char **tmp;"]
270 -> 272 [label="struct _reent *tmp___0;"]
272 -> 273 [label="p = help_msg;"]
273 -> 274 [label="usage();" style="dotted" arrowhead="empty"]
274 -> 275 [label="while"]
275 -> 277 [label="[!((*p) != 0)]"]
275 -> 276 [label="[(*p) != 0]"]
276 -> 278 [label="tmp = p;"]
278 -> 279 [label="p = p + 1;"]
279 -> 280 [label="tmp___0 = __getreent();"]
280 -> 281 [label="fprintf(tmp___0->_stderr, \"%s\n\", *tmp);"]
281 -> 275 [label=""]
277 -> 264 [label="return;"]}
subgraph cluster_init_getbits {
label="init_getbits()"
1513 -> 1507 [label="return;"]}
subgraph cluster_init_block {
label="init_block()"
6749 -> 6750 [label="Function start dummy edge"]
6750 -> 6752 [label="int n;"]
6752 -> 6753 [label="n = 0;"]
6753 -> 6754 [label="while"]
6754 -> 6756 [label="[!(n < 286)]"]
6754 -> 6755 [label="[n < 286]"]
6755 -> 6757 [label="(dyn_ltree[n]).fc.freq = (unsigned short)0;"]
6757 -> 6758 [label="n = n + 1;"]
6758 -> 6754 [label=""]
6756 -> 6759 [label="n = 0;"]
6759 -> 6760 [label="while"]
6760 -> 6762 [label="[!(n < 30)]"]
6760 -> 6761 [label="[n < 30]"]
6761 -> 6763 [label="(dyn_dtree[n]).fc.freq = (unsigned short)0;"]
6763 -> 6764 [label="n = n + 1;"]
6764 -> 6760 [label=""]
6762 -> 6765 [label="n = 0;"]
6765 -> 6766 [label="while"]
6766 -> 6768 [label="[!(n < 19)]"]
6766 -> 6767 [label="[n < 19]"]
6767 -> 6769 [label="(bl_tree[n]).fc.freq = (unsigned short)0;"]
6769 -> 6770 [label="n = n + 1;"]
6770 -> 6766 [label=""]
6768 -> 6771 [label="(dyn_ltree[256]).fc.freq = (unsigned short)1;"]
6771 -> 6772 [label="static_len = 0UL;"]
6772 -> 6773 [label="opt_len = static_len;"]
6773 -> 6774 [label="last_flags = 0U;"]
6774 -> 6775 [label="last_dist = last_flags;"]
6775 -> 6776 [label="last_lit = last_dist;"]
6776 -> 6777 [label="flags = (unsigned char)0;"]
6777 -> 6778 [label="flag_bit = (unsigned char)1;"]
6778 -> 6748 [label="return;"]}
subgraph cluster_ct_init {
label="ct_init()"
6746 -> 6621 [label="return;"]
6743 -> 6744 [label="(static_dtree[n]).fc.code = (unsigned short)tmp___6;"]
6744 -> 6745 [label="n = n + 1;"]
6745 -> 6739 [label=""]
6739 -> 6741 [label="[!(n < 30)]"]
6739 -> 6740 [label="[n < 30]"]
6740 -> 6742 [label="(static_dtree[n]).dl.len = (unsigned short)5;"]
6742 -> 6743 [label="tmp___6 = bi_reverse((unsigned int)n, 5);" style="dotted" arrowhead="empty"]
6741 -> 6746 [label="init_block();" style="dotted" arrowhead="empty"]
6737 -> 6738 [label="n = 0;"]
6738 -> 6739 [label="while"]
6622 -> 6623 [label="Function start dummy edge"]
6623 -> 6625 [label="int n;"]
6625 -> 6627 [label="int bits;"]
6627 -> 6629 [label="int length;"]
6629 -> 6631 [label="int code;"]
6631 -> 6633 [label="int dist;"]
6633 -> 6635 [label="int tmp;"]
6635 -> 6637 [label="int tmp___0;"]
6637 -> 6639 [label="int tmp___1;"]
6639 -> 6641 [label="int tmp___2;"]
6641 -> 6643 [label="int tmp___3;"]
6643 -> 6645 [label="int tmp___4;"]
6645 -> 6647 [label="int tmp___5;"]
6647 -> 6649 [label="unsigned int tmp___6;"]
6649 -> 6650 [label="file_type = attr;"]
6650 -> 6651 [label="file_method = methodp;"]
6651 -> 6652 [label="input_len = 0UL;"]
6652 -> 6653 [label="compressed_len = input_len;"]
6653 -> 6654 [label="[!(((int)((static_dtree[0]).dl.len)) != 0)]"]
6653 -> 6655 [label="[((int)((static_dtree[0]).dl.len)) != 0]"]
6655 -> 6621 [label="return;"]
6654 -> 6657 [label="length = 0;"]
6657 -> 6658 [label="code = 0;"]
6658 -> 6659 [label="while"]
6659 -> 6661 [label="[!(code < 28)]"]
6659 -> 6660 [label="[code < 28]"]
6660 -> 6662 [label="base_length[code] = length;"]
6662 -> 6663 [label="n = 0;"]
6663 -> 6664 [label="while"]
6664 -> 6666 [label="[!(n < (1 << (extra_lbits[code])))]"]
6664 -> 6665 [label="[n < (1 << (extra_lbits[code]))]"]
6665 -> 6667 [label="tmp = length;"]
6667 -> 6668 [label="length = length + 1;"]
6668 -> 6669 [label="length_code[tmp] = (unsigned char)code;"]
6669 -> 6670 [label="n = n + 1;"]
6670 -> 6664 [label=""]
6666 -> 6671 [label="code = code + 1;"]
6671 -> 6659 [label=""]
6661 -> 6672 [label="length_code[length - 1] = (unsigned char)code;"]
6672 -> 6673 [label="dist = 0;"]
6673 -> 6674 [label="code = 0;"]
6674 -> 6675 [label="while"]
6675 -> 6677 [label="[!(code < 16)]"]
6675 -> 6676 [label="[code < 16]"]
6676 -> 6678 [label="base_dist[code] = dist;"]
6678 -> 6679 [label="n = 0;"]
6679 -> 6680 [label="while"]
6680 -> 6682 [label="[!(n < (1 << (extra_dbits[code])))]"]
6680 -> 6681 [label="[n < (1 << (extra_dbits[code]))]"]
6681 -> 6683 [label="tmp___0 = dist;"]
6683 -> 6684 [label="dist = dist + 1;"]
6684 -> 6685 [label="dist_code[tmp___0] = (unsigned char)code;"]
6685 -> 6686 [label="n = n + 1;"]
6686 -> 6680 [label=""]
6682 -> 6687 [label="code = code + 1;"]
6687 -> 6675 [label=""]
6677 -> 6688 [label="dist = dist >> 7;"]
6688 -> 6689 [label="while"]
6689 -> 6691 [label="[!(code < 30)]"]
6689 -> 6690 [label="[code < 30]"]
6690 -> 6692 [label="base_dist[code] = dist << 7;"]
6692 -> 6693 [label="n = 0;"]
6693 -> 6694 [label="while"]
6694 -> 6696 [label="[!(n < (1 << ((extra_dbits[code]) - 7)))]"]
6694 -> 6695 [label="[n < (1 << ((extra_dbits[code]) - 7))]"]
6695 -> 6697 [label="tmp___1 = dist;"]
6697 -> 6698 [label="dist = dist + 1;"]
6698 -> 6699 [label="dist_code[256 + tmp___1] = (unsigned char)code;"]
6699 -> 6700 [label="n = n + 1;"]
6700 -> 6694 [label=""]
6696 -> 6701 [label="code = code + 1;"]
6701 -> 6689 [label=""]
6691 -> 6702 [label="bits = 0;"]
6702 -> 6703 [label="while"]
6703 -> 6705 [label="[!(bits <= 15)]"]
6703 -> 6704 [label="[bits <= 15]"]
6704 -> 6706 [label="bl_count[bits] = (unsigned short)0;"]
6706 -> 6707 [label="bits = bits + 1;"]
6707 -> 6703 [label=""]
6705 -> 6708 [label="n = 0;"]
6708 -> 6709 [label="while"]
6709 -> 6711 [label="[!(n <= 143)]"]
6709 -> 6710 [label="[n <= 143]"]
6710 -> 6712 [label="tmp___2 = n;"]
6712 -> 6713 [label="n = n + 1;"]
6713 -> 6714 [label="(static_ltree[tmp___2]).dl.len = (unsigned short)8;"]
6714 -> 6715 [label="bl_count[8] = (ush )(((int)(bl_count[8])) + 1);"]
6715 -> 6709 [label=""]
6711 -> 6716 [label="while"]
6716 -> 6718 [label="[!(n <= 255)]"]
6716 -> 6717 [label="[n <= 255]"]
6717 -> 6719 [label="tmp___3 = n;"]
6719 -> 6720 [label="n = n + 1;"]
6720 -> 6721 [label="(static_ltree[tmp___3]).dl.len = (unsigned short)9;"]
6721 -> 6722 [label="bl_count[9] = (ush )(((int)(bl_count[9])) + 1);"]
6722 -> 6716 [label=""]
6718 -> 6723 [label="while"]
6723 -> 6725 [label="[!(n <= 279)]"]
6723 -> 6724 [label="[n <= 279]"]
6724 -> 6726 [label="tmp___4 = n;"]
6726 -> 6727 [label="n = n + 1;"]
6727 -> 6728 [label="(static_ltree[tmp___4]).dl.len = (unsigned short)7;"]
6728 -> 6729 [label="bl_count[7] = (ush )(((int)(bl_count[7])) + 1);"]
6729 -> 6723 [label=""]
6725 -> 6730 [label="while"]
6730 -> 6732 [label="[!(n <= 287)]"]
6730 -> 6731 [label="[n <= 287]"]
6731 -> 6733 [label="tmp___5 = n;"]
6733 -> 6734 [label="n = n + 1;"]
6734 -> 6735 [label="(static_ltree[tmp___5]).dl.len = (unsigned short)8;"]
6735 -> 6736 [label="bl_count[8] = (ush )(((int)(bl_count[8])) + 1);"]
6736 -> 6730 [label=""]
6732 -> 6737 [label="gen_codes(static_ltree, 287);" style="dotted" arrowhead="empty"]}
subgraph cluster_write_error {
label="write_error()"
1169 -> 1170 [label="Function start dummy edge"]
1170 -> 1172 [label="struct _reent *tmp;"]
1172 -> 1173 [label="tmp = __getreent();"]
1173 -> 1174 [label="fprintf(tmp->_stderr, \"\n%s: \", progname);"]
1174 -> 1175 [label="perror((const char *)ofname);"]
1175 -> 1176 [label="abort_gzip();" style="dotted" arrowhead="empty"]
1176 -> 1168 [label="return;"]}
subgraph cluster_updcrc1 {
label="updcrc1()"
1980 -> 1981 [label="Function start dummy edge"]
1981 -> 1983 [label="ulg c;"]
1983 -> 1985 [label="uch *tmp;"]
1985 -> 1988 [label="[!(((unsigned int)s) == ((unsigned int)((void *)0)))]"]
1985 -> 1987 [label="[((unsigned int)s) == ((unsigned int)((void *)0))]"]
1987 -> 1989 [label="c = 4294967295UL;"]
1989 -> 1986 [label=""]
1986 -> 2003 [label="crc___0 = c;"]
2003 -> 1979 [label="return c ^ 4294967295UL;"]
1988 -> 1990 [label="c = crc___0;"]
1990 -> 1991 [label="[!(n != 0U)]"]
1990 -> 1992 [label="[n != 0U]"]
1992 -> 1993 [label="while"]
1993 -> 1994 [label=""]
1994 -> 1996 [label="tmp = s;"]
1996 -> 1997 [label="s = s + 1;"]
1997 -> 1998 [label="c = (crc_32_tab[(((int)c) ^ ((int)(*tmp))) & 255]) ^ (c >> 8);"]
1998 -> 1999 [label="n = n - 1U;"]
1999 -> 2000 [label="[!(!n)]"]
1999 -> 2001 [label="[!n]"]
2001 -> 1995 [label="break"]
1995 -> 1986 [label=""]
2000 -> 1993 [label=""]
1991 -> 1986 [label=""]}
subgraph cluster_send_all_trees {
label="send_all_trees()"
7295 -> 7296 [label="rank = rank + 1;"]
7296 -> 7292 [label=""]
7292 -> 7294 [label="[!(rank < blcodes)]"]
7292 -> 7293 [label="[rank < blcodes]"]
7293 -> 7295 [label="send_bits((int)((bl_tree[bl_order[rank]]).dl.len), 3);" style="dotted" arrowhead="empty"]
7294 -> 7297 [label="send_tree(dyn_ltree, lcodes - 1);" style="dotted" arrowhead="empty"]
7298 -> 7283 [label="return;"]
7284 -> 7285 [label="Function start dummy edge"]
7285 -> 7287 [label="int rank;"]
7287 -> 7288 [label="send_bits(lcodes - 257, 5);" style="dotted" arrowhead="empty"]
7288 -> 7289 [label="send_bits(dcodes - 1, 5);" style="dotted" arrowhead="empty"]
7289 -> 7290 [label="send_bits(blcodes - 4, 4);" style="dotted" arrowhead="empty"]
7290 -> 7291 [label="rank = 0;"]
7291 -> 7292 [label="while"]
7297 -> 7298 [label="send_tree(dyn_dtree, dcodes - 1);" style="dotted" arrowhead="empty"]}
subgraph cluster_treat_stdin {
label="treat_stdin()"
3500 -> 3501 [label="Function start dummy edge"]
3501 -> 3503 [label="struct _reent *tmp;"]
3503 -> 3505 [label="int tmp___0;"]
3505 -> 3507 [label="struct _reent *tmp___1;"]
3507 -> 3509 [label="int tmp___2;"]
3509 -> 3511 [label="int tmp___3;"]
3511 -> 3513 [label="struct _reent *tmp___4;"]
3513 -> 3515 [label="struct _reent *tmp___5;"]
3515 -> 3517 [label="struct _reent *tmp___6;"]
3517 -> 3518 [label="[!(!decompress)]"]
3517 -> 3519 [label="[!decompress]"]
3519 -> 3520 [label="[!(!ascii)]"]
3519 -> 3521 [label="[!ascii]"]
3521 -> 3518 [label=""]
3518 -> 3522 [label="[!(!test)]"]
3518 -> 3523 [label="[!test]"]
3523 -> 3524 [label="[!(!list)]"]
3523 -> 3525 [label="[!list]"]
3525 -> 3526 [label="[!(!(!decompress))]"]
3525 -> 3527 [label="[!(!decompress)]"]
3527 -> 3528 [label="[!(!ascii)]"]
3527 -> 3529 [label="[!ascii]"]
3529 -> 3522 [label=""]
3522 -> 3530 [label="strcpy(ifname, \"stdin\");"]
3530 -> 3531 [label="strcpy(ofname, \"stdout\");"]
3531 -> 3532 [label="time_stamp = 0L;"]
3532 -> 3533 [label="ifile_size = -1L;"]
3533 -> 3534 [label="clear_bufs();" style="dotted" arrowhead="empty"]
3545 -> 3499 [label="return;"]
3569 -> 3570 [label="[!(method < 0)]"]
3569 -> 3571 [label="[method < 0]"]
3571 -> 3499 [label="return;"]
3570 -> 3573 [label="bytes_out = 0L;"]
3573 -> 3547 [label=""]
3547 -> 3548 [label=""]
3548 -> 3550 [label="tmp = __getreent();"]
3550 -> 3551 [label="tmp___0 = fileno(tmp->_stdout);"]
3551 -> 3552 [label="tmp___1 = __getreent();"]
3552 -> 3553 [label="tmp___2 = fileno(tmp___1->_stdin);"]
3553 -> 3554 [label="tmp___3 = (*work)(tmp___2, tmp___0);"]
3554 -> 3555 [label="[!(tmp___3 != 0)]"]
3554 -> 3556 [label="[tmp___3 != 0]"]
3556 -> 3499 [label="return;"]
3555 -> 3560 [label="[!(!decompress)]"]
3555 -> 3559 [label="[!decompress]"]
3559 -> 3549 [label="break"]
3549 -> 3574 [label="[!(verbose != 0)]"]
3549 -> 3575 [label="[verbose != 0]"]
3575 -> 3578 [label="[!(test != 0)]"]
3575 -> 3577 [label="[test != 0]"]
3577 -> 3579 [label="tmp___4 = __getreent();"]
3579 -> 3580 [label="fprintf(tmp___4->_stderr, \" OK\n\");"]
3580 -> 3574 [label=""]
3574 -> 3499 [label="return;"]
3578 -> 3581 [label="[!(!decompress)]"]
3578 -> 3582 [label="[!decompress]"]
3582 -> 3583 [label="tmp___5 = __getreent();"]
3583 -> 3584 [label="display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, tmp___5->_stderr);" style="dotted" arrowhead="empty"]
3584 -> 3585 [label="tmp___6 = __getreent();"]
3585 -> 3586 [label="fprintf(tmp___6->_stderr, \"\n\");"]
3586 -> 3574 [label=""]
3581 -> 3574 [label=""]
3560 -> 3564 [label="[!(last_member != 0)]"]
3560 -> 3563 [label="[last_member != 0]"]
3563 -> 3549 [label="break"]
3564 -> 3566 [label="[!(inptr == insize)]"]
3564 -> 3567 [label="[inptr == insize]"]
3567 -> 3549 [label="break"]
3566 -> 3558 [label=""]
3558 -> 3569 [label="method = get_method(ifd);" style="dotted" arrowhead="empty"]
3539 -> 3540 [label="[!(method < 0)]"]
3539 -> 3541 [label="[method < 0]"]
3541 -> 3542 [label="do_exit(exit_code);" style="dotted" arrowhead="empty"]
3542 -> 3537 [label=""]
3537 -> 3543 [label="[!(list != 0)]"]
3537 -> 3544 [label="[list != 0]"]
3544 -> 3545 [label="do_list(ifd, method);" style="dotted" arrowhead="empty"]
3543 -> 3547 [label="while"]
3540 -> 3537 [label=""]
3534 -> 3535 [label="to_stdout = 1;"]
3535 -> 3536 [label="part_nb = 0;"]
3536 -> 3537 [label="[!(decompress != 0)]"]
3536 -> 3538 [label="[decompress != 0]"]
3538 -> 3539 [label="method = get_method(ifd);" style="dotted" arrowhead="empty"]
3528 -> 3522 [label=""]
3526 -> 3522 [label=""]
3524 -> 3522 [label=""]
3520 -> 3518 [label=""]}
subgraph cluster_lm_init {
label="lm_init()"
2228 -> 2229 [label="Function start dummy edge"]
2229 -> 2231 [label="unsigned int j___0;"]
2231 -> 2233 [label="unsigned int tmp;"]
2233 -> 2235 [label="int tmp___0;"]
2235 -> 2238 [label="[!(pack_level < 1)]"]
2235 -> 2237 [label="[pack_level < 1]"]
2237 -> 2239 [label="printf(\"bad pack level\");"]
2239 -> 2236 [label=""]
2236 -> 2243 [label="compr_level = pack_level;"]
2243 -> 2244 [label="memset((void *)((char *)(prev + 32768)), 0, ((unsigned int)(1 << 15)) * (sizeof(*(prev + 32768))));"]
2244 -> 2245 [label="max_lazy_match = (unsigned int)((configuration_table[pack_level]).max_lazy);"]
2245 -> 2246 [label="good_match = (unsigned int)((configuration_table[pack_level]).good_length);"]
2246 -> 2247 [label="nice_match = (int)((configuration_table[pack_level]).nice_length);"]
2247 -> 2248 [label="max_chain_length = (unsigned int)((configuration_table[pack_level]).max_chain);"]
2248 -> 2251 [label="[!(pack_level == 1)]"]
2248 -> 2250 [label="[pack_level == 1]"]
2250 -> 2252 [label="*flags = (unsigned short)(((int)(*flags)) | 4);"]
2252 -> 2249 [label=""]
2249 -> 2256 [label="strstart = 0U;"]
2256 -> 2257 [label="block_start = 0L;"]
2257 -> 2260 [label="[!((sizeof(int)) <= 2U)]"]
2257 -> 2259 [label="[(sizeof(int)) <= 2U]"]
2259 -> 2261 [label="tmp = 32768U;"]
2261 -> 2258 [label=""]
2258 -> 2263 [label="tmp___0 = (*read_buf)((char *)window, tmp);"]
2263 -> 2264 [label="lookahead = (unsigned int)tmp___0;"]
2264 -> 2267 [label="[!(lookahead == 0U)]"]
2264 -> 2266 [label="[lookahead == 0U]"]
2266 -> 2268 [label="eofile = 1;"]
2268 -> 2269 [label="lookahead = 0U;"]
2269 -> 2227 [label="return;"]
2287 -> 2277 [label=""]
2277 -> 2278 [label=""]
2278 -> 2282 [label="[!(lookahead < 262U)]"]
2278 -> 2281 [label="[lookahead < 262U]"]
2281 -> 2283 [label="[!(!(!eofile))]"]
2281 -> 2284 [label="[!(!eofile)]"]
2284 -> 2279 [label="break"]
2279 -> 2288 [label="ins_h = 0U;"]
2288 -> 2289 [label="j___0 = 0U;"]
2289 -> 2290 [label="while"]
2290 -> 2292 [label="[!(j___0 < 2U)]"]
2290 -> 2291 [label="[j___0 < 2U]"]
2291 -> 2293 [label="ins_h = ((ins_h << 5) ^ ((unsigned int)(*(window + j___0)))) & (((unsigned int)(1 << 15)) - 1U);"]
2293 -> 2294 [label="j___0 = j___0 + 1U;"]
2294 -> 2290 [label=""]
2292 -> 2227 [label="return;"]
2283 -> 2280 [label=""]
2280 -> 2287 [label="fill_window();" style="dotted" arrowhead="empty"]
2282 -> 2279 [label="break"]
2267 -> 2271 [label="[!(lookahead == 4294967295U)]"]
2267 -> 2272 [label="[lookahead == 4294967295U]"]
2272 -> 2273 [label="eofile = 1;"]
2273 -> 2274 [label="lookahead = 0U;"]
2274 -> 2227 [label="return;"]
2271 -> 2265 [label=""]
2265 -> 2276 [label="eofile = 0;"]
2276 -> 2277 [label="while"]
2260 -> 2262 [label="tmp = 65536U;"]
2262 -> 2258 [label=""]
2251 -> 2253 [label="[!(pack_level == 9)]"]
2251 -> 2254 [label="[pack_level == 9]"]
2254 -> 2255 [label="*flags = (unsigned short)(((int)(*flags)) | 2);"]
2255 -> 2249 [label=""]
2253 -> 2249 [label=""]
2238 -> 2240 [label="[!(pack_level > 9)]"]
2238 -> 2241 [label="[pack_level > 9]"]
2241 -> 2242 [label="printf(\"bad pack level\");"]
2242 -> 2236 [label=""]
2240 -> 2236 [label=""]}
subgraph cluster_spec_compress {
label="spec_compress()"
6601 -> 6602 [label="ifd = in;"]
6602 -> 6603 [label="ofd = out;"]
6603 -> 6604 [label="zip(ifd, ofd);" style="dotted" arrowhead="empty"]
6604 -> 6596 [label="return;"]}
subgraph cluster_abort_gzip {
label="abort_gzip()"
5086 -> 5087 [label="Function start dummy edge"]
5087 -> 5088 [label="[!(remove_ofname != 0)]"]
5087 -> 5089 [label="[remove_ofname != 0]"]
5089 -> 5090 [label="close(ofd);"]
5090 -> 5091 [label="unlink(ofname);"]
5091 -> 5088 [label=""]
5088 -> 5092 [label="do_exit(1);" style="dotted" arrowhead="empty"]
5092 -> 5085 [label="return;"]}
subgraph cluster_main {
label="main()"
3180 -> 7578 [label="INIT GLOBAL VARS"]
7578 -> 7579 [label="typedef unsigned int size_t;"]
7579 -> 7580 [label="typedef void *_LOCK_T;"]
7580 -> 7581 [label="typedef long long _off64_t;"]
7581 -> 7582 [label="typedef int _ssize_t;"]
7582 -> 7583 [label="typedef unsigned int wint_t;"]
7583 -> 7584 [label="union __anonunion___value_2 {   wint_t __wch;   unsigned char __wchb[4]; } ;"]
7584 -> 7585 [label="struct __anonstruct__mbstate_t_1 {   int __count;   union __anonunion___value_2 __value; } ;"]
7585 -> 7586 [label="typedef struct __anonstruct__mbstate_t_1 _mbstate_t;"]
7586 -> 7587 [label="typedef _LOCK_T _flock_t;"]
7587 -> 7588 [label="typedef unsigned long __ULong;"]
7588 -> 7589 [label="struct _Bigint {   struct _Bigint *_next;   int _k;   int _maxwds;   int _sign;   int _wds;   __ULong _x[1]; } ;"]
7589 -> 7590 [label="struct __tm {   int __tm_sec;   int __tm_min;   int __tm_hour;   int __tm_mday;   int __tm_mon;   int __tm_year;   int __tm_wday;   int __tm_yday;   int __tm_isdst; } ;"]
7590 -> 7591 [label="struct _on_exit_args {   void *_fnargs[32];   void *_dso_handle[32];   __ULong _fntypes;   __ULong _is_cxa; } ;"]
7591 -> 7592 [label="struct _atexit {   struct _atexit *_next;   int _ind;   void (*_fns[32])();   struct _on_exit_args _on_exit_args; } ;"]
7592 -> 7593 [label="struct __sbuf {   unsigned char *_base;   int _size; } ;"]
7593 -> 7594 [label="typedef long _fpos_t;"]
7594 -> 7595 [label="typedef _off64_t _fpos64_t;"]
7595 -> 7596 [label="struct _reent ;"]
7596 -> 7597 [label="struct __sFILE64 {   unsigned char *_p;   int _r;   int _w;   short _flags;   short _file;   struct __sbuf _bf;   int _lbfsize;   struct _reent *_data;   void *_cookie;   _ssize_t  (*_read)(void *_cookie, char *_buf, int _n);   _ssize_t  (*_write)(void *_cookie, const char *_buf, int _n);   _fpos_t  (*_seek)(void *_cookie, _fpos_t _offset, int _whence);   int (*_close)(void *_cookie);   struct __sbuf _ub;   unsigned char *_up;   int _ur;   unsigned char _ubuf[3];   unsigned char _nbuf[1];   struct __sbuf _lb;   int _blksize;   int _flags2;   _off64_t _offset;   _fpos64_t  (*_seek64)(void *_cookie, _fpos64_t _offset, int _whence);   _flock_t _lock; } ;"]
7597 -> 7598 [label="typedef struct __sFILE64 __FILE;"]
7598 -> 7599 [label="struct _glue {   struct _glue *_next;   int _niobs;   __FILE *_iobs; } ;"]
7599 -> 7600 [label="struct _rand48 {   unsigned short _seed[3];   unsigned short _mult[3];   unsigned short _add; } ;"]
7600 -> 7601 [label="struct __anonstruct__reent_4 {   unsigned int _unused_rand;   char *_strtok_last;   char _asctime_buf[26];   struct __tm _localtime_buf;   int _gamma_signgam;   unsigned long long _rand_next;   struct _rand48 _r48;   _mbstate_t _mblen_state;   _mbstate_t _mbtowc_state;   _mbstate_t _wctomb_state;   char _l64a_buf[8];   char _signal_buf[24];   int _getdate_err;   _mbstate_t _mbrlen_state;   _mbstate_t _mbrtowc_state;   _mbstate_t _mbsrtowcs_state;   _mbstate_t _wcrtomb_state;   _mbstate_t _wcsrtombs_state; } ;"]
7601 -> 7602 [label="struct __anonstruct__unused_5 {   unsigned char *_nextf[30];   unsigned int _nmalloc[30]; } ;"]
7602 -> 7603 [label="union __anonunion__new_3 {   struct __anonstruct__reent_4 _reent;   struct __anonstruct__unused_5 _unused; } ;"]
7603 -> 7604 [label="struct _reent {   int _errno;   __FILE *_stdin;   __FILE *_stdout;   __FILE *_stderr;   int _inc;   char _emergency[25];   int _current_category;   const char *_current_locale;   int __sdidinit;   void (*__cleanup)(struct _reent *);   struct _Bigint *_result;   int _result_k;   struct _Bigint *_p5s;   struct _Bigint **_freelist;   int _cvtlen;   char *_cvtbuf;   union __anonunion__new_3 _new;   struct _atexit *_atexit;   struct _atexit _atexit0;   void (**_sig_func)(int);   struct _glue __sglue;   __FILE __sf[3]; } ;"]
7604 -> 7605 [label="typedef long time_t;"]
7605 -> 7606 [label="struct timespec {   time_t tv_sec;   long tv_nsec; } ;"]
7606 -> 7607 [label="typedef unsigned short nlink_t;"]
7607 -> 7608 [label="typedef struct timespec timestruc_t;"]
7608 -> 7609 [label="typedef _off64_t off_t;"]
7609 -> 7610 [label="typedef unsigned long __dev32_t;"]
7610 -> 7611 [label="typedef __dev32_t dev_t;"]
7611 -> 7612 [label="typedef long blksize_t;"]
7612 -> 7613 [label="typedef long long __blkcnt64_t;"]
7613 -> 7614 [label="typedef __blkcnt64_t blkcnt_t;"]
7614 -> 7615 [label="typedef unsigned long __uid32_t;"]
7615 -> 7616 [label="typedef __uid32_t uid_t;"]
7616 -> 7617 [label="typedef unsigned long __gid32_t;"]
7617 -> 7618 [label="typedef __gid32_t gid_t;"]
7618 -> 7619 [label="typedef unsigned long long __ino64_t;"]
7619 -> 7620 [label="typedef __ino64_t ino_t;"]
7620 -> 7621 [label="typedef unsigned int mode_t;"]
7621 -> 7622 [label="typedef __FILE FILE;"]
7622 -> 7623 [label="typedef void (*_sig_func_ptr)(int);"]
7623 -> 7624 [label="struct _reent ;"]
7624 -> 7625 [label="struct stat {   dev_t st_dev;   ino_t st_ino;   mode_t st_mode;   nlink_t st_nlink;   uid_t st_uid;   gid_t st_gid;   dev_t st_rdev;   off_t st_size;   timestruc_t st_atim;   timestruc_t st_mtim;   timestruc_t st_ctim;   blksize_t st_blksize;   blkcnt_t st_blocks;   long st_spare4[2]; } ;"]
7625 -> 7626 [label="typedef void *voidp;"]
7626 -> 7627 [label="typedef unsigned char uch;"]
7627 -> 7628 [label="typedef unsigned short ush;"]
7628 -> 7629 [label="typedef unsigned long ulg;"]
7629 -> 7630 [label="typedef int file_t;"]
7630 -> 7631 [label="struct option {   const char *name;   int has_arg;   int *flag;   int val; } ;"]
7631 -> 7632 [label="typedef unsigned char char_type;"]
7632 -> 7633 [label="typedef long code_int;"]
7633 -> 7634 [label="typedef unsigned int IPos;"]
7634 -> 7635 [label="struct config {   ush good_length;   ush max_lazy;   ush nice_length;   ush max_chain; } ;"]
7635 -> 7636 [label="typedef struct config config;"]
7636 -> 7637 [label="enum __anonenum_ordering_22 {   REQUIRE_ORDER = 0,   PERMUTE = 1,   RETURN_IN_ORDER = 2 } ;"]
7637 -> 7638 [label="union __anonunion_v_23 {   ush n;   struct huft *t; } ;"]
7638 -> 7639 [label="struct huft {   uch e;   uch b;   union __anonunion_v_23 v; } ;"]
7639 -> 7640 [label="struct spec_fd_t {   int limit;   int len;   int pos;   unsigned char *buf; } ;"]
7640 -> 7641 [label="union __anonunion_fc_24 {   ush freq;   ush code; } ;"]
7641 -> 7642 [label="union __anonunion_dl_25 {   ush dad;   ush len; } ;"]
7642 -> 7643 [label="struct ct_data {   union __anonunion_fc_24 fc;   union __anonunion_dl_25 dl; } ;"]
7643 -> 7644 [label="typedef struct ct_data ct_data;"]
7644 -> 7645 [label="struct tree_desc {   ct_data *dyn_tree;   ct_data *static_tree;   int *extra_bits;   int extra_base;   int elems;   int max_length;   int max_code; } ;"]
7645 -> 7646 [label="typedef struct tree_desc tree_desc;"]
7646 -> 7647 [label="struct _reent * __getreent();"]
7647 -> 7648 [label="int fflush(FILE *);"]
7648 -> 7649 [label="int fprintf(FILE *, const char *, ...);"]
7649 -> 7650 [label="int printf(const char *, ...);"]
7650 -> 7651 [label="char * fgets(char *, int, FILE *);"]
7651 -> 7652 [label="int putc(int, FILE *);"]
7652 -> 7653 [label="void perror(const char *);"]
7653 -> 7654 [label="int fileno(FILE *);"]
7654 -> 7655 [label="int memcmp(const void *, const void *, size_t );"]
7655 -> 7656 [label="void * memcpy(void *, const void *, size_t );"]
7656 -> 7657 [label="void * memset(void *, int, size_t );"]
7657 -> 7658 [label="char * strcat(char *, const char *);"]
7658 -> 7659 [label="int strcmp(const char *, const char *);"]
7659 -> 7660 [label="char * strcpy(char *, const char *);"]
7660 -> 7661 [label="size_t  strcspn(const char *, const char *);"]
7661 -> 7662 [label="char * strerror(int);"]
7662 -> 7663 [label="size_t  strlen(const char *);"]
7663 -> 7664 [label="int strncmp(const char *, const char *, size_t );"]
7664 -> 7665 [label="char * strncpy(char *, const char *, size_t );"]
7665 -> 7666 [label="char * strrchr(const char *, int);"]
7666 -> 7667 [label="size_t  strspn(const char *, const char *);"]
7667 -> 7668 [label="char * strlwr(char *s);"]
7668 -> 7669 [label="_sig_func_ptr  signal(int, void (*)(int));"]
7669 -> 7670 [label="char * ctime(const time_t *_time);"]
7670 -> 7671 [label="int fstat(int __fd, struct stat *__sbuf);"]
7671 -> 7672 [label="int stat(const char *__path, struct stat *__sbuf);"]
7672 -> 7673 [label="int lstat(const char *__path, struct stat *__buf);"]
7673 -> 7674 [label="int open(const char *, int, ...);"]
7674 -> 7675 [label="int spec_read(int fd, unsigned char *buf, int size);"]
7675 -> 7676 [label="void flush_outbuf();"]
7676 -> 7677 [label="void clear_bufs();"]
7677 -> 7678 [label="int close(int);"]
7678 -> 7679 [label="int fill_inbuf(int eof_ok);"]
7679 -> 7680 [label="void flush_window();"]
7680 -> 7681 [label="int inflate();"]
7681 -> 7682 [label="int spec_write(int fd, unsigned char *buf, int size);"]
7682 -> 7683 [label="void write_error();"]
7683 -> 7684 [label="void read_error();"]
7684 -> 7685 [label="char * gzipbasename(char *fname);"]
7685 -> 7686 [label="int isupper(int);"]
7686 -> 7687 [label="int errno = 0;"]
7687 -> 7688 [label="char *optarg = (char *)0;"]
7688 -> 7689 [label="int optind = 0;"]
7689 -> 7690 [label="char *nextchar = 0;"]
7690 -> 7691 [label="int opterr = 1;"]
7691 -> 7692 [label="int optopt = '\x0';"]
7692 -> 7693 [label="int zip(int in, int out);"]
7693 -> 7694 [label="off_t  lseek(int fd, off_t offset, int whence);"]
7694 -> 7695 [label="voidp  xmalloc(unsigned int size);"]
7695 -> 7696 [label="ulg  updcrc(ush s, unsigned int n);"]
7696 -> 7697 [label="uch *inbuf = 0;"]
7697 -> 7698 [label="uch *outbuf = 0;"]
7698 -> 7699 [label="ush *d_buf = 0;"]
7699 -> 7700 [label="uch *window = 0;"]
7700 -> 7701 [label="ush *prev = 0;"]
7701 -> 7702 [label="unsigned int insize = 0U;"]
7702 -> 7703 [label="unsigned int inptr = 0U;"]
7703 -> 7704 [label="unsigned int outcnt = 0U;"]
7704 -> 7705 [label="long bytes_in = 0L;"]
7705 -> 7706 [label="long bytes_out = 0L;"]
7706 -> 7707 [label="long header_bytes = 0L;"]
7707 -> 7708 [label="int ifd = 0;"]
7708 -> 7709 [label="int ofd = 0;"]
7709 -> 7710 [label="char ifname[1024];"]
7710 -> 7711 [label="char ofname[1024];"]
7711 -> 7712 [label="char *progname = 0;"]
7712 -> 7713 [label="long time_stamp = 0L;"]
7713 -> 7714 [label="long ifile_size = 0L;"]
7714 -> 7715 [label="int decrypt = 0;"]
7715 -> 7716 [label="int exit_code = 0;"]
7716 -> 7717 [label="int verbose = 0;"]
7717 -> 7718 [label="int quiet = 0;"]
7718 -> 7719 [label="int level = 0;"]
7719 -> 7720 [label="int test = 0;"]
7720 -> 7721 [label="int to_stdout = 0;"]
7721 -> 7722 [label="int save_orig_name = 0;"]
7722 -> 7723 [label="void abort_gzip();"]
7723 -> 7724 [label="void lm_init(int pack_level, ush *flags);"]
7724 -> 7725 [label="ulg  deflate();"]
7725 -> 7726 [label="void ct_init(ush *attr, int *methodp);"]
7726 -> 7727 [label="int ct_tally(int dist, int lc);"]
7727 -> 7728 [label="ulg  flush_block(char *buf, ulg stored_len, int eof);"]
7728 -> 7729 [label="void bi_init(file_t zipfile);"]
7729 -> 7730 [label="void send_bits(int value, int length);"]
7730 -> 7731 [label="unsigned int bi_reverse(unsigned int code, int len);"]
7731 -> 7732 [label="void bi_windup();"]
7732 -> 7733 [label="void copy_block(char *buf, unsigned int len, int header);"]
7733 -> 7734 [label="ulg orig_len;"]
7734 -> 7735 [label="int max_len = 0;"]
7735 -> 7736 [label="uch literal[256];"]
7736 -> 7737 [label="int lit_base[26];"]
7737 -> 7738 [label="int leaves[26];"]
7738 -> 7739 [label="int parents[26];"]
7739 -> 7740 [label="int peek_bits = 0;"]
7740 -> 7741 [label="ulg bitbuf;"]
7741 -> 7742 [label="int valid = 0;"]
7742 -> 7743 [label="void read_tree();"]
7743 -> 7744 [label="void build_tree1();"]
7744 -> 7745 [label="void error(char *m);"]
7745 -> 7746 [label="void read_tree();"]
7746 -> 7747 [label="void build_tree1();"]
7747 -> 7748 [label="int unpack(int in, int out);"]
7748 -> 7749 [label="char *license_msg[15] = { (char *)\"   Copyright (C) 1992-1993 Jean-loup Gailly\", (char *)\"   This program is free software; you can redistribute it and/or modify\", (char *)\"   it under the terms of the GNU General Public License as published by\", (char *)\"   the Free Software Foundation; either version 2, or (at your option)\", (char *)\"   any later version.\", (char *)\"\", (char *)\"   This program is distributed in the hope that it will be useful,\", (char *)\"   but WITHOUT ANY WARRANTY; without even the implied warranty of\", (char *)\"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\", (char *)\"   GNU General Public License for more details.\", (char *)\"\", (char *)\"   You should have received a copy of the GNU General Public License\", (char *)\"   along with this program; if not, write to the Free Software\", (char *)\"   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\", (char *)0 };"]
7749 -> 7750 [label="int atoi(const char *__nptr);"]
7750 -> 7751 [label="void * calloc(size_t __nmemb, size_t __size);"]
7751 -> 7752 [label="void exit(int __status);"]
7752 -> 7753 [label="void free(void *);"]
7753 -> 7754 [label="char * getenv(const char *__string);"]
7754 -> 7755 [label="void * malloc(size_t __size);"]
7755 -> 7756 [label="int ascii = 0;"]
7756 -> 7757 [label="int to_stdout = 0;"]
7757 -> 7758 [label="int decompress = 0;"]
7758 -> 7759 [label="int force = 0;"]
7759 -> 7760 [label="int no_name = -1;"]
7760 -> 7761 [label="int no_time = -1;"]
7761 -> 7762 [label="int recursive = 0;"]
7762 -> 7763 [label="int list = 0;"]
7763 -> 7764 [label="int verbose = 0;"]
7764 -> 7765 [label="int quiet = 0;"]
7765 -> 7766 [label="int do_lzw = 0;"]
7766 -> 7767 [label="int test = 0;"]
7767 -> 7768 [label="int foreground = 0;"]
7768 -> 7769 [label="int maxbits = 16;"]
7769 -> 7770 [label="int method = 8;"]
7770 -> 7771 [label="int level = 6;"]
7771 -> 7772 [label="int exit_code = 0;"]
7772 -> 7773 [label="int last_member = 0;"]
7773 -> 7774 [label="int part_nb = 0;"]
7774 -> 7775 [label="char *env = 0;"]
7775 -> 7776 [label="char **args = (char **)((void *)0);"]
7776 -> 7777 [label="char z_suffix[31];"]
7777 -> 7778 [label="int z_len = 0;"]
7778 -> 7779 [label="long total_in = 0L;"]
7779 -> 7780 [label="long total_out = 0L;"]
7780 -> 7781 [label="int remove_ofname = 0;"]
7781 -> 7782 [label="struct stat istat;"]
7782 -> 7783 [label="struct option longopts[24] = { { \"ascii\", 0, (int *)0, 'a' }, { \"to-stdout\", 0, (int *)0, 'c' }, { \"stdout\", 0, (int *)0, 'c' }, { \"decompress\", 0, (int *)0, 'd' }, { \"uncompress\", 0, (int *)0, 'd' }, { \"force\", 0, (int *)0, 'f' }, { \"help\", 0, (int *)0, 'h' }, { \"list\", 0, (int *)0, 'l' }, { \"license\", 0, (int *)0, 'L' }, { \"no-name\", 0, (int *)0, 'n' }, { \"name\", 0, (int *)0, 'N' }, { \"quiet\", 0, (int *)0, 'q' }, { \"silent\", 0, (int *)0, 'q' }, { \"recursive\", 0, (int *)0, 'r' }, { \"suffix\", 1, (int *)0, 'S' }, { \"test\", 0, (int *)0, 't' }, { \"no-time\", 0, (int *)0, 'T' }, { \"verbose\", 0, (int *)0, 'v' }, { \"version\", 0, (int *)0, 'V' }, { \"fast\", 0, (int *)0, '1' }, { \"best\", 0, (int *)0, '9' }, { \"lzw\", 0, (int *)0, 'Z' }, { \"bits\", 1, (int *)0, 'b' }, { (const char *)0, 0, (int *)0, 0 } };"]
7783 -> 7784 [label="void usage();"]
7784 -> 7785 [label="void help();"]
7785 -> 7786 [label="void license();"]
7786 -> 7787 [label="void version();"]
7787 -> 7788 [label="void treat_stdin();"]
7788 -> 7789 [label="void treat_file(char *iname);"]
7789 -> 7790 [label="int create_outfile();"]
7790 -> 7791 [label="int do_stat(char *name, struct stat *sbuf);"]
7791 -> 7792 [label="char * get_suffix(char *name);"]
7792 -> 7793 [label="int get_istat(char *iname, struct stat *sbuf);"]
7793 -> 7794 [label="int make_ofname();"]
7794 -> 7795 [label="int same_file(struct stat *stat1, struct stat *stat2);"]
7795 -> 7796 [label="int name_too_long(char *name, struct stat *statb);"]
7796 -> 7797 [label="void shorten_name(char *name);"]
7797 -> 7798 [label="int get_method(int in);"]
7798 -> 7799 [label="void do_list(int ifd___0, int method___0);"]
7799 -> 7800 [label="int check_ofname();"]
7800 -> 7801 [label="void copy_stat(struct stat *ifstat);"]
7801 -> 7802 [label="void do_exit(int exitcode);"]
7802 -> 7803 [label="int main(int argc, char **argv);"]
7803 -> 7804 [label="int (*work)(int infile, int outfile) = &zip;"]
7804 -> 7805 [label="void usage();"]
7805 -> 7806 [label="void help();"]
7806 -> 7807 [label="char *help_msg[17] = { (char *)\" -c --stdout      write on standard output, keep original files unchanged\", (char *)\" -d --decompress  decompress\", (char *)\" -f --force       force overwrite of output file and compress links\", (char *)\" -h --help        give this help\", (char *)\" -l --list        list compressed file contents\", (char *)\" -L --license     display software license\", (char *)\" -n --no-name     do not save or restore the original name and time stamp\", (char *)\" -N --name        save or restore the original name and time stamp\", (char *)\" -q --quiet       suppress all warnings\", (char *)\" -S .suf  --suffix .suf     use suffix .suf on compressed files\", (char *)\" -t --test        test compressed file integrity\", (char *)\" -v --verbose     verbose mode\", (char *)\" -V --version     display version number\", (char *)\" -1 --fast        compress faster\", (char *)\" -9 --best        compress better\", (char *)\" file...          files to (de)compress. If none given, use standard input.\", (char *)0 };"]
7807 -> 7808 [label="void help();"]
7808 -> 7809 [label="void license();"]
7809 -> 7810 [label="void version();"]
7810 -> 7811 [label="char *key = 0;"]
7811 -> 7812 [label="int pkzip = 0;"]
7812 -> 7813 [label="int ext_header = 0;"]
7813 -> 7814 [label="int check_zipfile(int in);"]
7814 -> 7815 [label="int unzip(int in, int out);"]
7815 -> 7816 [label="ulg crc;"]
7816 -> 7817 [label="ulg crc_32_tab[256] = { (ulg )0L, (ulg )1996959894L, 3993919788UL, 2567524794UL, (ulg )124634137L, (ulg )1886057615L, 3915621685UL, 2657392035UL, (ulg )249268274L, (ulg )2044508324L, 3772115230UL, 2547177864UL, (ulg )162941995L, (ulg )2125561021L, 3887607047UL, 2428444049UL, (ulg )498536548L, (ulg )1789927666L, 4089016648UL, 2227061214UL, (ulg )450548861L, (ulg )1843258603L, 4107580753UL, 2211677639UL, (ulg )325883990L, (ulg )1684777152L, 4251122042UL, 2321926636UL, (ulg )335633487L, (ulg )1661365465L, 4195302755UL, 2366115317UL, (ulg )997073096L, (ulg )1281953886L, 3579855332UL, 2724688242UL, (ulg )1006888145L, (ulg )1258607687L, 3524101629UL, 2768942443UL, (ulg )901097722L, (ulg )1119000684L, 3686517206UL, 2898065728UL, (ulg )853044451L, (ulg )1172266101L, 3705015759UL, 2882616665UL, (ulg )651767980L, (ulg )1373503546L, 3369554304UL, 3218104598UL, (ulg )565507253L, (ulg )1454621731L, 3485111705UL, 3099436303UL, (ulg )671266974L, (ulg )1594198024L, 3322730930UL, 2970347812UL, (ulg )795835527L, (ulg )1483230225L, 3244367275UL, 3060149565UL, (ulg )1994146192L, (ulg )31158534L, 2563907772UL, 4023717930UL, (ulg )1907459465L, (ulg )112637215L, 2680153253UL, 3904427059UL, (ulg )2013776290L, (ulg )251722036L, 2517215374UL, 3775830040UL, (ulg )2137656763L, (ulg )141376813L, 2439277719UL, 3865271297UL, (ulg )1802195444L, (ulg )476864866L, 2238001368UL, 4066508878UL, (ulg )1812370925L, (ulg )453092731L, 2181625025UL, 4111451223UL, (ulg )1706088902L, (ulg )314042704L, 2344532202UL, 4240017532UL, (ulg )1658658271L, (ulg )366619977L, 2362670323UL, 4224994405UL, (ulg )1303535960L, (ulg )984961486L, 2747007092UL, 3569037538UL, (ulg )1256170817L, (ulg )1037604311L, 2765210733UL, 3554079995UL, (ulg )1131014506L, (ulg )879679996L, 2909243462UL, 3663771856UL, (ulg )1141124467L, (ulg )855842277L, 2852801631UL, 3708648649UL, (ulg )1342533948L, (ulg )654459306L, 3188396048UL, 3373015174UL, (ulg )1466479909L, (ulg )544179635L, 3110523913UL, 3462522015UL, (ulg )1591671054L, (ulg )702138776L, 2966460450UL, 3352799412UL, (ulg )1504918807L, (ulg )783551873L, 3082640443UL, 3233442989UL, 3988292384UL, 2596254646UL, (ulg )62317068L, (ulg )1957810842L, 3939845945UL, 2647816111UL, (ulg )81470997L, (ulg )1943803523L, 3814918930UL, 2489596804UL, (ulg )225274430L, (ulg )2053790376L, 3826175755UL, 2466906013UL, (ulg )167816743L, (ulg )2097651377L, 4027552580UL, 2265490386UL, (ulg )503444072L, (ulg )1762050814L, 4150417245UL, 2154129355UL, (ulg )426522225L, (ulg )1852507879L, 4275313526UL, 2312317920UL, (ulg )282753626L, (ulg )1742555852L, 4189708143UL, 2394877945UL, (ulg )397917763L, (ulg )1622183637L, 3604390888UL, 2714866558UL, (ulg )953729732L, (ulg )1340076626L, 3518719985UL, 2797360999UL, (ulg )1068828381L, (ulg )1219638859L, 3624741850UL, 2936675148UL, (ulg )906185462L, (ulg )1090812512L, 3747672003UL, 2825379669UL, (ulg )829329135L, (ulg )1181335161L, 3412177804UL, 3160834842UL, (ulg )628085408L, (ulg )1382605366L, 3423369109UL, 3138078467UL, (ulg )570562233L, (ulg )1426400815L, 3317316542UL, 2998733608UL, (ulg )733239954L, (ulg )1555261956L, 3268935591UL, 3050360625UL, (ulg )752459403L, (ulg )1541320221L, 2607071920UL, 3965973030UL, (ulg )1969922972L, (ulg )40735498L, 2617837225UL, 3943577151UL, (ulg )1913087877L, (ulg )83908371L, 2512341634UL, 3803740692UL, (ulg )2075208622L, (ulg )213261112L, 2463272603UL, 3855990285UL, (ulg )2094854071L, (ulg )198958881L, 2262029012UL, 4057260610UL, (ulg )1759359992L, (ulg )534414190L, 2176718541UL, 4139329115UL, (ulg )1873836001L, (ulg )414664567L, 2282248934UL, 4279200368UL, (ulg )1711684554L, (ulg )285281116L, 2405801727UL, 4167216745UL, (ulg )1634467795L, (ulg )376229701L, 2685067896UL, 3608007406UL, (ulg )1308918612L, (ulg )956543938L, 2808555105UL, 3495958263UL, (ulg )1231636301L, (ulg )1047427035L, 2932959818UL, 3654703836UL, (ulg )1088359270L, (ulg )936918000L, 2847714899UL, 3736837829UL, (ulg )1202900863L, (ulg )817233897L, 3183342108UL, 3401237130UL, (ulg )1404277552L, (ulg )615818150L, 3134207493UL, 3453421203UL, (ulg )1423857449L, (ulg )601450431L, 3009837614UL, 3294710456UL, (ulg )1567103746L, (ulg )711928724L, 3020668471UL, 3272380065UL, (ulg )1510334235L, (ulg )755167117L };"]
7817 -> 7818 [label="void write_buf(int fd, voidp buf, unsigned int cnt);"]
7818 -> 7819 [label="int copy(int in, int out);"]
7819 -> 7820 [label="void clear_bufs();"]
7820 -> 7821 [label="int fill_inbuf(int eof_ok);"]
7821 -> 7822 [label="void flush_outbuf();"]
7822 -> 7823 [label="int zip(int in, int out);"]
7823 -> 7824 [label="void flush_window();"]
7824 -> 7825 [label="char * strlwr(char *s);"]
7825 -> 7826 [label="char * gzipbasename(char *fname);"]
7826 -> 7827 [label="void make_simple_name(char *name);"]
7827 -> 7828 [label="char * add_envopt(int *argcp, char ***argvp, char *env___0);"]
7828 -> 7829 [label="void error(char *m);"]
7829 -> 7830 [label="void warn(char *a, char *b);"]
7830 -> 7831 [label="void read_error();"]
7831 -> 7832 [label="void write_error();"]
7832 -> 7833 [label="void display_ratio(long num, long den, FILE *file);"]
7833 -> 7834 [label="voidp  xmalloc(unsigned int size);"]
7834 -> 7835 [label="int msg_done = 0;"]
7835 -> 7836 [label="int lzw(int in, int out);"]
7836 -> 7837 [label="int block_mode = 128;"]
7837 -> 7838 [label="int unlzw(int in, int out);"]
7838 -> 7839 [label="unsigned int decode(unsigned int count, uch *buffer);"]
7839 -> 7840 [label="void decode_start();"]
7840 -> 7841 [label="void huf_decode_start();"]
7841 -> 7842 [label="unsigned int decode_c();"]
7842 -> 7843 [label="unsigned int decode_p();"]
7843 -> 7844 [label="void read_pt_len(int nn, int nbit, int i_special);"]
7844 -> 7845 [label="void read_c_len();"]
7845 -> 7846 [label="void fillbuf(int n);"]
7846 -> 7847 [label="unsigned int getbits(int n);"]
7847 -> 7848 [label="void init_getbits();"]
7848 -> 7849 [label="void make_table(int nchar, uch *bitlen, int tablebits, ush *table);"]
7849 -> 7850 [label="uch pt_len[19];"]
7850 -> 7851 [label="unsigned int blocksize = 0U;"]
7851 -> 7852 [label="ush pt_table[256];"]
7852 -> 7853 [label="unsigned int subbitbuf = 0U;"]
7853 -> 7854 [label="int bitcount = 0;"]
7854 -> 7855 [label="void fillbuf(int n);"]
7855 -> 7856 [label="unsigned int getbits(int n);"]
7856 -> 7857 [label="void init_getbits();"]
7857 -> 7858 [label="void make_table(int nchar, uch *bitlen, int tablebits, ush *table);"]
7858 -> 7859 [label="void read_pt_len(int nn, int nbit, int i_special);"]
7859 -> 7860 [label="void read_c_len();"]
7860 -> 7861 [label="unsigned int decode_c();"]
7861 -> 7862 [label="unsigned int decode_p();"]
7862 -> 7863 [label="void huf_decode_start();"]
7863 -> 7864 [label="int j = 0;"]
7864 -> 7865 [label="int done = 0;"]
7865 -> 7866 [label="void decode_start();"]
7866 -> 7867 [label="unsigned int i = 0U;"]
7867 -> 7868 [label="unsigned int decode(unsigned int count, uch *buffer);"]
7868 -> 7869 [label="int unlzh(int in, int out);"]
7869 -> 7870 [label="ulg  updcrc1(uch *s, unsigned int n);"]
7870 -> 7871 [label="ulg crc___0 = 4294967295UL;"]
7871 -> 7872 [label="ulg  updcrc1(uch *s, unsigned int n);"]
7872 -> 7873 [label="int file_read(char *buf, unsigned int size);"]
7873 -> 7874 [label="file_t zfile;"]
7874 -> 7875 [label="unsigned short bi_buf = (unsigned short)0;"]
7875 -> 7876 [label="int bi_valid = 0;"]
7876 -> 7877 [label="int (*read_buf)(char *buf, unsigned int size) = 0;"]
7877 -> 7878 [label="void bi_init(file_t zipfile);"]
7878 -> 7879 [label="void send_bits(int value, int length);"]
7879 -> 7880 [label="unsigned int bi_reverse(unsigned int code, int len);"]
7880 -> 7881 [label="void bi_windup();"]
7881 -> 7882 [label="void copy_block(char *buf, unsigned int len, int header);"]
7882 -> 7883 [label="ulg window_size = 65536UL;"]
7883 -> 7884 [label="long block_start = 0L;"]
7884 -> 7885 [label="unsigned int ins_h = 0U;"]
7885 -> 7886 [label="unsigned int prev_length = 0U;"]
7886 -> 7887 [label="unsigned int strstart = 0U;"]
7887 -> 7888 [label="unsigned int match_start = 0U;"]
7888 -> 7889 [label="int eofile = 0;"]
7889 -> 7890 [label="unsigned int lookahead = 0U;"]
7890 -> 7891 [label="unsigned int max_chain_length = 0U;"]
7891 -> 7892 [label="unsigned int max_lazy_match = 0U;"]
7892 -> 7893 [label="int compr_level = 0;"]
7893 -> 7894 [label="unsigned int good_match = 0U;"]
7894 -> 7895 [label="int nice_match = 0;"]
7895 -> 7896 [label="config configuration_table[10] = { { (ush )0, (ush )0, (ush )0, (ush )0 }, { (ush )4, (ush )4, (ush )8, (ush )4 }, { (ush )4, (ush )5, (ush )16, (ush )8 }, { (ush )4, (ush )6, (ush )32, (ush )32 }, { (ush )4, (ush )4, (ush )16, (ush )16 }, { (ush )8, (ush )16, (ush )32, (ush )32 }, { (ush )8, (ush )16, (ush )128, (ush )128 }, { (ush )8, (ush )32, (ush )128, (ush )256 }, { (ush )32, (ush )128, (ush )258, (ush )1024 }, { (ush )32, (ush )258, (ush )258, (ush )4096 } };"]
7896 -> 7897 [label="void fill_window();"]
7897 -> 7898 [label="ulg  deflate_fast();"]
7898 -> 7899 [label="int longest_match(IPos cur_match);"]
7899 -> 7900 [label="void lm_init(int pack_level, ush *flags);"]
7900 -> 7901 [label="int longest_match(IPos cur_match);"]
7901 -> 7902 [label="void fill_window();"]
7902 -> 7903 [label="ulg  deflate_fast();"]
7903 -> 7904 [label="ulg  deflate();"]
7904 -> 7905 [label="enum __anonenum_ordering_22 ordering = 0;"]
7905 -> 7906 [label="int my_strlen(const char *str);"]
7906 -> 7907 [label="char * my_index(const char *str, int chr);"]
7907 -> 7908 [label="int my_strlen(const char *str);"]
7908 -> 7909 [label="char * my_index(const char *str, int chr);"]
7909 -> 7910 [label="int first_nonopt = 0;"]
7910 -> 7911 [label="int last_nonopt = 0;"]
7911 -> 7912 [label="void exchange(char **argv);"]
7912 -> 7913 [label="void exchange(char **argv);"]
7913 -> 7914 [label="int _getopt_internal(int argc, const char **argv, const char *optstring, const struct option *longopts___0, int *longind, int long_only);"]
7914 -> 7915 [label="int getopt(int argc, const char **argv, const char *optstring);"]
7915 -> 7916 [label="int getopt_long(int argc, const char **argv, const char *options, const struct option *long_options, int *opt_index);"]
7916 -> 7917 [label="int temp_optc = 0;"]
7917 -> 7918 [label="int temp_decompress = 0;"]
7918 -> 7919 [label="int temp_to_stdout = 0;"]
7919 -> 7920 [label="int main(int argc, char **argv);"]
7920 -> 7921 [label="void treat_stdin();"]
7921 -> 7922 [label="int unlink(char *a);"]
7922 -> 7923 [label="void treat_file(char *iname);"]
7923 -> 7924 [label="int create_outfile();"]
7924 -> 7925 [label="int do_stat(char *name, struct stat *sbuf);"]
7925 -> 7926 [label="char * get_suffix(char *name);"]
7926 -> 7927 [label="char *known_suffixes[9] = { z_suffix, (char *)\".gz\", (char *)\".z\", (char *)\".taz\", (char *)\".tgz\", (char *)\"-gz\", (char *)\"-z\", (char *)\"_z\", (char *)((void *)0) };"]
7927 -> 7928 [label="char * get_suffix(char *name);"]
7928 -> 7929 [label="int get_istat(char *iname, struct stat *sbuf);"]
7929 -> 7930 [label="char *suffixes[6] = { z_suffix, (char *)\".gz\", (char *)\".z\", (char *)\"-z\", (char *)\".Z\", (char *)((void *)0) };"]
7930 -> 7931 [label="int get_istat(char *iname, struct stat *sbuf);"]
7931 -> 7932 [label="int make_ofname();"]
7932 -> 7933 [label="int get_method(int in);"]
7933 -> 7934 [label="void do_list(int ifd___0, int method___0);"]
7934 -> 7935 [label="int first_time = 1;"]
7935 -> 7936 [label="void do_list(int ifd___0, int method___0);"]
7936 -> 7937 [label="char *methods[9] = { (char *)\"store\", (char *)\"compr\", (char *)\"pack \", (char *)\"lzh  \", (char *)\"\", (char *)\"\", (char *)\"\", (char *)\"\", (char *)\"defla\" };"]
7937 -> 7938 [label="void do_list(int ifd___0, int method___0);"]
7938 -> 7939 [label="int same_file(struct stat *stat1, struct stat *stat2);"]
7939 -> 7940 [label="int name_too_long(char *name, struct stat *statb);"]
7940 -> 7941 [label="void shorten_name(char *name);"]
7941 -> 7942 [label="int check_ofname();"]
7942 -> 7943 [label="void copy_stat(struct stat *ifstat);"]
7943 -> 7944 [label="void do_exit(int exitcode);"]
7944 -> 7945 [label="int in_exit = 0;"]
7945 -> 7946 [label="void do_exit(int exitcode);"]
7946 -> 7947 [label="void abort_gzip();"]
7947 -> 7948 [label="int huft_build(unsigned int *b, unsigned int n, unsigned int s, ush *d, ush *e, struct huft **t, int *m);"]
7948 -> 7949 [label="int huft_free(struct huft *t);"]
7949 -> 7950 [label="int inflate_codes(struct huft *tl, struct huft *td, int bl, int bd);"]
7950 -> 7951 [label="int inflate_stored();"]
7951 -> 7952 [label="int inflate_fixed();"]
7952 -> 7953 [label="int inflate_dynamic();"]
7953 -> 7954 [label="int inflate_block(int *e);"]
7954 -> 7955 [label="unsigned int border[19] = { 16U, 17U, 18U, 0U, 8U, 7U, 9U, 6U, 10U, 5U, 11U, 4U, 12U, 3U, 13U, 2U, 14U, 1U, 15U };"]
7955 -> 7956 [label="ush cplens[31] = { (ush )3, (ush )4, (ush )5, (ush )6, (ush )7, (ush )8, (ush )9, (ush )10, (ush )11, (ush )13, (ush )15, (ush )17, (ush )19, (ush )23, (ush )27, (ush )31, (ush )35, (ush )43, (ush )51, (ush )59, (ush )67, (ush )83, (ush )99, (ush )115, (ush )131, (ush )163, (ush )195, (ush )227, (ush )258, (ush )0, (ush )0 };"]
7956 -> 7957 [label="ush cplext[31] = { (ush )0, (ush )0, (ush )0, (ush )0, (ush )0, (ush )0, (ush )0, (ush )0, (ush )1, (ush )1, (ush )1, (ush )1, (ush )2, (ush )2, (ush )2, (ush )2, (ush )3, (ush )3, (ush )3, (ush )3, (ush )4, (ush )4, (ush )4, (ush )4, (ush )5, (ush )5, (ush )5, (ush )5, (ush )0, (ush )99, (ush )99 };"]
7957 -> 7958 [label="ush cpdist[30] = { (ush )1, (ush )2, (ush )3, (ush )4, (ush )5, (ush )7, (ush )9, (ush )13, (ush )17, (ush )25, (ush )33, (ush )49, (ush )65, (ush )97, (ush )129, (ush )193, (ush )257, (ush )385, (ush )513, (ush )769, (ush )1025, (ush )1537, (ush )2049, (ush )3073, (ush )4097, (ush )6145, (ush )8193, (ush )12289, (ush )16385, (ush )24577 };"]
7958 -> 7959 [label="ush cpdext[30] = { (ush )0, (ush )0, (ush )0, (ush )0, (ush )1, (ush )1, (ush )2, (ush )2, (ush )3, (ush )3, (ush )4, (ush )4, (ush )5, (ush )5, (ush )6, (ush )6, (ush )7, (ush )7, (ush )8, (ush )8, (ush )9, (ush )9, (ush )10, (ush )10, (ush )11, (ush )11, (ush )12, (ush )12, (ush )13, (ush )13 };"]
7959 -> 7960 [label="ulg bb;"]
7960 -> 7961 [label="unsigned int bk = 0U;"]
7961 -> 7962 [label="ush mask_bits[17] = { (ush )0, (ush )1, (ush )3, (ush )7, (ush )15, (ush )31, (ush )63, (ush )127, (ush )255, (ush )511, (ush )1023, (ush )2047, (ush )4095, (ush )8191, (ush )16383, (ush )32767, (ush )65535 };"]
7962 -> 7963 [label="int lbits = 9;"]
7963 -> 7964 [label="int dbits = 6;"]
7964 -> 7965 [label="unsigned int hufts = 0U;"]
7965 -> 7966 [label="int huft_build(unsigned int *b, unsigned int n, unsigned int s, ush *d, ush *e, struct huft **t, int *m);"]
7966 -> 7967 [label="int huft_free(struct huft *t);"]
7967 -> 7968 [label="int inflate_codes(struct huft *tl, struct huft *td, int bl, int bd);"]
7968 -> 7969 [label="int inflate_stored();"]
7969 -> 7970 [label="int inflate_fixed();"]
7970 -> 7971 [label="int inflate_dynamic();"]
7971 -> 7972 [label="int inflate_block(int *e);"]
7972 -> 7973 [label="int inflate();"]
7973 -> 7974 [label="void spec_initbufs();"]
7974 -> 7975 [label="void spec_compress(int in, int out, int lev);"]
7975 -> 7976 [label="void spec_uncompress(int in, int out, int lev);"]
7976 -> 7977 [label="int dbglvl = 4;"]
7977 -> 7978 [label="struct spec_fd_t spec_fd[3];"]
7978 -> 7979 [label="long seedi = 0L;"]
7979 -> 7980 [label="double ran();"]
7980 -> 7981 [label="int spec_init();"]
7981 -> 7982 [label="int spec_random_load(int fd);"]
7982 -> 7983 [label="int spec_load(int num, char *filename, int size);"]
7983 -> 7984 [label="int spec_read(int fd, unsigned char *buf, int size);"]
7984 -> 7985 [label="int spec_getc(int fd);"]
7985 -> 7986 [label="int spec_ungetc(unsigned char ch, int fd);"]
7986 -> 7987 [label="int spec_rewind(int fd);"]
7987 -> 7988 [label="int spec_reset(int fd);"]
7988 -> 7989 [label="int spec_write(int fd, unsigned char *buf, int size);"]
7989 -> 7990 [label="int spec_putc(unsigned char ch, int fd);"]
7990 -> 7991 [label="void spec_initbufs();"]
7991 -> 7992 [label="void spec_compress(int in, int out, int lev);"]
7992 -> 7993 [label="void spec_uncompress(int in, int out, int lev);"]
7993 -> 7994 [label="int debug_time();"]
7994 -> 7995 [label="int extra_lbits[29] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 };"]
7995 -> 7996 [label="int extra_dbits[30] = { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 };"]
7996 -> 7997 [label="int extra_blbits[19] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7 };"]
7997 -> 7998 [label="ct_data dyn_ltree[573];"]
7998 -> 7999 [label="ct_data dyn_dtree[61];"]
7999 -> 8000 [label="ct_data static_ltree[288];"]
8000 -> 8001 [label="ct_data static_dtree[30];"]
8001 -> 8002 [label="ct_data bl_tree[39];"]
8002 -> 8003 [label="tree_desc l_desc = { dyn_ltree, static_ltree, extra_lbits, 257, 286, 15, 0 };"]
8003 -> 8004 [label="tree_desc d_desc = { dyn_dtree, static_dtree, extra_dbits, 0, 30, 15, 0 };"]
8004 -> 8005 [label="tree_desc bl_desc = { bl_tree, (ct_data *)0, extra_blbits, 0, 19, 7, 0 };"]
8005 -> 8006 [label="ush bl_count[16];"]
8006 -> 8007 [label="uch bl_order[19] = { (uch )16, (uch )17, (uch )18, (uch )0, (uch )8, (uch )7, (uch )9, (uch )6, (uch )10, (uch )5, (uch )11, (uch )4, (uch )12, (uch )3, (uch )13, (uch )2, (uch )14, (uch )1, (uch )15 };"]
8007 -> 8008 [label="int heap[573];"]
8008 -> 8009 [label="int heap_len = 0;"]
8009 -> 8010 [label="int heap_max = 0;"]
8010 -> 8011 [label="uch depth[573];"]
8011 -> 8012 [label="uch length_code[256];"]
8012 -> 8013 [label="uch dist_code[512];"]
8013 -> 8014 [label="int base_length[29];"]
8014 -> 8015 [label="int base_dist[30];"]
8015 -> 8016 [label="uch flag_buf[4096];"]
8016 -> 8017 [label="unsigned int last_lit = 0U;"]
8017 -> 8018 [label="unsigned int last_dist = 0U;"]
8018 -> 8019 [label="unsigned int last_flags = 0U;"]
8019 -> 8020 [label="uch flags;"]
8020 -> 8021 [label="uch flag_bit;"]
8021 -> 8022 [label="ulg opt_len;"]
8022 -> 8023 [label="ulg static_len;"]
8023 -> 8024 [label="ulg compressed_len;"]
8024 -> 8025 [label="ulg input_len;"]
8025 -> 8026 [label="ush *file_type = 0;"]
8026 -> 8027 [label="int *file_method = 0;"]
8027 -> 8028 [label="void init_block();"]
8028 -> 8029 [label="void pqdownheap(ct_data *tree, int k);"]
8029 -> 8030 [label="void gen_bitlen(tree_desc *desc);"]
8030 -> 8031 [label="void gen_codes(ct_data *tree, int max_code);"]
8031 -> 8032 [label="void build_tree(tree_desc *desc);"]
8032 -> 8033 [label="void scan_tree(ct_data *tree, int max_code);"]
8033 -> 8034 [label="void send_tree(ct_data *tree, int max_code);"]
8034 -> 8035 [label="int build_bl_tree();"]
8035 -> 8036 [label="void send_all_trees(int lcodes, int dcodes, int blcodes);"]
8036 -> 8037 [label="void compress_block(ct_data *ltree, ct_data *dtree);"]
8037 -> 8038 [label="void set_file_type();"]
8038 -> 8039 [label="void ct_init(ush *attr, int *methodp);"]
8039 -> 8040 [label="void init_block();"]
8040 -> 8041 [label="void pqdownheap(ct_data *tree, int k);"]
8041 -> 8042 [label="void gen_bitlen(tree_desc *desc);"]
8042 -> 8043 [label="void gen_codes(ct_data *tree, int max_code);"]
8043 -> 8044 [label="void build_tree(tree_desc *desc);"]
8044 -> 8045 [label="void scan_tree(ct_data *tree, int max_code);"]
8045 -> 8046 [label="void send_tree(ct_data *tree, int max_code);"]
8046 -> 8047 [label="int build_bl_tree();"]
8047 -> 8048 [label="void send_all_trees(int lcodes, int dcodes, int blcodes);"]
8048 -> 8049 [label="ulg  flush_block(char *buf, ulg stored_len, int eof);"]
8049 -> 8050 [label="int ct_tally(int dist, int lc);"]
8050 -> 8051 [label="void compress_block(ct_data *ltree, ct_data *dtree);"]
8051 -> 8052 [label="void set_file_type();"]
8052 -> 3181 [label="Function start dummy edge"]
3181 -> 3183 [label="int file_count;"]
3183 -> 3185 [label="int proglen;"]
3185 -> 3187 [label="int optc;"]
3187 -> 3189 [label="size_t tmp;"]
3189 -> 3191 [label="int tmp___0;"]
3191 -> 3193 [label="_sig_func_ptr tmp___1;"]
3193 -> 3195 [label="_sig_func_ptr tmp___2;"]
3195 -> 3197 [label="_sig_func_ptr tmp___3;"]
3197 -> 3199 [label="int tmp___4;"]
3199 -> 3201 [label="int tmp___5;"]
3201 -> 3203 [label="int tmp___6;"]
3203 -> 3205 [label="int tmp___7;"]
3205 -> 3207 [label="size_t tmp___8;"]
3207 -> 3209 [label="struct _reent *tmp___9;"]
3209 -> 3211 [label="size_t tmp___10;"]
3211 -> 3213 [label="struct _reent *tmp___11;"]
3213 -> 3215 [label="struct _reent *tmp___12;"]
3215 -> 3217 [label="void *tmp___13;"]
3217 -> 3219 [label="void *tmp___14;"]
3219 -> 3221 [label="void *tmp___15;"]
3221 -> 3223 [label="void *tmp___16;"]
3223 -> 3225 [label="void *tmp___17;"]
3225 -> 3227 [label="int tmp___18;"]
3227 -> 3228 [label="progname = gzipbasename(*(argv + 0));" style="dotted" arrowhead="empty"]
3228 -> 3229 [label="temp_to_stdout = 1;"]
3229 -> 3230 [label="[!(((unsigned int)progname) == ((unsigned int)((char *)0)))]"]
3229 -> 3231 [label="[((unsigned int)progname) == ((unsigned int)((char *)0))]"]
3231 -> 3232 [label="progname = (char *)\"gzipbmk\";"]
3232 -> 3230 [label=""]
3230 -> 3233 [label="tmp = strlen((const char *)progname);"]
3233 -> 3234 [label="proglen = (int)tmp;"]
3234 -> 3235 [label="[!(proglen > 4)]"]
3234 -> 3236 [label="[proglen > 4]"]
3236 -> 3237 [label="tmp___0 = strcmp((const char *)((progname + proglen) - 4), \".exe\");"]
3237 -> 3238 [label="[!(tmp___0 == 0)]"]
3237 -> 3239 [label="[tmp___0 == 0]"]
3239 -> 3240 [label="*(progname + (proglen - 4)) = (char)'\x0';"]
3240 -> 3235 [label=""]
3235 -> 3241 [label="env = add_envopt(&argc, &argv, (char *)\"GZIP\");" style="dotted" arrowhead="empty"]
3241 -> 3242 [label="[!(((unsigned int)env) != ((unsigned int)((void *)0)))]"]
3241 -> 3243 [label="[((unsigned int)env) != ((unsigned int)((void *)0))]"]
3243 -> 3244 [label="args = argv;"]
3244 -> 3242 [label=""]
3242 -> 3245 [label="tmp___1 = signal(2, (void (*)(int))1);"]
3245 -> 3246 [label="foreground = ((unsigned int)tmp___1) != ((unsigned int)((void (*)(int))1));"]
3246 -> 3247 [label="[!(foreground != 0)]"]
3246 -> 3248 [label="[foreground != 0]"]
3248 -> 3249 [label="signal(2, (void (*)(int))(&abort_gzip));"]
3249 -> 3247 [label=""]
3247 -> 3250 [label="tmp___2 = signal(15, (void (*)(int))1);"]
3250 -> 3251 [label="[!(((unsigned int)tmp___2) != ((unsigned int)((void (*)(int))1)))]"]
3250 -> 3252 [label="[((unsigned int)tmp___2) != ((unsigned int)((void (*)(int))1))]"]
3252 -> 3253 [label="signal(15, (void (*)(int))(&abort_gzip));"]
3253 -> 3251 [label=""]
3251 -> 3254 [label="tmp___3 = signal(1, (void (*)(int))1);"]
3254 -> 3255 [label="[!(((unsigned int)tmp___3) != ((unsigned int)((void (*)(int))1)))]"]
3254 -> 3256 [label="[((unsigned int)tmp___3) != ((unsigned int)((void (*)(int))1))]"]
3256 -> 3257 [label="signal(1, (void (*)(int))(&abort_gzip));"]
3257 -> 3255 [label=""]
3255 -> 3258 [label="tmp___6 = strncmp((const char *)progname, \"un\", 2U);"]
3258 -> 3261 [label="[!(tmp___6 == 0)]"]
3258 -> 3260 [label="[tmp___6 == 0]"]
3260 -> 3262 [label="decompress = 1;"]
3262 -> 3259 [label=""]
3259 -> 3279 [label="strncpy(z_suffix, \".gz\", (sizeof(z_suffix)) - 1U);"]
3279 -> 3280 [label="tmp___8 = strlen((const char *)z_suffix);"]
3280 -> 3281 [label="z_len = (int)tmp___8;"]
3281 -> 3282 [label="while"]
3282 -> 3283 [label=""]
3283 -> 3285 [label="optc = getopt_long(argc, (const char **)argv, \"ab:cdfhH?lLmMnNqrS:tvVZ123456789\", (const struct option *)longopts, (int *)0);" style="dotted" arrowhead="empty"]
3285 -> 3286 [label="temp_optc = optc;"]
3286 -> 3287 [label="[!(!(optc != (-1)))]"]
3286 -> 3288 [label="[!(optc != (-1))]"]
3288 -> 3284 [label="break"]
3284 -> 3417 [label="[!(no_time < 0)]"]
3284 -> 3418 [label="[no_time < 0]"]
3418 -> 3419 [label="no_time = decompress;"]
3419 -> 3417 [label=""]
3417 -> 3420 [label="[!(no_name < 0)]"]
3417 -> 3421 [label="[no_name < 0]"]
3421 -> 3422 [label="no_name = decompress;"]
3422 -> 3420 [label=""]
3420 -> 3423 [label="file_count = argc - optind;"]
3423 -> 3426 [label="[!(z_len == 0)]"]
3423 -> 3425 [label="[z_len == 0]"]
3425 -> 3429 [label="[!(!decompress)]"]
3425 -> 3428 [label="[!decompress]"]
3428 -> 3430 [label="tmp___12 = __getreent();"]
3430 -> 3431 [label="fprintf(tmp___12->_stderr, \"%s: incorrect suffix \'%s\'\n\", progname, optarg);"]
3431 -> 3432 [label="do_exit(1);" style="dotted" arrowhead="empty"]
3416 -> 3291 [label=""]
3291 -> 3282 [label=""]
3497 -> 3179 [label="return exit_code;"]
3391 -> 3291 [label="break"]
3384 -> 3291 [label="break"]
3361 -> 3291 [label="break"]
3331 -> 3291 [label="break"]
3320 -> 3291 [label="break"]
3439 -> 3424 [label=""]
3424 -> 3440 [label="[!(do_lzw != 0)]"]
3424 -> 3441 [label="[do_lzw != 0]"]
3441 -> 3442 [label="[!(!decompress)]"]
3441 -> 3443 [label="[!decompress]"]
3443 -> 3444 [label="work = &lzw;"]
3444 -> 3440 [label=""]
3440 -> 3445 [label="tmp___13 = malloc(16416U * (2U * (sizeof(uch ))));"]
3445 -> 3446 [label="inbuf = (uch *)tmp___13;"]
3446 -> 3447 [label="[!(((unsigned int)inbuf) == ((unsigned int)((void *)0)))]"]
3446 -> 3448 [label="[((unsigned int)inbuf) == ((unsigned int)((void *)0))]"]
3448 -> 3449 [label="error((char *)\"insufficient memory\");" style="dotted" arrowhead="empty"]
3488 -> 3483 [label=""]
3483 -> 3485 [label="[!(optind < argc)]"]
3483 -> 3484 [label="[optind < argc]"]
3484 -> 3486 [label="tmp___18 = optind;"]
3486 -> 3487 [label="optind = optind + 1;"]
3487 -> 3488 [label="treat_file(*(argv + tmp___18));" style="dotted" arrowhead="empty"]
3496 -> 3490 [label=""]
3490 -> 3497 [label="do_exit(exit_code);" style="dotted" arrowhead="empty"]
3489 -> 3470 [label=""]
3470 -> 3490 [label="[!(list != 0)]"]
3470 -> 3491 [label="[list != 0]"]
3491 -> 3492 [label="[!(!quiet)]"]
3491 -> 3493 [label="[!quiet]"]
3493 -> 3494 [label="[!(file_count > 1)]"]
3493 -> 3495 [label="[file_count > 1]"]
3495 -> 3496 [label="do_list(-1, -1);" style="dotted" arrowhead="empty"]
3494 -> 3490 [label=""]
3492 -> 3490 [label=""]
3485 -> 3470 [label=""]
3469 -> 3467 [label=""]
3467 -> 3472 [label="[!(file_count != 0)]"]
3467 -> 3471 [label="[file_count != 0]"]
3471 -> 3473 [label="[!(to_stdout != 0)]"]
3471 -> 3474 [label="[to_stdout != 0]"]
3474 -> 3475 [label="[!(!test)]"]
3474 -> 3476 [label="[!test]"]
3476 -> 3477 [label="[!(!list)]"]
3476 -> 3478 [label="[!list]"]
3478 -> 3479 [label="[!(!(!decompress))]"]
3478 -> 3480 [label="[!(!decompress)]"]
3480 -> 3481 [label="[!(!ascii)]"]
3480 -> 3482 [label="[!ascii]"]
3482 -> 3473 [label=""]
3473 -> 3483 [label="while"]
3481 -> 3473 [label=""]
3479 -> 3473 [label=""]
3477 -> 3473 [label=""]
3475 -> 3473 [label=""]
3472 -> 3489 [label="treat_stdin();" style="dotted" arrowhead="empty"]
3464 -> 3462 [label=""]
3462 -> 3465 [label="tmp___17 = malloc(((unsigned int)(((1L << 16) + 1L) / 2L)) * (2U * (sizeof(ush ))));"]
3465 -> 3466 [label="prev = (ush *)tmp___17;"]
3466 -> 3467 [label="[!(((unsigned int)prev) == ((unsigned int)((void *)0)))]"]
3466 -> 3468 [label="[((unsigned int)prev) == ((unsigned int)((void *)0))]"]
3468 -> 3469 [label="error((char *)\"insufficient memory\");" style="dotted" arrowhead="empty"]
3459 -> 3457 [label=""]
3457 -> 3460 [label="tmp___16 = malloc(32768U * (2U * (sizeof(uch ))));"]
3460 -> 3461 [label="window = (uch *)tmp___16;"]
3461 -> 3462 [label="[!(((unsigned int)window) == ((unsigned int)((void *)0)))]"]
3461 -> 3463 [label="[((unsigned int)window) == ((unsigned int)((void *)0))]"]
3463 -> 3464 [label="error((char *)\"insufficient memory\");" style="dotted" arrowhead="empty"]
3454 -> 3452 [label=""]
3452 -> 3455 [label="tmp___15 = malloc(16384U * (2U * (sizeof(ush ))));"]
3455 -> 3456 [label="d_buf = (ush *)tmp___15;"]
3456 -> 3457 [label="[!(((unsigned int)d_buf) == ((unsigned int)((void *)0)))]"]
3456 -> 3458 [label="[((unsigned int)d_buf) == ((unsigned int)((void *)0))]"]
3458 -> 3459 [label="error((char *)\"insufficient memory\");" style="dotted" arrowhead="empty"]
3449 -> 3447 [label=""]
3447 -> 3450 [label="tmp___14 = malloc(9216U * (2U * (sizeof(uch ))));"]
3450 -> 3451 [label="outbuf = (uch *)tmp___14;"]
3451 -> 3452 [label="[!(((unsigned int)outbuf) == ((unsigned int)((void *)0)))]"]
3451 -> 3453 [label="[((unsigned int)outbuf) == ((unsigned int)((void *)0))]"]
3453 -> 3454 [label="error((char *)\"insufficient memory\");" style="dotted" arrowhead="empty"]
3442 -> 3440 [label=""]
3432 -> 3427 [label=""]
3427 -> 3424 [label=""]
3429 -> 3434 [label="Goto: _L"]
3434 -> 3435 [label="[!(z_len > 30)]"]
3434 -> 3436 [label="[z_len > 30]"]
3436 -> 3437 [label="tmp___12 = __getreent();"]
3437 -> 3438 [label="fprintf(tmp___12->_stderr, \"%s: incorrect suffix \'%s\'\n\", progname, optarg);"]
3438 -> 3439 [label="do_exit(1);" style="dotted" arrowhead="empty"]
3435 -> 3424 [label=""]
3426 -> 3434 [label="Label: _L"]
3287 -> 3290 [label="switch (optc)"]
3290 -> 3294 [label="[!(optc == 97)]"]
3290 -> 3293 [label="[optc == 97]"]
3293 -> 3295 [label="ascii = 1;"]
3295 -> 3291 [label="break"]
3294 -> 3298 [label="[!(optc == 98)]"]
3294 -> 3297 [label="[optc == 98]"]
3297 -> 3299 [label="maxbits = atoi((const char *)optarg);"]
3299 -> 3291 [label="break"]
3298 -> 3302 [label="[!(optc == 99)]"]
3298 -> 3301 [label="[optc == 99]"]
3301 -> 3303 [label="to_stdout = 1;"]
3303 -> 3291 [label="break"]
3302 -> 3306 [label="[!(optc == 100)]"]
3302 -> 3305 [label="[optc == 100]"]
3305 -> 3307 [label="decompress = 1;"]
3307 -> 3291 [label="break"]
3306 -> 3310 [label="[!(optc == 102)]"]
3306 -> 3309 [label="[optc == 102]"]
3309 -> 3311 [label="force = force + 1;"]
3311 -> 3291 [label="break"]
3310 -> 3314 [label="[!(optc == 104)]"]
3310 -> 3313 [label="[optc == 104]"]
3313 -> 3315 [label="fall through"]
3315 -> 3317 [label="fall through"]
3317 -> 3319 [label="help();" style="dotted" arrowhead="empty"]
3415 -> 3416 [label="do_exit(1);" style="dotted" arrowhead="empty"]
3390 -> 3391 [label="do_exit(1);" style="dotted" arrowhead="empty"]
3360 -> 3361 [label="do_exit(1);" style="dotted" arrowhead="empty"]
3319 -> 3320 [label="do_exit(0);" style="dotted" arrowhead="empty"]
3314 -> 3316 [label="[!(optc == 72)]"]
3314 -> 3315 [label="[optc == 72]"]
3316 -> 3318 [label="[!(optc == 63)]"]
3316 -> 3317 [label="[optc == 63]"]
3318 -> 3323 [label="[!(optc == 108)]"]
3318 -> 3322 [label="[optc == 108]"]
3322 -> 3324 [label="to_stdout = 1;"]
3324 -> 3325 [label="decompress = to_stdout;"]
3325 -> 3326 [label="list = decompress;"]
3326 -> 3291 [label="break"]
3323 -> 3329 [label="[!(optc == 76)]"]
3323 -> 3328 [label="[optc == 76]"]
3328 -> 3330 [label="license();" style="dotted" arrowhead="empty"]
3330 -> 3331 [label="do_exit(0);" style="dotted" arrowhead="empty"]
3329 -> 3334 [label="[!(optc == 109)]"]
3329 -> 3333 [label="[optc == 109]"]
3333 -> 3335 [label="no_time = 1;"]
3335 -> 3291 [label="break"]
3334 -> 3338 [label="[!(optc == 77)]"]
3334 -> 3337 [label="[optc == 77]"]
3337 -> 3339 [label="no_time = 0;"]
3339 -> 3291 [label="break"]
3338 -> 3342 [label="[!(optc == 110)]"]
3338 -> 3341 [label="[optc == 110]"]
3341 -> 3343 [label="no_time = 1;"]
3343 -> 3344 [label="no_name = no_time;"]
3344 -> 3291 [label="break"]
3342 -> 3347 [label="[!(optc == 78)]"]
3342 -> 3346 [label="[optc == 78]"]
3346 -> 3348 [label="no_time = 0;"]
3348 -> 3349 [label="no_name = no_time;"]
3349 -> 3291 [label="break"]
3347 -> 3352 [label="[!(optc == 113)]"]
3347 -> 3351 [label="[optc == 113]"]
3351 -> 3353 [label="quiet = 1;"]
3353 -> 3354 [label="verbose = 0;"]
3354 -> 3291 [label="break"]
3352 -> 3357 [label="[!(optc == 114)]"]
3352 -> 3356 [label="[optc == 114]"]
3356 -> 3358 [label="tmp___9 = __getreent();"]
3358 -> 3359 [label="fprintf(tmp___9->_stderr, \"%s: -r not supported on this system\n\", progname);"]
3359 -> 3360 [label="usage();" style="dotted" arrowhead="empty"]
3357 -> 3364 [label="[!(optc == 83)]"]
3357 -> 3363 [label="[optc == 83]"]
3363 -> 3365 [label="tmp___10 = strlen((const char *)optarg);"]
3365 -> 3366 [label="z_len = (int)tmp___10;"]
3366 -> 3367 [label="strcpy(z_suffix, (const char *)optarg);"]
3367 -> 3291 [label="break"]
3364 -> 3370 [label="[!(optc == 116)]"]
3364 -> 3369 [label="[optc == 116]"]
3369 -> 3371 [label="to_stdout = 1;"]
3371 -> 3372 [label="decompress = to_stdout;"]
3372 -> 3373 [label="temp_decompress = decompress;"]
3373 -> 3374 [label="test = decompress;"]
3374 -> 3291 [label="break"]
3370 -> 3377 [label="[!(optc == 118)]"]
3370 -> 3376 [label="[optc == 118]"]
3376 -> 3378 [label="verbose = verbose + 1;"]
3378 -> 3379 [label="quiet = 0;"]
3379 -> 3291 [label="break"]
3377 -> 3382 [label="[!(optc == 86)]"]
3377 -> 3381 [label="[optc == 86]"]
3381 -> 3383 [label="version();" style="dotted" arrowhead="empty"]
3383 -> 3384 [label="do_exit(0);" style="dotted" arrowhead="empty"]
3382 -> 3387 [label="[!(optc == 90)]"]
3382 -> 3386 [label="[optc == 90]"]
3386 -> 3388 [label="tmp___11 = __getreent();"]
3388 -> 3389 [label="fprintf(tmp___11->_stderr, \"%s: -Z not supported in this version\n\", progname);"]
3389 -> 3390 [label="usage();" style="dotted" arrowhead="empty"]
3387 -> 3394 [label="[!(optc == 49)]"]
3387 -> 3393 [label="[optc == 49]"]
3393 -> 3395 [label="fall through"]
3395 -> 3397 [label="fall through"]
3397 -> 3399 [label="fall through"]
3399 -> 3401 [label="fall through"]
3401 -> 3403 [label="fall through"]
3403 -> 3405 [label="fall through"]
3405 -> 3407 [label="fall through"]
3407 -> 3409 [label="fall through"]
3409 -> 3411 [label="level = optc - 48;"]
3411 -> 3291 [label="break"]
3394 -> 3396 [label="[!(optc == 50)]"]
3394 -> 3395 [label="[optc == 50]"]
3396 -> 3398 [label="[!(optc == 51)]"]
3396 -> 3397 [label="[optc == 51]"]
3398 -> 3400 [label="[!(optc == 52)]"]
3398 -> 3399 [label="[optc == 52]"]
3400 -> 3402 [label="[!(optc == 53)]"]
3400 -> 3401 [label="[optc == 53]"]
3402 -> 3404 [label="[!(optc == 54)]"]
3402 -> 3403 [label="[optc == 54]"]
3404 -> 3406 [label="[!(optc == 55)]"]
3404 -> 3405 [label="[optc == 55]"]
3406 -> 3408 [label="[!(optc == 56)]"]
3406 -> 3407 [label="[optc == 56]"]
3408 -> 3410 [label="[!(optc == 57)]"]
3408 -> 3409 [label="[optc == 57]"]
3410 -> 3413 [label="default"]
3413 -> 3415 [label="usage();" style="dotted" arrowhead="empty"]
3261 -> 3263 [label="tmp___7 = strncmp((const char *)progname, \"gun\", 3U);"]
3263 -> 3266 [label="[!(tmp___7 == 0)]"]
3263 -> 3265 [label="[tmp___7 == 0]"]
3265 -> 3267 [label="decompress = 1;"]
3267 -> 3259 [label=""]
3266 -> 3268 [label="tmp___4 = strcmp((const char *)(progname + 1), \"cat\");"]
3268 -> 3271 [label="[!(tmp___4 == 0)]"]
3268 -> 3270 [label="[tmp___4 == 0]"]
3270 -> 3272 [label="to_stdout = 1;"]
3272 -> 3273 [label="decompress = to_stdout;"]
3273 -> 3259 [label=""]
3271 -> 3274 [label="tmp___5 = strcmp((const char *)progname, \"gzcat\");"]
3274 -> 3275 [label="[!(tmp___5 == 0)]"]
3274 -> 3276 [label="[tmp___5 == 0]"]
3276 -> 3277 [label="to_stdout = 1;"]
3277 -> 3278 [label="decompress = to_stdout;"]
3278 -> 3259 [label=""]
3275 -> 3259 [label=""]
3238 -> 3235 [label=""]}
subgraph cluster_flush_outbuf {
label="flush_outbuf()"
646 -> 647 [label="Function start dummy edge"]
647 -> 648 [label="[!(outcnt == 0U)]"]
647 -> 649 [label="[outcnt == 0U]"]
649 -> 645 [label="return;"]
648 -> 651 [label="write_buf(ofd, (void *)((char *)outbuf), outcnt);" style="dotted" arrowhead="empty"]
651 -> 652 [label="bytes_out = (long)(((unsigned long)bytes_out) + ((unsigned long)outcnt));"]
652 -> 653 [label="outcnt = 0U;"]
653 -> 645 [label="return;"]}
subgraph cluster_decode {
label="decode()"
1907 -> 1908 [label="Function start dummy edge"]
1908 -> 1910 [label="unsigned int r;"]
1910 -> 1912 [label="unsigned int c;"]
1912 -> 1914 [label="unsigned int tmp;"]
1914 -> 1915 [label="r = 0U;"]
1915 -> 1916 [label="while"]
1916 -> 1917 [label=""]
1917 -> 1919 [label="j = j - 1;"]
1919 -> 1920 [label="[!(!(j >= 0))]"]
1919 -> 1921 [label="[!(j >= 0)]"]
1921 -> 1918 [label="break"]
1918 -> 1929 [label="while"]
1929 -> 1930 [label=""]
1930 -> 1932 [label="c = decode_c();" style="dotted" arrowhead="empty"]
1946 -> 1947 [label="i = ((r - tmp) - 1U) & ((1U << 13) - 1U);"]
1947 -> 1948 [label="while"]
1948 -> 1949 [label=""]
1949 -> 1951 [label="j = j - 1;"]
1951 -> 1952 [label="[!(!(j >= 0))]"]
1951 -> 1953 [label="[!(j >= 0)]"]
1953 -> 1950 [label="break"]
1950 -> 1937 [label=""]
1937 -> 1929 [label=""]
1952 -> 1955 [label="*(buffer + r) = *(buffer + i);"]
1955 -> 1956 [label="i = (i + 1U) & ((1U << 13) - 1U);"]
1956 -> 1957 [label="r = r + 1U;"]
1957 -> 1958 [label="[!(r == count)]"]
1957 -> 1959 [label="[r == count]"]
1959 -> 1906 [label="return r;"]
1958 -> 1948 [label=""]
1932 -> 1933 [label="[!(c == 510U)]"]
1932 -> 1934 [label="[c == 510U]"]
1934 -> 1935 [label="done = 1;"]
1935 -> 1906 [label="return r;"]
1933 -> 1939 [label="[!(c <= 255U)]"]
1933 -> 1938 [label="[c <= 255U]"]
1938 -> 1940 [label="*(buffer + r) = (unsigned char)c;"]
1940 -> 1941 [label="r = r + 1U;"]
1941 -> 1942 [label="[!(r == count)]"]
1941 -> 1943 [label="[r == count]"]
1943 -> 1906 [label="return r;"]
1942 -> 1937 [label=""]
1939 -> 1945 [label="j = (int)(c - 253U);"]
1945 -> 1946 [label="tmp = decode_p();" style="dotted" arrowhead="empty"]
1920 -> 1923 [label="*(buffer + r) = *(buffer + i);"]
1923 -> 1924 [label="i = (i + 1U) & ((1U << 13) - 1U);"]
1924 -> 1925 [label="r = r + 1U;"]
1925 -> 1926 [label="[!(r == count)]"]
1925 -> 1927 [label="[r == count]"]
1927 -> 1906 [label="return r;"]
1926 -> 1916 [label=""]}
subgraph cluster_do_exit {
label="do_exit()"
5050 -> 5051 [label="Function start dummy edge"]
5051 -> 5052 [label="[!(in_exit != 0)]"]
5051 -> 5053 [label="[in_exit != 0]"]
5053 -> 5054 [label="exit(exitcode);"]
5054 -> 5052 [label=""]
5052 -> 5055 [label="in_exit = 1;"]
5055 -> 5056 [label="[!(((unsigned int)env) != ((unsigned int)((void *)0)))]"]
5055 -> 5057 [label="[((unsigned int)env) != ((unsigned int)((void *)0))]"]
5057 -> 5058 [label="free((void *)env);"]
5058 -> 5059 [label="env = (char *)((void *)0);"]
5059 -> 5056 [label=""]
5056 -> 5060 [label="[!(((unsigned int)args) != ((unsigned int)((void *)0)))]"]
5056 -> 5061 [label="[((unsigned int)args) != ((unsigned int)((void *)0))]"]
5061 -> 5062 [label="free((void *)((char *)args));"]
5062 -> 5063 [label="args = (char **)((void *)0);"]
5063 -> 5060 [label=""]
5060 -> 5064 [label="[!(((unsigned int)inbuf) != ((unsigned int)((void *)0)))]"]
5060 -> 5065 [label="[((unsigned int)inbuf) != ((unsigned int)((void *)0))]"]
5065 -> 5066 [label="free((void *)inbuf);"]
5066 -> 5067 [label="inbuf = (uch *)((void *)0);"]
5067 -> 5064 [label=""]
5064 -> 5068 [label="[!(((unsigned int)outbuf) != ((unsigned int)((void *)0)))]"]
5064 -> 5069 [label="[((unsigned int)outbuf) != ((unsigned int)((void *)0))]"]
5069 -> 5070 [label="free((void *)outbuf);"]
5070 -> 5071 [label="outbuf = (uch *)((void *)0);"]
5071 -> 5068 [label=""]
5068 -> 5072 [label="[!(((unsigned int)d_buf) != ((unsigned int)((void *)0)))]"]
5068 -> 5073 [label="[((unsigned int)d_buf) != ((unsigned int)((void *)0))]"]
5073 -> 5074 [label="free((void *)d_buf);"]
5074 -> 5075 [label="d_buf = (ush *)((void *)0);"]
5075 -> 5072 [label=""]
5072 -> 5076 [label="[!(((unsigned int)window) != ((unsigned int)((void *)0)))]"]
5072 -> 5077 [label="[((unsigned int)window) != ((unsigned int)((void *)0))]"]
5077 -> 5078 [label="free((void *)window);"]
5078 -> 5079 [label="window = (uch *)((void *)0);"]
5079 -> 5076 [label=""]
5076 -> 5080 [label="[!(((unsigned int)prev) != ((unsigned int)((void *)0)))]"]
5076 -> 5081 [label="[((unsigned int)prev) != ((unsigned int)((void *)0))]"]
5081 -> 5082 [label="free((void *)prev);"]
5082 -> 5083 [label="prev = (ush *)((void *)0);"]
5083 -> 5080 [label=""]
5080 -> 5084 [label="exit(exitcode);"]
5084 -> 5049 [label="default return"]}
subgraph cluster_bi_windup {
label="bi_windup()"
2093 -> 2094 [label="Function start dummy edge"]
2094 -> 2096 [label="unsigned int tmp;"]
2096 -> 2098 [label="unsigned int tmp___0;"]
2098 -> 2100 [label="unsigned int tmp___1;"]
2100 -> 2102 [label="unsigned int tmp___2;"]
2102 -> 2104 [label="unsigned int tmp___3;"]
2104 -> 2107 [label="[!(bi_valid > 8)]"]
2104 -> 2106 [label="[bi_valid > 8]"]
2106 -> 2110 [label="[!(outcnt < 16382U)]"]
2106 -> 2109 [label="[outcnt < 16382U]"]
2109 -> 2111 [label="tmp = outcnt;"]
2111 -> 2112 [label="outcnt = outcnt + 1U;"]
2112 -> 2113 [label="*(outbuf + tmp) = (unsigned char)(((int)bi_buf) & 255);"]
2113 -> 2114 [label="tmp___0 = outcnt;"]
2114 -> 2115 [label="outcnt = outcnt + 1U;"]
2115 -> 2116 [label="*(outbuf + tmp___0) = (unsigned char)(((int)bi_buf) >> 8);"]
2116 -> 2108 [label=""]
2108 -> 2105 [label=""]
2105 -> 2137 [label="bi_buf = (unsigned short)0;"]
2137 -> 2138 [label="bi_valid = 0;"]
2138 -> 2092 [label="return;"]
2110 -> 2117 [label="tmp___1 = outcnt;"]
2117 -> 2118 [label="outcnt = outcnt + 1U;"]
2118 -> 2119 [label="*(outbuf + tmp___1) = (unsigned char)(((int)bi_buf) & 255);"]
2119 -> 2120 [label="[!(outcnt == 16384U)]"]
2119 -> 2121 [label="[outcnt == 16384U]"]
2121 -> 2122 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
2122 -> 2120 [label=""]
2120 -> 2123 [label="tmp___2 = outcnt;"]
2123 -> 2124 [label="outcnt = outcnt + 1U;"]
2124 -> 2125 [label="*(outbuf + tmp___2) = (unsigned char)(((int)bi_buf) >> 8);"]
2125 -> 2126 [label="[!(outcnt == 16384U)]"]
2125 -> 2127 [label="[outcnt == 16384U]"]
2127 -> 2128 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
2128 -> 2108 [label=""]
2126 -> 2108 [label=""]
2107 -> 2129 [label="[!(bi_valid > 0)]"]
2107 -> 2130 [label="[bi_valid > 0]"]
2130 -> 2131 [label="tmp___3 = outcnt;"]
2131 -> 2132 [label="outcnt = outcnt + 1U;"]
2132 -> 2133 [label="*(outbuf + tmp___3) = (unsigned char)bi_buf;"]
2133 -> 2134 [label="[!(outcnt == 16384U)]"]
2133 -> 2135 [label="[outcnt == 16384U]"]
2135 -> 2136 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
2136 -> 2105 [label=""]
2134 -> 2105 [label=""]
2129 -> 2105 [label=""]}
subgraph cluster_inflate_dynamic {
label="inflate_dynamic()"
5812 -> 5813 [label="Function start dummy edge"]
5813 -> 5815 [label="int i___0;"]
5815 -> 5817 [label="unsigned int j___0;"]
5817 -> 5819 [label="unsigned int l;"]
5819 -> 5821 [label="unsigned int m;"]
5821 -> 5823 [label="unsigned int n;"]
5823 -> 5825 [label="struct huft *tl;"]
5825 -> 5827 [label="struct huft *td;"]
5827 -> 5829 [label="int bl;"]
5829 -> 5831 [label="int bd;"]
5831 -> 5833 [label="unsigned int nb;"]
5833 -> 5835 [label="unsigned int nl;"]
5835 -> 5837 [label="unsigned int nd;"]
5837 -> 5839 [label="unsigned int ll[316];"]
5839 -> 5841 [label="ulg b;"]
5841 -> 5843 [label="unsigned int k;"]
5843 -> 5845 [label="unsigned int tmp;"]
5845 -> 5847 [label="int tmp___0;"]
5847 -> 5849 [label="int tmp___1;"]
5849 -> 5851 [label="unsigned int tmp___2;"]
5851 -> 5853 [label="int tmp___3;"]
5853 -> 5855 [label="int tmp___4;"]
5855 -> 5857 [label="unsigned int tmp___5;"]
5857 -> 5859 [label="int tmp___6;"]
5859 -> 5861 [label="int tmp___7;"]
5861 -> 5863 [label="unsigned int tmp___8;"]
5863 -> 5865 [label="int tmp___9;"]
5865 -> 5867 [label="int tmp___10;"]
5867 -> 5869 [label="unsigned int tmp___11;"]
5869 -> 5871 [label="int tmp___12;"]
5871 -> 5873 [label="int tmp___13;"]
5873 -> 5875 [label="int tmp___14;"]
5875 -> 5877 [label="unsigned int tmp___15;"]
5877 -> 5879 [label="int tmp___16;"]
5879 -> 5881 [label="int tmp___17;"]
5881 -> 5883 [label="int tmp___18;"]
5883 -> 5885 [label="unsigned int tmp___19;"]
5885 -> 5887 [label="unsigned int tmp___20;"]
5887 -> 5889 [label="int tmp___21;"]
5889 -> 5891 [label="int tmp___22;"]
5891 -> 5893 [label="int tmp___23;"]
5893 -> 5895 [label="unsigned int tmp___24;"]
5895 -> 5897 [label="unsigned int tmp___25;"]
5897 -> 5899 [label="int tmp___26;"]
5899 -> 5901 [label="int tmp___27;"]
5901 -> 5903 [label="int tmp___28;"]
5903 -> 5905 [label="unsigned int tmp___29;"]
5905 -> 5907 [label="struct _reent *tmp___30;"]
5907 -> 5909 [label="struct _reent *tmp___31;"]
5909 -> 5911 [label="int tmp___32;"]
5911 -> 5912 [label="b = bb;"]
5912 -> 5913 [label="k = bk;"]
5913 -> 5914 [label="while"]
5914 -> 5916 [label="[!(k < 5U)]"]
5914 -> 5915 [label="[k < 5U]"]
5915 -> 5919 [label="[!(inptr < insize)]"]
5915 -> 5918 [label="[inptr < insize]"]
5918 -> 5920 [label="tmp = inptr;"]
5920 -> 5921 [label="inptr = inptr + 1U;"]
5921 -> 5922 [label="tmp___1 = (int)(*(inbuf + tmp));"]
5922 -> 5917 [label=""]
5917 -> 5925 [label="b = b | (((unsigned long)((unsigned char)tmp___1)) << k);"]
5925 -> 5926 [label="k = k + 8U;"]
5926 -> 5914 [label=""]
5919 -> 5923 [label="tmp___0 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5923 -> 5924 [label="tmp___1 = tmp___0;"]
5924 -> 5917 [label=""]
5916 -> 5927 [label="nl = 257U + (((unsigned int)b) & 31U);"]
5927 -> 5928 [label="b = b >> 5;"]
5928 -> 5929 [label="k = k - 5U;"]
5929 -> 5930 [label="while"]
5930 -> 5932 [label="[!(k < 5U)]"]
5930 -> 5931 [label="[k < 5U]"]
5931 -> 5935 [label="[!(inptr < insize)]"]
5931 -> 5934 [label="[inptr < insize]"]
5934 -> 5936 [label="tmp___2 = inptr;"]
5936 -> 5937 [label="inptr = inptr + 1U;"]
5937 -> 5938 [label="tmp___4 = (int)(*(inbuf + tmp___2));"]
5938 -> 5933 [label=""]
5933 -> 5941 [label="b = b | (((unsigned long)((unsigned char)tmp___4)) << k);"]
5941 -> 5942 [label="k = k + 8U;"]
5942 -> 5930 [label=""]
5935 -> 5939 [label="tmp___3 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5939 -> 5940 [label="tmp___4 = tmp___3;"]
5940 -> 5933 [label=""]
5932 -> 5943 [label="nd = 1U + (((unsigned int)b) & 31U);"]
5943 -> 5944 [label="b = b >> 5;"]
5944 -> 5945 [label="k = k - 5U;"]
5945 -> 5946 [label="while"]
5946 -> 5948 [label="[!(k < 4U)]"]
5946 -> 5947 [label="[k < 4U]"]
5947 -> 5951 [label="[!(inptr < insize)]"]
5947 -> 5950 [label="[inptr < insize]"]
5950 -> 5952 [label="tmp___5 = inptr;"]
5952 -> 5953 [label="inptr = inptr + 1U;"]
5953 -> 5954 [label="tmp___7 = (int)(*(inbuf + tmp___5));"]
5954 -> 5949 [label=""]
5949 -> 5957 [label="b = b | (((unsigned long)((unsigned char)tmp___7)) << k);"]
5957 -> 5958 [label="k = k + 8U;"]
5958 -> 5946 [label=""]
5951 -> 5955 [label="tmp___6 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5955 -> 5956 [label="tmp___7 = tmp___6;"]
5956 -> 5949 [label=""]
5948 -> 5959 [label="nb = 4U + (((unsigned int)b) & 15U);"]
5959 -> 5960 [label="b = b >> 4;"]
5960 -> 5961 [label="k = k - 4U;"]
5961 -> 5964 [label="[!(nl > 286U)]"]
5961 -> 5963 [label="[nl > 286U]"]
5963 -> 5811 [label="return 1;"]
6154 -> 6150 [label=""]
6150 -> 6155 [label="huft_free(tl);" style="dotted" arrowhead="empty"]
6155 -> 5811 [label="return i___0;"]
6162 -> 5811 [label="return 0;"]
6161 -> 6162 [label="huft_free(td);" style="dotted" arrowhead="empty"]
6144 -> 6140 [label=""]
6140 -> 5811 [label="return i___0;"]
6133 -> 6134 [label="bb = b;"]
6134 -> 6135 [label="bk = k;"]
6135 -> 6136 [label="bl = lbits;"]
6136 -> 6137 [label="i___0 = huft_build(ll, nl, 257U, cplens, cplext, &tl, &bl);" style="dotted" arrowhead="empty"]
6147 -> 6148 [label="[!(i___0 != 0)]"]
6147 -> 6149 [label="[i___0 != 0]"]
6149 -> 6150 [label="[!(i___0 == 1)]"]
6149 -> 6151 [label="[i___0 == 1]"]
6151 -> 6152 [label="tmp___31 = __getreent();"]
6152 -> 6153 [label="fprintf(tmp___31->_stderr, \" incomplete distance tree\n\");"]
6153 -> 6154 [label="huft_free(td);" style="dotted" arrowhead="empty"]
6148 -> 6157 [label="tmp___32 = inflate_codes(tl, td, bl, bd);" style="dotted" arrowhead="empty"]
6157 -> 6158 [label="[!(tmp___32 != 0)]"]
6157 -> 6159 [label="[tmp___32 != 0]"]
6159 -> 5811 [label="return 1;"]
6158 -> 6161 [label="huft_free(tl);" style="dotted" arrowhead="empty"]
6137 -> 6138 [label="[!(i___0 != 0)]"]
6137 -> 6139 [label="[i___0 != 0]"]
6139 -> 6140 [label="[!(i___0 == 1)]"]
6139 -> 6141 [label="[i___0 == 1]"]
6141 -> 6142 [label="tmp___30 = __getreent();"]
6142 -> 6143 [label="fprintf(tmp___30->_stderr, \" incomplete literal tree\n\");"]
6143 -> 6144 [label="huft_free(tl);" style="dotted" arrowhead="empty"]
6138 -> 6146 [label="bd = dbits;"]
6146 -> 6147 [label="i___0 = huft_build(ll + nl, nd, 0U, cpdist, cpdext, &td, &bd);" style="dotted" arrowhead="empty"]
5996 -> 5997 [label="[!(i___0 != 0)]"]
5996 -> 5998 [label="[i___0 != 0]"]
5998 -> 5999 [label="[!(i___0 == 1)]"]
5998 -> 6000 [label="[i___0 == 1]"]
6000 -> 6001 [label="huft_free(tl);" style="dotted" arrowhead="empty"]
6001 -> 5999 [label=""]
5999 -> 5811 [label="return i___0;"]
5997 -> 6003 [label="n = nl + nd;"]
6003 -> 6004 [label="m = (unsigned int)(mask_bits[bl]);"]
6004 -> 6005 [label="l = 0U;"]
6005 -> 6006 [label="i___0 = (int)l;"]
6006 -> 6007 [label="while"]
6007 -> 6009 [label="[!(((unsigned int)i___0) < n)]"]
6007 -> 6008 [label="[((unsigned int)i___0) < n]"]
6008 -> 6010 [label="while"]
6010 -> 6012 [label="[!(k < ((unsigned int)bl))]"]
6010 -> 6011 [label="[k < ((unsigned int)bl)]"]
6011 -> 6015 [label="[!(inptr < insize)]"]
6011 -> 6014 [label="[inptr < insize]"]
6014 -> 6016 [label="tmp___11 = inptr;"]
6016 -> 6017 [label="inptr = inptr + 1U;"]
6017 -> 6018 [label="tmp___13 = (int)(*(inbuf + tmp___11));"]
6018 -> 6013 [label=""]
6013 -> 6021 [label="b = b | (((unsigned long)((unsigned char)tmp___13)) << k);"]
6021 -> 6022 [label="k = k + 8U;"]
6022 -> 6010 [label=""]
6015 -> 6019 [label="tmp___12 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
6019 -> 6020 [label="tmp___13 = tmp___12;"]
6020 -> 6013 [label=""]
6012 -> 6023 [label="td = tl + (((unsigned int)b) & m);"]
6023 -> 6024 [label="j___0 = (unsigned int)(td->b);"]
6024 -> 6025 [label="b = b >> j___0;"]
6025 -> 6026 [label="k = k - j___0;"]
6026 -> 6027 [label="j___0 = (unsigned int)(td->v.n);"]
6027 -> 6030 [label="[!(j___0 < 16U)]"]
6027 -> 6029 [label="[j___0 < 16U]"]
6029 -> 6031 [label="tmp___14 = i___0;"]
6031 -> 6032 [label="i___0 = i___0 + 1;"]
6032 -> 6033 [label="l = j___0;"]
6033 -> 6034 [label="ll[tmp___14] = l;"]
6034 -> 6028 [label=""]
6028 -> 6007 [label=""]
6030 -> 6037 [label="[!(j___0 == 16U)]"]
6030 -> 6036 [label="[j___0 == 16U]"]
6036 -> 6038 [label="while"]
6038 -> 6040 [label="[!(k < 2U)]"]
6038 -> 6039 [label="[k < 2U]"]
6039 -> 6043 [label="[!(inptr < insize)]"]
6039 -> 6042 [label="[inptr < insize]"]
6042 -> 6044 [label="tmp___15 = inptr;"]
6044 -> 6045 [label="inptr = inptr + 1U;"]
6045 -> 6046 [label="tmp___17 = (int)(*(inbuf + tmp___15));"]
6046 -> 6041 [label=""]
6041 -> 6049 [label="b = b | (((unsigned long)((unsigned char)tmp___17)) << k);"]
6049 -> 6050 [label="k = k + 8U;"]
6050 -> 6038 [label=""]
6043 -> 6047 [label="tmp___16 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
6047 -> 6048 [label="tmp___17 = tmp___16;"]
6048 -> 6041 [label=""]
6040 -> 6051 [label="j___0 = 3U + (((unsigned int)b) & 3U);"]
6051 -> 6052 [label="b = b >> 2;"]
6052 -> 6053 [label="k = k - 2U;"]
6053 -> 6054 [label="[!((((unsigned int)i___0) + j___0) > n)]"]
6053 -> 6055 [label="[(((unsigned int)i___0) + j___0) > n]"]
6055 -> 5811 [label="return 1;"]
6054 -> 6057 [label="while"]
6057 -> 6058 [label=""]
6058 -> 6060 [label="tmp___19 = j___0;"]
6060 -> 6061 [label="j___0 = j___0 - 1U;"]
6061 -> 6062 [label="[!(!tmp___19)]"]
6061 -> 6063 [label="[!tmp___19]"]
6063 -> 6059 [label="break"]
6059 -> 6028 [label=""]
6062 -> 6065 [label="tmp___18 = i___0;"]
6065 -> 6066 [label="i___0 = i___0 + 1;"]
6066 -> 6067 [label="ll[tmp___18] = l;"]
6067 -> 6057 [label=""]
6037 -> 6070 [label="[!(j___0 == 17U)]"]
6037 -> 6069 [label="[j___0 == 17U]"]
6069 -> 6071 [label="while"]
6071 -> 6073 [label="[!(k < 3U)]"]
6071 -> 6072 [label="[k < 3U]"]
6072 -> 6076 [label="[!(inptr < insize)]"]
6072 -> 6075 [label="[inptr < insize]"]
6075 -> 6077 [label="tmp___20 = inptr;"]
6077 -> 6078 [label="inptr = inptr + 1U;"]
6078 -> 6079 [label="tmp___22 = (int)(*(inbuf + tmp___20));"]
6079 -> 6074 [label=""]
6074 -> 6082 [label="b = b | (((unsigned long)((unsigned char)tmp___22)) << k);"]
6082 -> 6083 [label="k = k + 8U;"]
6083 -> 6071 [label=""]
6076 -> 6080 [label="tmp___21 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
6080 -> 6081 [label="tmp___22 = tmp___21;"]
6081 -> 6074 [label=""]
6073 -> 6084 [label="j___0 = 3U + (((unsigned int)b) & 7U);"]
6084 -> 6085 [label="b = b >> 3;"]
6085 -> 6086 [label="k = k - 3U;"]
6086 -> 6087 [label="[!((((unsigned int)i___0) + j___0) > n)]"]
6086 -> 6088 [label="[(((unsigned int)i___0) + j___0) > n]"]
6088 -> 5811 [label="return 1;"]
6087 -> 6090 [label="while"]
6090 -> 6091 [label=""]
6091 -> 6093 [label="tmp___24 = j___0;"]
6093 -> 6094 [label="j___0 = j___0 - 1U;"]
6094 -> 6095 [label="[!(!tmp___24)]"]
6094 -> 6096 [label="[!tmp___24]"]
6096 -> 6092 [label="break"]
6092 -> 6101 [label="l = 0U;"]
6101 -> 6028 [label=""]
6095 -> 6098 [label="tmp___23 = i___0;"]
6098 -> 6099 [label="i___0 = i___0 + 1;"]
6099 -> 6100 [label="ll[tmp___23] = 0U;"]
6100 -> 6090 [label=""]
6070 -> 6102 [label="while"]
6102 -> 6104 [label="[!(k < 7U)]"]
6102 -> 6103 [label="[k < 7U]"]
6103 -> 6107 [label="[!(inptr < insize)]"]
6103 -> 6106 [label="[inptr < insize]"]
6106 -> 6108 [label="tmp___25 = inptr;"]
6108 -> 6109 [label="inptr = inptr + 1U;"]
6109 -> 6110 [label="tmp___27 = (int)(*(inbuf + tmp___25));"]
6110 -> 6105 [label=""]
6105 -> 6113 [label="b = b | (((unsigned long)((unsigned char)tmp___27)) << k);"]
6113 -> 6114 [label="k = k + 8U;"]
6114 -> 6102 [label=""]
6107 -> 6111 [label="tmp___26 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
6111 -> 6112 [label="tmp___27 = tmp___26;"]
6112 -> 6105 [label=""]
6104 -> 6115 [label="j___0 = 11U + (((unsigned int)b) & 127U);"]
6115 -> 6116 [label="b = b >> 7;"]
6116 -> 6117 [label="k = k - 7U;"]
6117 -> 6118 [label="[!((((unsigned int)i___0) + j___0) > n)]"]
6117 -> 6119 [label="[(((unsigned int)i___0) + j___0) > n]"]
6119 -> 5811 [label="return 1;"]
6118 -> 6121 [label="while"]
6121 -> 6122 [label=""]
6122 -> 6124 [label="tmp___29 = j___0;"]
6124 -> 6125 [label="j___0 = j___0 - 1U;"]
6125 -> 6126 [label="[!(!tmp___29)]"]
6125 -> 6127 [label="[!tmp___29]"]
6127 -> 6123 [label="break"]
6123 -> 6132 [label="l = 0U;"]
6132 -> 6028 [label=""]
6126 -> 6129 [label="tmp___28 = i___0;"]
6129 -> 6130 [label="i___0 = i___0 + 1;"]
6130 -> 6131 [label="ll[tmp___28] = 0U;"]
6131 -> 6121 [label=""]
6009 -> 6133 [label="huft_free(tl);" style="dotted" arrowhead="empty"]
5964 -> 5966 [label="[!(nd > 30U)]"]
5964 -> 5967 [label="[nd > 30U]"]
5967 -> 5811 [label="return 1;"]
5966 -> 5962 [label=""]
5962 -> 5969 [label="j___0 = 0U;"]
5969 -> 5970 [label="while"]
5970 -> 5972 [label="[!(j___0 < nb)]"]
5970 -> 5971 [label="[j___0 < nb]"]
5971 -> 5973 [label="while"]
5973 -> 5975 [label="[!(k < 3U)]"]
5973 -> 5974 [label="[k < 3U]"]
5974 -> 5978 [label="[!(inptr < insize)]"]
5974 -> 5977 [label="[inptr < insize]"]
5977 -> 5979 [label="tmp___8 = inptr;"]
5979 -> 5980 [label="inptr = inptr + 1U;"]
5980 -> 5981 [label="tmp___10 = (int)(*(inbuf + tmp___8));"]
5981 -> 5976 [label=""]
5976 -> 5984 [label="b = b | (((unsigned long)((unsigned char)tmp___10)) << k);"]
5984 -> 5985 [label="k = k + 8U;"]
5985 -> 5973 [label=""]
5978 -> 5982 [label="tmp___9 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5982 -> 5983 [label="tmp___10 = tmp___9;"]
5983 -> 5976 [label=""]
5975 -> 5986 [label="ll[border[j___0]] = ((unsigned int)b) & 7U;"]
5986 -> 5987 [label="b = b >> 3;"]
5987 -> 5988 [label="k = k - 3U;"]
5988 -> 5989 [label="j___0 = j___0 + 1U;"]
5989 -> 5970 [label=""]
5972 -> 5990 [label="while"]
5990 -> 5992 [label="[!(j___0 < 19U)]"]
5990 -> 5991 [label="[j___0 < 19U]"]
5991 -> 5993 [label="ll[border[j___0]] = 0U;"]
5993 -> 5994 [label="j___0 = j___0 + 1U;"]
5994 -> 5990 [label=""]
5992 -> 5995 [label="bl = 7;"]
5995 -> 5996 [label="i___0 = huft_build(ll, 19U, 19U, (ush *)((void *)0), (ush *)((void *)0), &tl, &bl);" style="dotted" arrowhead="empty"]}
subgraph cluster_build_tree1 {
label="build_tree1()"
108 -> 109 [label="Function start dummy edge"]
109 -> 111 [label="int nodes;"]
111 -> 113 [label="int len;"]
113 -> 115 [label="uch *prefixp;"]
115 -> 117 [label="int prefixes;"]
117 -> 119 [label="int tmp;"]
119 -> 120 [label="nodes = 0;"]
120 -> 121 [label="len = max_len;"]
121 -> 122 [label="while"]
122 -> 124 [label="[!(len >= 1)]"]
122 -> 123 [label="[len >= 1]"]
123 -> 125 [label="nodes = nodes >> 1;"]
125 -> 126 [label="parents[len] = nodes;"]
126 -> 127 [label="lit_base[len] = (lit_base[len]) - nodes;"]
127 -> 128 [label="nodes = nodes + (leaves[len]);"]
128 -> 129 [label="len = len - 1;"]
129 -> 122 [label=""]
124 -> 132 [label="[!(max_len <= 12)]"]
124 -> 131 [label="[max_len <= 12]"]
131 -> 133 [label="peek_bits = max_len;"]
133 -> 130 [label=""]
130 -> 135 [label="prefixp = outbuf + (1 << peek_bits);"]
135 -> 136 [label="len = 1;"]
136 -> 137 [label="while"]
137 -> 139 [label="[!(len <= peek_bits)]"]
137 -> 138 [label="[len <= peek_bits]"]
138 -> 140 [label="prefixes = (leaves[len]) << (peek_bits - len);"]
140 -> 141 [label="while"]
141 -> 142 [label=""]
142 -> 144 [label="tmp = prefixes;"]
144 -> 145 [label="prefixes = prefixes - 1;"]
145 -> 146 [label="[!(!tmp)]"]
145 -> 147 [label="[!tmp]"]
147 -> 143 [label="break"]
143 -> 151 [label="len = len + 1;"]
151 -> 137 [label=""]
146 -> 149 [label="prefixp = prefixp - 1;"]
149 -> 150 [label="*prefixp = (unsigned char)len;"]
150 -> 141 [label=""]
139 -> 152 [label="while"]
152 -> 154 [label="[!(((unsigned int)prefixp) > ((unsigned int)outbuf))]"]
152 -> 153 [label="[((unsigned int)prefixp) > ((unsigned int)outbuf)]"]
153 -> 155 [label="prefixp = prefixp - 1;"]
155 -> 156 [label="*prefixp = (unsigned char)0;"]
156 -> 152 [label=""]
154 -> 107 [label="return;"]
132 -> 134 [label="peek_bits = 12;"]
134 -> 130 [label=""]}
subgraph cluster_add_envopt {
label="add_envopt()"
1002 -> 1003 [label="Function start dummy edge"]
1003 -> 1005 [label="char *p;"]
1005 -> 1007 [label="char **oargv;"]
1007 -> 1009 [label="char **nargv;"]
1009 -> 1011 [label="int oargc;"]
1011 -> 1013 [label="int nargc;"]
1013 -> 1015 [label="char *tmp;"]
1015 -> 1017 [label="size_t tmp___0;"]
1017 -> 1019 [label="voidp tmp___1;"]
1019 -> 1021 [label="size_t tmp___2;"]
1021 -> 1023 [label="size_t tmp___3;"]
1023 -> 1025 [label="char *tmp___4;"]
1025 -> 1027 [label="void *tmp___5;"]
1027 -> 1029 [label="int tmp___6;"]
1029 -> 1031 [label="char **tmp___7;"]
1031 -> 1033 [label="char **tmp___8;"]
1033 -> 1035 [label="size_t tmp___9;"]
1035 -> 1037 [label="char **tmp___10;"]
1037 -> 1039 [label="char *tmp___11;"]
1039 -> 1041 [label="char **tmp___12;"]
1041 -> 1043 [label="char **tmp___13;"]
1043 -> 1045 [label="int tmp___14;"]
1045 -> 1046 [label="oargc = *argcp;"]
1046 -> 1047 [label="nargc = 0;"]
1047 -> 1048 [label="tmp = getenv((const char *)env___0);"]
1048 -> 1049 [label="env___0 = tmp;"]
1049 -> 1050 [label="[!(((unsigned int)env___0) == ((unsigned int)((void *)0)))]"]
1049 -> 1051 [label="[((unsigned int)env___0) == ((unsigned int)((void *)0))]"]
1051 -> 1001 [label="return (char *)((void *)0);"]
1090 -> 1088 [label=""]
1088 -> 1091 [label="tmp___7 = nargv;"]
1091 -> 1092 [label="nargv = nargv + 1;"]
1092 -> 1093 [label="tmp___8 = oargv;"]
1093 -> 1094 [label="oargv = oargv + 1;"]
1094 -> 1095 [label="*tmp___7 = *tmp___8;"]
1095 -> 1096 [label="p = env___0;"]
1096 -> 1097 [label="while"]
1097 -> 1099 [label="[!(nargc > 0)]"]
1097 -> 1098 [label="[nargc > 0]"]
1098 -> 1100 [label="tmp___9 = strspn((const char *)p, \" \t\");"]
1100 -> 1101 [label="p = p + tmp___9;"]
1101 -> 1102 [label="tmp___10 = nargv;"]
1102 -> 1103 [label="nargv = nargv + 1;"]
1103 -> 1104 [label="*tmp___10 = p;"]
1104 -> 1105 [label="while"]
1105 -> 1106 [label=""]
1106 -> 1108 [label="tmp___11 = p;"]
1108 -> 1109 [label="p = p + 1;"]
1109 -> 1110 [label="[!(!(*tmp___11))]"]
1109 -> 1111 [label="[!(*tmp___11)]"]
1111 -> 1107 [label="break"]
1107 -> 1113 [label="nargc = nargc - 1;"]
1113 -> 1097 [label=""]
1110 -> 1105 [label=""]
1099 -> 1114 [label="while"]
1114 -> 1115 [label=""]
1115 -> 1117 [label="tmp___14 = oargc;"]
1117 -> 1118 [label="oargc = oargc - 1;"]
1118 -> 1119 [label="[!(!tmp___14)]"]
1118 -> 1120 [label="[!tmp___14]"]
1120 -> 1116 [label="break"]
1116 -> 1127 [label="*nargv = (char *)((void *)0);"]
1127 -> 1001 [label="return env___0;"]
1119 -> 1122 [label="tmp___12 = nargv;"]
1122 -> 1123 [label="nargv = nargv + 1;"]
1123 -> 1124 [label="tmp___13 = oargv;"]
1124 -> 1125 [label="oargv = oargv + 1;"]
1125 -> 1126 [label="*tmp___12 = *tmp___13;"]
1126 -> 1114 [label=""]
1083 -> 1081 [label=""]
1081 -> 1084 [label="oargv = *argvp;"]
1084 -> 1085 [label="*argvp = nargv;"]
1085 -> 1086 [label="tmp___6 = oargc;"]
1086 -> 1087 [label="oargc = oargc - 1;"]
1087 -> 1088 [label="[!(tmp___6 < 0)]"]
1087 -> 1089 [label="[tmp___6 < 0]"]
1089 -> 1090 [label="error(\"argc<=0\");" style="dotted" arrowhead="empty"]
1054 -> 1055 [label="p = (char *)tmp___1;"]
1055 -> 1056 [label="env___0 = strcpy(p, (const char *)env___0);"]
1056 -> 1057 [label="p = env___0;"]
1057 -> 1058 [label="while"]
1058 -> 1060 [label="[!((*p) != 0)]"]
1058 -> 1059 [label="[(*p) != 0]"]
1059 -> 1061 [label="tmp___2 = strspn((const char *)p, \" \t\");"]
1061 -> 1062 [label="p = p + tmp___2;"]
1062 -> 1063 [label="[!(((int)(*p)) == 0)]"]
1062 -> 1064 [label="[((int)(*p)) == 0]"]
1064 -> 1060 [label="break"]
1060 -> 1074 [label="[!(nargc == 0)]"]
1060 -> 1075 [label="[nargc == 0]"]
1075 -> 1076 [label="free((void *)env___0);"]
1076 -> 1001 [label="return (char *)((void *)0);"]
1074 -> 1078 [label="*argcp = (*argcp) + nargc;"]
1078 -> 1079 [label="tmp___5 = calloc((unsigned int)((*argcp) + 1), sizeof(char *));"]
1079 -> 1080 [label="nargv = (char **)tmp___5;"]
1080 -> 1081 [label="[!(((unsigned int)nargv) == ((unsigned int)((void *)0)))]"]
1080 -> 1082 [label="[((unsigned int)nargv) == ((unsigned int)((void *)0))]"]
1082 -> 1083 [label="error(\"out of memory\");" style="dotted" arrowhead="empty"]
1063 -> 1066 [label="tmp___3 = strcspn((const char *)p, \" \t\");"]
1066 -> 1067 [label="p = p + tmp___3;"]
1067 -> 1068 [label="[!((*p) != 0)]"]
1067 -> 1069 [label="[(*p) != 0]"]
1069 -> 1070 [label="tmp___4 = p;"]
1070 -> 1071 [label="p = p + 1;"]
1071 -> 1072 [label="*tmp___4 = (char)'\x0';"]
1072 -> 1068 [label=""]
1068 -> 1073 [label="nargc = nargc + 1;"]
1073 -> 1058 [label=""]
1050 -> 1053 [label="tmp___0 = strlen((const char *)env___0);"]
1053 -> 1054 [label="tmp___1 = xmalloc(tmp___0 + 1U);" style="dotted" arrowhead="empty"]}
subgraph cluster_spec_load {
label="spec_load()"
6406 -> 6407 [label="[!(rc == 0)]"]
6406 -> 6408 [label="[rc == 0]"]
6408 -> 6405 [label="break"]
6405 -> 6418 [label="close(fd);"]
6418 -> 6419 [label="while"]
6419 -> 6421 [label="[!(((spec_fd[num]).len) < size)]"]
6419 -> 6420 [label="[((spec_fd[num]).len) < size]"]
6420 -> 6422 [label="tmp___4 = size - ((spec_fd[num]).len);"]
6422 -> 6423 [label="[!(tmp___4 > ((spec_fd[num]).len))]"]
6422 -> 6424 [label="[tmp___4 > ((spec_fd[num]).len)]"]
6424 -> 6425 [label="tmp___4 = (spec_fd[num]).len;"]
6425 -> 6423 [label=""]
6423 -> 6426 [label="[!(3 < dbglvl)]"]
6423 -> 6427 [label="[3 < dbglvl]"]
6427 -> 6428 [label="printf(\"Duplicating %d bytes\n\", tmp___4);"]
6428 -> 6426 [label=""]
6426 -> 6429 [label="memcpy((void *)(((spec_fd[num]).buf) + ((spec_fd[num]).len)), (const void *)((spec_fd[num]).buf), (unsigned int)tmp___4);"]
6429 -> 6430 [label="(spec_fd[num]).len = ((spec_fd[num]).len) + tmp___4;"]
6430 -> 6419 [label=""]
6421 -> 6371 [label="return 0;"]
6407 -> 6410 [label="[!(rc < 0)]"]
6407 -> 6411 [label="[rc < 0]"]
6411 -> 6412 [label="tmp___2 = strerror(errno);"]
6412 -> 6413 [label="tmp___3 = __getreent();"]
6413 -> 6414 [label="fprintf(tmp___3->_stderr, \"Error reading from %s: %s\n\", filename, tmp___2);"]
6414 -> 6415 [label="exit(1);"]
6415 -> 6410 [label=""]
6410 -> 6416 [label="(spec_fd[num]).len = ((spec_fd[num]).len) + rc;"]
6416 -> 6417 [label="i___0 = i___0 + rc;"]
6417 -> 6403 [label=""]
6403 -> 6405 [label="[!(i___0 < size)]"]
6403 -> 6404 [label="[i___0 < size]"]
6404 -> 6406 [label="rc = spec_read(fd, ((spec_fd[num]).buf) + i___0, 131072);" style="dotted" arrowhead="empty"]}
subgraph cluster_spec_getc {
label="spec_getc()"
}
subgraph cluster_strlwr {
label="strlwr()"
947 -> 948 [label="Function start dummy edge"]
948 -> 950 [label="char *t;"]
950 -> 952 [label="int tmp___0;"]
952 -> 953 [label="t = s;"]
953 -> 954 [label="while"]
954 -> 956 [label="[!((*t) != 0)]"]
954 -> 955 [label="[(*t) != 0]"]
955 -> 957 [label="tmp___0 = isupper((int)(*t));"]
957 -> 960 [label="[!(tmp___0 != 0)]"]
957 -> 959 [label="[tmp___0 != 0]"]
959 -> 961 [label="*t = (char)((((int)(*t)) - 65) + 97);"]
961 -> 958 [label=""]
958 -> 963 [label="t = t + 1;"]
963 -> 954 [label=""]
960 -> 962 [label="*t = *t;"]
962 -> 958 [label=""]
956 -> 946 [label="return s;"]}
subgraph cluster_inflate_stored {
label="inflate_stored()"
5741 -> 5742 [label="w = 0U;"]
5742 -> 5738 [label=""]
5738 -> 5743 [label="b = b >> 8;"]
5743 -> 5744 [label="k = k - 8U;"]
5744 -> 5714 [label=""]
5714 -> 5715 [label=""]
5715 -> 5717 [label="tmp___9 = n;"]
5717 -> 5718 [label="n = n - 1U;"]
5718 -> 5719 [label="[!(!tmp___9)]"]
5718 -> 5720 [label="[!tmp___9]"]
5720 -> 5716 [label="break"]
5716 -> 5745 [label="outcnt = w;"]
5745 -> 5746 [label="bb = b;"]
5746 -> 5747 [label="bk = k;"]
5747 -> 5641 [label="return 0;"]
5719 -> 5722 [label="while"]
5722 -> 5724 [label="[!(k < 8U)]"]
5722 -> 5723 [label="[k < 8U]"]
5723 -> 5727 [label="[!(inptr < insize)]"]
5723 -> 5726 [label="[inptr < insize]"]
5726 -> 5728 [label="tmp___5 = inptr;"]
5728 -> 5729 [label="inptr = inptr + 1U;"]
5729 -> 5730 [label="tmp___7 = (int)(*(inbuf + tmp___5));"]
5730 -> 5725 [label=""]
5725 -> 5733 [label="b = b | (((unsigned long)((unsigned char)tmp___7)) << k);"]
5733 -> 5734 [label="k = k + 8U;"]
5734 -> 5722 [label=""]
5727 -> 5731 [label="tmp___6 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5731 -> 5732 [label="tmp___7 = tmp___6;"]
5732 -> 5725 [label=""]
5724 -> 5735 [label="tmp___8 = w;"]
5735 -> 5736 [label="w = w + 1U;"]
5736 -> 5737 [label="*(window + tmp___8) = (unsigned char)b;"]
5737 -> 5738 [label="[!(w == 32768U)]"]
5737 -> 5739 [label="[w == 32768U]"]
5739 -> 5740 [label="outcnt = w;"]
5740 -> 5741 [label="flush_window();" style="dotted" arrowhead="empty"]
5642 -> 5643 [label="Function start dummy edge"]
5643 -> 5645 [label="unsigned int n;"]
5645 -> 5647 [label="unsigned int w;"]
5647 -> 5649 [label="ulg b;"]
5649 -> 5651 [label="unsigned int k;"]
5651 -> 5653 [label="unsigned int tmp;"]
5653 -> 5655 [label="int tmp___0;"]
5655 -> 5657 [label="int tmp___1;"]
5657 -> 5659 [label="unsigned int tmp___2;"]
5659 -> 5661 [label="int tmp___3;"]
5661 -> 5663 [label="int tmp___4;"]
5663 -> 5665 [label="unsigned int tmp___5;"]
5665 -> 5667 [label="int tmp___6;"]
5667 -> 5669 [label="int tmp___7;"]
5669 -> 5671 [label="unsigned int tmp___8;"]
5671 -> 5673 [label="unsigned int tmp___9;"]
5673 -> 5674 [label="b = bb;"]
5674 -> 5675 [label="k = bk;"]
5675 -> 5676 [label="w = outcnt;"]
5676 -> 5677 [label="n = k & 7U;"]
5677 -> 5678 [label="b = b >> n;"]
5678 -> 5679 [label="k = k - n;"]
5679 -> 5680 [label="while"]
5680 -> 5682 [label="[!(k < 16U)]"]
5680 -> 5681 [label="[k < 16U]"]
5681 -> 5685 [label="[!(inptr < insize)]"]
5681 -> 5684 [label="[inptr < insize]"]
5684 -> 5686 [label="tmp = inptr;"]
5686 -> 5687 [label="inptr = inptr + 1U;"]
5687 -> 5688 [label="tmp___1 = (int)(*(inbuf + tmp));"]
5688 -> 5683 [label=""]
5683 -> 5691 [label="b = b | (((unsigned long)((unsigned char)tmp___1)) << k);"]
5691 -> 5692 [label="k = k + 8U;"]
5692 -> 5680 [label=""]
5685 -> 5689 [label="tmp___0 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5689 -> 5690 [label="tmp___1 = tmp___0;"]
5690 -> 5683 [label=""]
5682 -> 5693 [label="n = ((unsigned int)b) & 65535U;"]
5693 -> 5694 [label="b = b >> 16;"]
5694 -> 5695 [label="k = k - 16U;"]
5695 -> 5696 [label="while"]
5696 -> 5698 [label="[!(k < 16U)]"]
5696 -> 5697 [label="[k < 16U]"]
5697 -> 5701 [label="[!(inptr < insize)]"]
5697 -> 5700 [label="[inptr < insize]"]
5700 -> 5702 [label="tmp___2 = inptr;"]
5702 -> 5703 [label="inptr = inptr + 1U;"]
5703 -> 5704 [label="tmp___4 = (int)(*(inbuf + tmp___2));"]
5704 -> 5699 [label=""]
5699 -> 5707 [label="b = b | (((unsigned long)((unsigned char)tmp___4)) << k);"]
5707 -> 5708 [label="k = k + 8U;"]
5708 -> 5696 [label=""]
5701 -> 5705 [label="tmp___3 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
5705 -> 5706 [label="tmp___4 = tmp___3;"]
5706 -> 5699 [label=""]
5698 -> 5709 [label="[!(n != ((unsigned int)((~b) & 65535UL)))]"]
5698 -> 5710 [label="[n != ((unsigned int)((~b) & 65535UL))]"]
5710 -> 5641 [label="return 1;"]
5709 -> 5712 [label="b = b >> 16;"]
5712 -> 5713 [label="k = k - 16U;"]
5713 -> 5714 [label="while"]}
subgraph cluster_bi_reverse {
label="bi_reverse()"
2076 -> 2077 [label="Function start dummy edge"]
2077 -> 2079 [label="unsigned int res;"]
2079 -> 2080 [label="res = 0U;"]
2080 -> 2081 [label="while"]
2081 -> 2082 [label=""]
2082 -> 2084 [label="res = res | (code & 1U);"]
2084 -> 2085 [label="code = code >> 1;"]
2085 -> 2086 [label="res = res << 1;"]
2086 -> 2087 [label="len = len - 1;"]
2087 -> 2088 [label="[!(!(len > 0))]"]
2087 -> 2089 [label="[!(len > 0)]"]
2089 -> 2083 [label="break"]
2083 -> 2075 [label="return res >> 1;"]
2088 -> 2081 [label=""]}
subgraph cluster_lzw {
label="lzw()"
}
subgraph cluster_spec_reset {
label="spec_reset()"
}
subgraph cluster_spec_ungetc {
label="spec_ungetc()"
}
subgraph cluster_license {
label="license()"
284 -> 285 [label="Function start dummy edge"]
285 -> 287 [label="char **p;"]
287 -> 289 [label="char **tmp;"]
289 -> 291 [label="struct _reent *tmp___0;"]
291 -> 292 [label="p = license_msg;"]
292 -> 293 [label="while"]
293 -> 295 [label="[!((*p) != 0)]"]
293 -> 294 [label="[(*p) != 0]"]
294 -> 296 [label="tmp = p;"]
296 -> 297 [label="p = p + 1;"]
297 -> 298 [label="tmp___0 = __getreent();"]
298 -> 299 [label="fprintf(tmp___0->_stderr, \"%s\n\", *tmp);"]
299 -> 293 [label=""]
295 -> 283 [label="return;"]}
subgraph cluster_warn {
label="warn()"
}
subgraph cluster_treat_file {
label="treat_file()"
3835 -> 3826 [label=""]
3826 -> 3838 [label="[!(!test)]"]
3826 -> 3839 [label="[!test]"]
3839 -> 3840 [label="[!(!to_stdout)]"]
3839 -> 3841 [label="[!to_stdout]"]
3841 -> 3842 [label="tmp___23 = __getreent();"]
3842 -> 3843 [label="fprintf(tmp___23->_stderr, \" -- replaced with %s\", ofname);"]
3843 -> 3838 [label=""]
3838 -> 3844 [label="tmp___24 = __getreent();"]
3844 -> 3845 [label="fprintf(tmp___24->_stderr, \"\n\");"]
3845 -> 3824 [label=""]
3824 -> 3846 [label="[!(!to_stdout)]"]
3824 -> 3847 [label="[!to_stdout]"]
3847 -> 3848 [label="copy_stat(&istat);" style="dotted" arrowhead="empty"]
3848 -> 3846 [label=""]
3846 -> 3588 [label="return;"]
3589 -> 3590 [label="Function start dummy edge"]
3590 -> 3592 [label="int cflag;"]
3592 -> 3594 [label="int tmp;"]
3594 -> 3596 [label="int tmp___0;"]
3596 -> 3598 [label="struct _reent *tmp___1;"]
3598 -> 3600 [label="struct _reent *tmp___2;"]
3600 -> 3602 [label="int tmp___3;"]
3602 -> 3604 [label="struct _reent *tmp___4;"]
3604 -> 3606 [label="int tmp___5;"]
3606 -> 3608 [label="int tmp___6;"]
3608 -> 3610 [label="struct _reent *tmp___7;"]
3610 -> 3612 [label="struct _reent *tmp___8;"]
3612 -> 3614 [label="int tmp___9;"]
3614 -> 3616 [label="struct _reent *tmp___10;"]
3616 -> 3618 [label="const char *tmp___13;"]
3618 -> 3620 [label="size_t tmp___14;"]
3620 -> 3622 [label="const char *tmp___15;"]
3622 -> 3624 [label="size_t tmp___16;"]
3624 -> 3626 [label="struct _reent *tmp___17;"]
3626 -> 3628 [label="int tmp___18;"]
3628 -> 3630 [label="int tmp___19;"]
3630 -> 3632 [label="struct _reent *tmp___20;"]
3632 -> 3634 [label="struct _reent *tmp___21;"]
3634 -> 3636 [label="struct _reent *tmp___22;"]
3636 -> 3638 [label="struct _reent *tmp___23;"]
3638 -> 3640 [label="struct _reent *tmp___24;"]
3640 -> 3641 [label="tmp = strcmp((const char *)iname, \"-\");"]
3641 -> 3642 [label="[!(tmp == 0)]"]
3641 -> 3643 [label="[tmp == 0]"]
3643 -> 3644 [label="cflag = to_stdout;"]
3644 -> 3645 [label="treat_stdin();" style="dotted" arrowhead="empty"]
3806 -> 3807 [label="[!(method < 0)]"]
3806 -> 3808 [label="[method < 0]"]
3808 -> 3789 [label="break"]
3789 -> 3811 [label="close(ifd);"]
3811 -> 3812 [label="[!(!to_stdout)]"]
3811 -> 3813 [label="[!to_stdout]"]
3813 -> 3814 [label="tmp___19 = close(ofd);"]
3814 -> 3815 [label="[!(tmp___19 != 0)]"]
3814 -> 3816 [label="[tmp___19 != 0]"]
3816 -> 3817 [label="write_error();" style="dotted" arrowhead="empty"]
3817 -> 3812 [label=""]
3812 -> 3818 [label="[!(method == (-1))]"]
3812 -> 3819 [label="[method == (-1)]"]
3819 -> 3820 [label="[!(!to_stdout)]"]
3819 -> 3821 [label="[!to_stdout]"]
3821 -> 3822 [label="unlink(ofname);"]
3822 -> 3820 [label=""]
3820 -> 3588 [label="return;"]
3818 -> 3824 [label="[!(verbose != 0)]"]
3818 -> 3825 [label="[verbose != 0]"]
3825 -> 3828 [label="[!(test != 0)]"]
3825 -> 3827 [label="[test != 0]"]
3827 -> 3829 [label="tmp___20 = __getreent();"]
3829 -> 3830 [label="fprintf(tmp___20->_stderr, \" OK\");"]
3830 -> 3826 [label=""]
3828 -> 3833 [label="[!(decompress != 0)]"]
3828 -> 3832 [label="[decompress != 0]"]
3832 -> 3834 [label="tmp___21 = __getreent();"]
3834 -> 3835 [label="display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, tmp___21->_stderr);" style="dotted" arrowhead="empty"]
3833 -> 3836 [label="tmp___22 = __getreent();"]
3836 -> 3837 [label="display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, tmp___22->_stderr);" style="dotted" arrowhead="empty"]
3837 -> 3826 [label=""]
3815 -> 3812 [label=""]
3807 -> 3810 [label="bytes_out = 0L;"]
3810 -> 3787 [label=""]
3787 -> 3788 [label=""]
3788 -> 3790 [label="tmp___18 = (*work)(ifd, ofd);"]
3790 -> 3791 [label="[!(tmp___18 != 0)]"]
3790 -> 3792 [label="[tmp___18 != 0]"]
3792 -> 3793 [label="method = -1;"]
3793 -> 3789 [label="break"]
3791 -> 3797 [label="[!(!decompress)]"]
3791 -> 3796 [label="[!decompress]"]
3796 -> 3789 [label="break"]
3797 -> 3801 [label="[!(last_member != 0)]"]
3797 -> 3800 [label="[last_member != 0]"]
3800 -> 3789 [label="break"]
3801 -> 3803 [label="[!(inptr == insize)]"]
3801 -> 3804 [label="[inptr == insize]"]
3804 -> 3789 [label="break"]
3803 -> 3795 [label=""]
3795 -> 3806 [label="method = get_method(ifd);" style="dotted" arrowhead="empty"]
3739 -> 3740 [label="[!(method < 0)]"]
3739 -> 3741 [label="[method < 0]"]
3741 -> 3742 [label="close(ifd);"]
3742 -> 3588 [label="return;"]
3740 -> 3737 [label=""]
3737 -> 3744 [label="[!(list != 0)]"]
3737 -> 3745 [label="[list != 0]"]
3745 -> 3746 [label="do_list(ifd, method);" style="dotted" arrowhead="empty"]
3746 -> 3747 [label="close(ifd);"]
3747 -> 3588 [label="return;"]
3645 -> 3646 [label="to_stdout = cflag;"]
3646 -> 3588 [label="return;"]
3744 -> 3751 [label="[!(to_stdout != 0)]"]
3744 -> 3750 [label="[to_stdout != 0]"]
3750 -> 3752 [label="tmp___8 = __getreent();"]
3752 -> 3753 [label="ofd = fileno(tmp___8->_stdout);"]
3753 -> 3749 [label=""]
3749 -> 3768 [label="[!(!save_orig_name)]"]
3749 -> 3769 [label="[!save_orig_name]"]
3769 -> 3770 [label="save_orig_name = !no_name;"]
3770 -> 3768 [label=""]
3768 -> 3771 [label="[!(verbose != 0)]"]
3768 -> 3772 [label="[verbose != 0]"]
3772 -> 3773 [label="tmp___16 = strlen((const char *)ifname);"]
3773 -> 3776 [label="[!(((int)tmp___16) >= 15)]"]
3773 -> 3775 [label="[((int)tmp___16) >= 15]"]
3775 -> 3777 [label="tmp___15 = \"\";"]
3777 -> 3774 [label=""]
3774 -> 3785 [label="tmp___17 = __getreent();"]
3785 -> 3786 [label="fprintf(tmp___17->_stderr, \"%s:\t%s\", ifname, tmp___15);"]
3786 -> 3771 [label=""]
3771 -> 3787 [label="while"]
3776 -> 3778 [label="tmp___14 = strlen((const char *)ifname);"]
3778 -> 3781 [label="[!(((int)tmp___14) >= 7)]"]
3778 -> 3780 [label="[((int)tmp___14) >= 7]"]
3780 -> 3782 [label="tmp___13 = \"\t\";"]
3782 -> 3779 [label=""]
3779 -> 3784 [label="tmp___15 = tmp___13;"]
3784 -> 3774 [label=""]
3781 -> 3783 [label="tmp___13 = \"\t\t\";"]
3783 -> 3779 [label=""]
3751 -> 3754 [label="tmp___9 = create_outfile();" style="dotted" arrowhead="empty"]
3754 -> 3755 [label="[!(tmp___9 != 0)]"]
3754 -> 3756 [label="[tmp___9 != 0]"]
3756 -> 3588 [label="return;"]
3755 -> 3758 [label="[!(!decompress)]"]
3755 -> 3759 [label="[!decompress]"]
3759 -> 3760 [label="[!(save_orig_name != 0)]"]
3759 -> 3761 [label="[save_orig_name != 0]"]
3761 -> 3762 [label="[!(!verbose)]"]
3761 -> 3763 [label="[!verbose]"]
3763 -> 3764 [label="[!(!quiet)]"]
3763 -> 3765 [label="[!quiet]"]
3765 -> 3766 [label="tmp___10 = __getreent();"]
3766 -> 3767 [label="fprintf(tmp___10->_stderr, \"%s: %s compressed to %s\n\", progname, ifname, ofname);"]
3767 -> 3749 [label=""]
3764 -> 3749 [label=""]
3762 -> 3749 [label=""]
3760 -> 3749 [label=""]
3758 -> 3749 [label=""]
3648 -> 3649 [label="[!(tmp___0 != 0)]"]
3648 -> 3650 [label="[tmp___0 != 0]"]
3650 -> 3588 [label="return;"]
3649 -> 3652 [label="[!(((istat.st_mode) & 61440U) == 16384U)]"]
3649 -> 3653 [label="[((istat.st_mode) & 61440U) == 16384U]"]
3653 -> 3654 [label="[!(!quiet)]"]
3653 -> 3655 [label="[!quiet]"]
3655 -> 3656 [label="tmp___1 = __getreent();"]
3656 -> 3657 [label="fprintf(tmp___1->_stderr, \"%s: %s is a directory -- ignored\n\", progname, ifname);"]
3657 -> 3654 [label=""]
3654 -> 3658 [label="[!(exit_code == 0)]"]
3654 -> 3659 [label="[exit_code == 0]"]
3659 -> 3660 [label="exit_code = 2;"]
3660 -> 3658 [label=""]
3658 -> 3588 [label="return;"]
3652 -> 3662 [label="[!(!(((istat.st_mode) & 61440U) == 32768U))]"]
3652 -> 3663 [label="[!(((istat.st_mode) & 61440U) == 32768U)]"]
3663 -> 3664 [label="[!(!quiet)]"]
3663 -> 3665 [label="[!quiet]"]
3665 -> 3666 [label="tmp___2 = __getreent();"]
3666 -> 3667 [label="fprintf(tmp___2->_stderr, \"%s: %s is not a directory or a regular file - ignored\n\", progname, ifname);"]
3667 -> 3664 [label=""]
3664 -> 3668 [label="[!(exit_code == 0)]"]
3664 -> 3669 [label="[exit_code == 0]"]
3669 -> 3670 [label="exit_code = 2;"]
3670 -> 3668 [label=""]
3668 -> 3588 [label="return;"]
3662 -> 3672 [label="[!(((int)(istat.st_nlink)) > 1)]"]
3662 -> 3673 [label="[((int)(istat.st_nlink)) > 1]"]
3673 -> 3674 [label="[!(!to_stdout)]"]
3673 -> 3675 [label="[!to_stdout]"]
3675 -> 3676 [label="[!(!force)]"]
3675 -> 3677 [label="[!force]"]
3677 -> 3678 [label="[!(!quiet)]"]
3677 -> 3679 [label="[!quiet]"]
3679 -> 3682 [label="[!(((int)(istat.st_nlink)) > 2)]"]
3679 -> 3681 [label="[((int)(istat.st_nlink)) > 2]"]
3681 -> 3683 [label="tmp___3 = 's';"]
3683 -> 3680 [label=""]
3680 -> 3685 [label="tmp___4 = __getreent();"]
3685 -> 3686 [label="fprintf(tmp___4->_stderr, \"%s: %s has %d other link%c -- unchanged\n\", progname, ifname, ((int)(istat.st_nlink)) - 1, tmp___3);"]
3686 -> 3678 [label=""]
3678 -> 3687 [label="[!(exit_code == 0)]"]
3678 -> 3688 [label="[exit_code == 0]"]
3688 -> 3689 [label="exit_code = 2;"]
3689 -> 3687 [label=""]
3687 -> 3588 [label="return;"]
3682 -> 3684 [label="tmp___3 = ' ';"]
3684 -> 3680 [label=""]
3676 -> 3672 [label=""]
3672 -> 3691 [label="ifile_size = (long)(istat.st_size);"]
3691 -> 3694 [label="[!(no_time != 0)]"]
3691 -> 3693 [label="[no_time != 0]"]
3693 -> 3697 [label="[!(!list)]"]
3693 -> 3696 [label="[!list]"]
3696 -> 3698 [label="time_stamp = 0L;"]
3698 -> 3695 [label=""]
3695 -> 3692 [label=""]
3692 -> 3703 [label="[!(to_stdout != 0)]"]
3692 -> 3702 [label="[to_stdout != 0]"]
3702 -> 3706 [label="[!(!list)]"]
3702 -> 3705 [label="[!list]"]
3705 -> 3709 [label="[!(!test)]"]
3705 -> 3708 [label="[!test]"]
3708 -> 3710 [label="strcpy(ofname, \"stdout\");"]
3710 -> 3707 [label=""]
3707 -> 3704 [label=""]
3704 -> 3701 [label=""]
3701 -> 3720 [label="[!(ascii != 0)]"]
3701 -> 3719 [label="[ascii != 0]"]
3719 -> 3723 [label="[!(!decompress)]"]
3719 -> 3722 [label="[!decompress]"]
3722 -> 3724 [label="tmp___6 = 0;"]
3724 -> 3721 [label=""]
3721 -> 3718 [label=""]
3718 -> 3727 [label="ifd = open((const char *)ifname, tmp___6);"]
3727 -> 3728 [label="[!(ifd == (-1))]"]
3727 -> 3729 [label="[ifd == (-1)]"]
3729 -> 3730 [label="tmp___7 = __getreent();"]
3730 -> 3731 [label="fprintf(tmp___7->_stderr, \"%s: \", progname);"]
3731 -> 3732 [label="perror((const char *)ifname);"]
3732 -> 3733 [label="exit_code = 1;"]
3733 -> 3588 [label="return;"]
3728 -> 3735 [label="clear_bufs();" style="dotted" arrowhead="empty"]
3735 -> 3736 [label="part_nb = 0;"]
3736 -> 3737 [label="[!(decompress != 0)]"]
3736 -> 3738 [label="[decompress != 0]"]
3738 -> 3739 [label="method = get_method(ifd);" style="dotted" arrowhead="empty"]
3723 -> 3725 [label="tmp___6 = 65536;"]
3725 -> 3721 [label=""]
3720 -> 3726 [label="tmp___6 = 65536;"]
3726 -> 3718 [label=""]
3709 -> 3713 [label="Goto: _L___0"]
3713 -> 3714 [label="tmp___5 = make_ofname();" style="dotted" arrowhead="empty"]
3714 -> 3715 [label="[!(tmp___5 != 0)]"]
3714 -> 3716 [label="[tmp___5 != 0]"]
3716 -> 3588 [label="return;"]
3715 -> 3701 [label=""]
3706 -> 3713 [label="Goto: _L___0"]
3703 -> 3713 [label="Label: _L___0"]
3697 -> 3699 [label="time_stamp = istat.st_mtim.tv_sec;"]
3699 -> 3695 [label=""]
3694 -> 3700 [label="time_stamp = istat.st_mtim.tv_sec;"]
3700 -> 3692 [label=""]
3674 -> 3672 [label=""]
3642 -> 3648 [label="tmp___0 = get_istat(iname, &istat);" style="dotted" arrowhead="empty"]
3840 -> 3838 [label=""]}
subgraph cluster_bi_init {
label="bi_init()"
2025 -> 2026 [label="Function start dummy edge"]
2026 -> 2027 [label="zfile = zipfile;"]
2027 -> 2028 [label="bi_buf = (unsigned short)0;"]
2028 -> 2029 [label="bi_valid = 0;"]
2029 -> 2030 [label="[!(zfile != (-1))]"]
2029 -> 2031 [label="[zfile != (-1)]"]
2031 -> 2032 [label="read_buf = &file_read;"]
2032 -> 2030 [label=""]
2030 -> 2024 [label="return;"]}
subgraph cluster_fill_window {
label="fill_window()"
2433 -> 2434 [label="Function start dummy edge"]
2434 -> 2436 [label="unsigned int n;"]
2436 -> 2438 [label="unsigned int m;"]
2438 -> 2440 [label="unsigned int more;"]
2440 -> 2442 [label="unsigned int tmp;"]
2442 -> 2444 [label="unsigned int tmp___0;"]
2444 -> 2446 [label="int tmp___1;"]
2446 -> 2447 [label="more = (unsigned int)((window_size - ((unsigned long)lookahead)) - ((unsigned long)strstart));"]
2447 -> 2450 [label="[!(more == 4294967295U)]"]
2447 -> 2449 [label="[more == 4294967295U]"]
2449 -> 2451 [label="more = more - 1U;"]
2451 -> 2448 [label=""]
2448 -> 2483 [label="[!(!eofile)]"]
2448 -> 2484 [label="[!eofile]"]
2484 -> 2485 [label="tmp___1 = (*read_buf)((((char *)window) + strstart) + lookahead, more);"]
2485 -> 2486 [label="n = (unsigned int)tmp___1;"]
2486 -> 2489 [label="[!(n == 0U)]"]
2486 -> 2488 [label="[n == 0U]"]
2488 -> 2490 [label="eofile = 1;"]
2490 -> 2483 [label=""]
2483 -> 2432 [label="return;"]
2489 -> 2493 [label="[!(n == 4294967295U)]"]
2489 -> 2492 [label="[n == 4294967295U]"]
2492 -> 2494 [label="eofile = 1;"]
2494 -> 2483 [label=""]
2493 -> 2495 [label="lookahead = lookahead + n;"]
2495 -> 2483 [label=""]
2450 -> 2452 [label="[!(strstart >= 65274U)]"]
2450 -> 2453 [label="[strstart >= 65274U]"]
2453 -> 2454 [label="memcpy((void *)((char *)window), (const void *)(((char *)window) + 32768), 32768U);"]
2454 -> 2455 [label="match_start = match_start - 32768U;"]
2455 -> 2456 [label="strstart = strstart - 32768U;"]
2456 -> 2457 [label="block_start = block_start - 32768L;"]
2457 -> 2458 [label="n = 0U;"]
2458 -> 2459 [label="while"]
2459 -> 2461 [label="[!(n < ((unsigned int)(1 << 15)))]"]
2459 -> 2460 [label="[n < ((unsigned int)(1 << 15))]"]
2460 -> 2462 [label="m = (unsigned int)(*((prev + 32768) + n));"]
2462 -> 2465 [label="[!(m >= 32768U)]"]
2462 -> 2464 [label="[m >= 32768U]"]
2464 -> 2466 [label="tmp = m - 32768U;"]
2466 -> 2463 [label=""]
2463 -> 2468 [label="*((prev + 32768) + n) = (unsigned short)tmp;"]
2468 -> 2469 [label="n = n + 1U;"]
2469 -> 2459 [label=""]
2465 -> 2467 [label="tmp = 0U;"]
2467 -> 2463 [label=""]
2461 -> 2470 [label="n = 0U;"]
2470 -> 2471 [label="while"]
2471 -> 2473 [label="[!(n < 32768U)]"]
2471 -> 2472 [label="[n < 32768U]"]
2472 -> 2474 [label="m = (unsigned int)(*(prev + n));"]
2474 -> 2477 [label="[!(m >= 32768U)]"]
2474 -> 2476 [label="[m >= 32768U]"]
2476 -> 2478 [label="tmp___0 = m - 32768U;"]
2478 -> 2475 [label=""]
2475 -> 2480 [label="*(prev + n) = (unsigned short)tmp___0;"]
2480 -> 2481 [label="n = n + 1U;"]
2481 -> 2471 [label=""]
2477 -> 2479 [label="tmp___0 = 0U;"]
2479 -> 2475 [label=""]
2473 -> 2482 [label="more = more + 32768U;"]
2482 -> 2448 [label=""]
2452 -> 2448 [label=""]}
subgraph cluster_name_too_long {
label="name_too_long()"
4777 -> 4778 [label="Function start dummy edge"]
4778 -> 4780 [label="int s;"]
4780 -> 4782 [label="size_t tmp;"]
4782 -> 4784 [label="char c;"]
4784 -> 4786 [label="struct stat tstat;"]
4786 -> 4788 [label="int res;"]
4788 -> 4790 [label="int tmp___0;"]
4790 -> 4792 [label="int tmp___1;"]
4792 -> 4794 [label="int tmp___2;"]
4794 -> 4795 [label="tmp = strlen((const char *)name);"]
4795 -> 4796 [label="s = (int)tmp;"]
4796 -> 4797 [label="c = *(name + (s - 1));"]
4797 -> 4798 [label="tstat = *statb;"]
4798 -> 4799 [label="*(name + (s - 1)) = (char)'\x0';"]
4799 -> 4800 [label="tmp___0 = stat((const char *)name, &tstat);"]
4800 -> 4803 [label="[!(tmp___0 == 0)]"]
4800 -> 4802 [label="[tmp___0 == 0]"]
4802 -> 4804 [label="tmp___1 = same_file(statb, &tstat);" style="dotted" arrowhead="empty"]
4804 -> 4807 [label="[!(tmp___1 != 0)]"]
4804 -> 4806 [label="[tmp___1 != 0]"]
4806 -> 4808 [label="tmp___2 = 1;"]
4808 -> 4805 [label=""]
4805 -> 4801 [label=""]
4801 -> 4811 [label="res = tmp___2;"]
4811 -> 4812 [label="*(name + (s - 1)) = c;"]
4812 -> 4776 [label="return res;"]
4807 -> 4809 [label="tmp___2 = 0;"]
4809 -> 4805 [label=""]
4803 -> 4810 [label="tmp___2 = 0;"]
4810 -> 4801 [label=""]}
subgraph cluster_my_index {
label="my_index()"
2740 -> 2741 [label="Function start dummy edge"]
2741 -> 2742 [label="while"]
2742 -> 2744 [label="[!((*str) != 0)]"]
2742 -> 2743 [label="[(*str) != 0]"]
2743 -> 2745 [label="[!(((const int)(*str)) == ((const int)chr))]"]
2743 -> 2746 [label="[((const int)(*str)) == ((const int)chr)]"]
2746 -> 2739 [label="return (char *)str;"]
2745 -> 2748 [label="str = str + 1;"]
2748 -> 2742 [label=""]
2744 -> 2739 [label="return (char *)0;"]}
subgraph cluster_get_suffix {
label="get_suffix()"
3934 -> 3935 [label="Function start dummy edge"]
3935 -> 3937 [label="int nlen;"]
3937 -> 3939 [label="int slen;"]
3939 -> 3941 [label="char suffix[33];"]
3941 -> 3943 [label="char **suf;"]
3943 -> 3945 [label="int tmp;"]
3945 -> 3947 [label="size_t tmp___0;"]
3947 -> 3949 [label="size_t tmp___1;"]
3949 -> 3951 [label="int s;"]
3951 -> 3953 [label="size_t tmp___2;"]
3953 -> 3955 [label="int tmp___3;"]
3955 -> 3956 [label="suf = known_suffixes;"]
3956 -> 3957 [label="tmp = strcmp((const char *)z_suffix, \"z\");"]
3957 -> 3958 [label="[!(tmp == 0)]"]
3957 -> 3959 [label="[tmp == 0]"]
3959 -> 3960 [label="suf = suf + 1;"]
3960 -> 3958 [label=""]
3958 -> 3961 [label="tmp___0 = strlen((const char *)name);"]
3961 -> 3962 [label="nlen = (int)tmp___0;"]
3962 -> 3965 [label="[!(nlen <= 32)]"]
3962 -> 3964 [label="[nlen <= 32]"]
3964 -> 3966 [label="strcpy(suffix, (const char *)name);"]
3966 -> 3963 [label=""]
3963 -> 3968 [label="strlwr(suffix);" style="dotted" arrowhead="empty"]
3968 -> 3969 [label="tmp___1 = strlen((const char *)suffix);"]
3969 -> 3970 [label="slen = (int)tmp___1;"]
3970 -> 3971 [label="while"]
3971 -> 3972 [label=""]
3972 -> 3974 [label="tmp___2 = strlen((const char *)(*suf));"]
3974 -> 3975 [label="s = (int)tmp___2;"]
3975 -> 3976 [label="[!(slen > s)]"]
3975 -> 3977 [label="[slen > s]"]
3977 -> 3978 [label="[!(((int)(suffix[(slen - s) - 1])) != 58)]"]
3977 -> 3979 [label="[((int)(suffix[(slen - s) - 1])) != 58]"]
3979 -> 3980 [label="tmp___3 = strcmp((const char *)((suffix + slen) - s), (const char *)(*suf));"]
3980 -> 3981 [label="[!(tmp___3 == 0)]"]
3980 -> 3982 [label="[tmp___3 == 0]"]
3982 -> 3933 [label="return (name + nlen) - s;"]
3981 -> 3976 [label=""]
3976 -> 3984 [label="suf = suf + 1;"]
3984 -> 3985 [label="[!(!(((unsigned int)(*suf)) != ((unsigned int)((void *)0))))]"]
3984 -> 3986 [label="[!(((unsigned int)(*suf)) != ((unsigned int)((void *)0)))]"]
3986 -> 3973 [label="break"]
3973 -> 3933 [label="return (char *)((void *)0);"]
3985 -> 3971 [label=""]
3978 -> 3976 [label=""]
3965 -> 3967 [label="strcpy(suffix, (const char *)(((name + nlen) - 30) - 2));"]
3967 -> 3963 [label=""]}
subgraph cluster_spec_random_load {
label="spec_random_load()"
}
subgraph cluster_exchange {
label="exchange()"
2751 -> 2752 [label="Function start dummy edge"]
2752 -> 2754 [label="char *temp;"]
2754 -> 2756 [label="char **first;"]
2756 -> 2758 [label="char **last;"]
2758 -> 2759 [label="first = argv + first_nonopt;"]
2759 -> 2760 [label="last = argv + (optind - 1);"]
2760 -> 2761 [label="while"]
2761 -> 2763 [label="[!(((unsigned int)first) < ((unsigned int)last))]"]
2761 -> 2762 [label="[((unsigned int)first) < ((unsigned int)last)]"]
2762 -> 2764 [label="temp = *first;"]
2764 -> 2765 [label="*first = *last;"]
2765 -> 2766 [label="*last = temp;"]
2766 -> 2767 [label="first = first + 1;"]
2767 -> 2768 [label="last = last - 1;"]
2768 -> 2761 [label=""]
2763 -> 2769 [label="first = argv + first_nonopt;"]
2769 -> 2770 [label="first_nonopt = first_nonopt + (optind - last_nonopt);"]
2770 -> 2771 [label="last = argv + (first_nonopt - 1);"]
2771 -> 2772 [label="while"]
2772 -> 2774 [label="[!(((unsigned int)first) < ((unsigned int)last))]"]
2772 -> 2773 [label="[((unsigned int)first) < ((unsigned int)last)]"]
2773 -> 2775 [label="temp = *first;"]
2775 -> 2776 [label="*first = *last;"]
2776 -> 2777 [label="*last = temp;"]
2777 -> 2778 [label="first = first + 1;"]
2778 -> 2779 [label="last = last - 1;"]
2779 -> 2772 [label=""]
2774 -> 2780 [label="first = argv + first_nonopt;"]
2780 -> 2781 [label="last_nonopt = optind;"]
2781 -> 2782 [label="last = argv + (last_nonopt - 1);"]
2782 -> 2783 [label="while"]
2783 -> 2785 [label="[!(((unsigned int)first) < ((unsigned int)last))]"]
2783 -> 2784 [label="[((unsigned int)first) < ((unsigned int)last)]"]
2784 -> 2786 [label="temp = *first;"]
2786 -> 2787 [label="*first = *last;"]
2787 -> 2788 [label="*last = temp;"]
2788 -> 2789 [label="first = first + 1;"]
2789 -> 2790 [label="last = last - 1;"]
2790 -> 2783 [label=""]
2785 -> 2750 [label="return;"]}
subgraph cluster_gzipbasename {
label="gzipbasename()"
966 -> 967 [label="Function start dummy edge"]
967 -> 969 [label="char *p;"]
969 -> 970 [label="p = strrchr((const char *)fname, ':');"]
970 -> 971 [label="[!(((unsigned int)p) != ((unsigned int)((void *)0)))]"]
970 -> 972 [label="[((unsigned int)p) != ((unsigned int)((void *)0))]"]
972 -> 973 [label="fname = p + 1;"]
973 -> 971 [label=""]
971 -> 965 [label="return fname;"]}
subgraph cluster_unlzh {
label="unlzh()"
1977 -> 1973 [label=""]
1973 -> 1969 [label=""]
1969 -> 1971 [label="[!(!done)]"]
1969 -> 1970 [label="[!done]"]
1970 -> 1972 [label="n = decode(1U << 13, window);" style="dotted" arrowhead="empty"]
1972 -> 1973 [label="[!(!test)]"]
1972 -> 1974 [label="[!test]"]
1974 -> 1975 [label="[!(n > 0U)]"]
1974 -> 1976 [label="[n > 0U]"]
1976 -> 1977 [label="write_buf(out, (void *)((char *)window), n);" style="dotted" arrowhead="empty"]
1975 -> 1973 [label=""]
1971 -> 1961 [label="return 0;"]
1968 -> 1969 [label="while"]}
subgraph cluster_read_error {
label="read_error()"
1152 -> 1153 [label="Function start dummy edge"]
1153 -> 1155 [label="struct _reent *tmp;"]
1155 -> 1157 [label="struct _reent *tmp___0;"]
1157 -> 1158 [label="tmp = __getreent();"]
1158 -> 1159 [label="fprintf(tmp->_stderr, \"\n%s: \", progname);"]
1159 -> 1162 [label="[!(errno != 0)]"]
1159 -> 1161 [label="[errno != 0]"]
1161 -> 1163 [label="perror((const char *)ifname);"]
1163 -> 1160 [label=""]
1160 -> 1166 [label="abort_gzip();" style="dotted" arrowhead="empty"]
1166 -> 1151 [label="return;"]
1162 -> 1164 [label="tmp___0 = __getreent();"]
1164 -> 1165 [label="fprintf(tmp___0->_stderr, \"%s: unexpected end of file\n\", ifname);"]
1165 -> 1160 [label=""]}
subgraph cluster_error {
label="error()"
1130 -> 1131 [label="Function start dummy edge"]
1131 -> 1133 [label="struct _reent *tmp;"]
1133 -> 1134 [label="tmp = __getreent();"]
1134 -> 1135 [label="fprintf(tmp->_stderr, \"\n%s: %s: %s\n\", progname, ifname, m);"]
1135 -> 1136 [label="abort_gzip();" style="dotted" arrowhead="empty"]
1136 -> 1129 [label="return;"]}
subgraph cluster_getbits {
label="getbits()"
1500 -> 1501 [label="Function start dummy edge"]
1501 -> 1503 [label="unsigned int x;"]
1503 -> 1504 [label="x = (unsigned int)(bitbuf >> ((16U * (sizeof(char))) - ((unsigned int)n)));"]
1504 -> 1505 [label="fillbuf(n);" style="dotted" arrowhead="empty"]
1505 -> 1499 [label="return x;"]}
subgraph cluster_send_bits {
label="send_bits()"
2069 -> 2049 [label=""]
2049 -> 2070 [label="bi_buf = (unsigned short)(((int)((unsigned short)value)) >> ((16U * (sizeof(char))) - ((unsigned int)bi_valid)));"]
2070 -> 2071 [label="bi_valid = (int)(((unsigned int)bi_valid) + (((unsigned int)length) - (16U * (sizeof(char)))));"]
2071 -> 2045 [label=""]
2045 -> 2034 [label="return;"]
2035 -> 2036 [label="Function start dummy edge"]
2036 -> 2038 [label="unsigned int tmp;"]
2038 -> 2040 [label="unsigned int tmp___0;"]
2040 -> 2042 [label="unsigned int tmp___1;"]
2042 -> 2044 [label="unsigned int tmp___2;"]
2044 -> 2047 [label="[!(bi_valid > (((int)(16U * (sizeof(char)))) - length))]"]
2044 -> 2046 [label="[bi_valid > (((int)(16U * (sizeof(char)))) - length)]"]
2046 -> 2048 [label="bi_buf = (unsigned short)(((int)bi_buf) | (value << bi_valid));"]
2048 -> 2051 [label="[!(outcnt < 16382U)]"]
2048 -> 2050 [label="[outcnt < 16382U]"]
2050 -> 2052 [label="tmp = outcnt;"]
2052 -> 2053 [label="outcnt = outcnt + 1U;"]
2053 -> 2054 [label="*(outbuf + tmp) = (unsigned char)(((int)bi_buf) & 255);"]
2054 -> 2055 [label="tmp___0 = outcnt;"]
2055 -> 2056 [label="outcnt = outcnt + 1U;"]
2056 -> 2057 [label="*(outbuf + tmp___0) = (unsigned char)(((int)bi_buf) >> 8);"]
2057 -> 2049 [label=""]
2051 -> 2058 [label="tmp___1 = outcnt;"]
2058 -> 2059 [label="outcnt = outcnt + 1U;"]
2059 -> 2060 [label="*(outbuf + tmp___1) = (unsigned char)(((int)bi_buf) & 255);"]
2060 -> 2061 [label="[!(outcnt == 16384U)]"]
2060 -> 2062 [label="[outcnt == 16384U]"]
2062 -> 2063 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
2063 -> 2061 [label=""]
2061 -> 2064 [label="tmp___2 = outcnt;"]
2064 -> 2065 [label="outcnt = outcnt + 1U;"]
2065 -> 2066 [label="*(outbuf + tmp___2) = (unsigned char)(((int)bi_buf) >> 8);"]
2066 -> 2067 [label="[!(outcnt == 16384U)]"]
2066 -> 2068 [label="[outcnt == 16384U]"]
2068 -> 2069 [label="flush_outbuf();" style="dotted" arrowhead="empty"]
2067 -> 2049 [label=""]
2047 -> 2072 [label="bi_buf = (unsigned short)(((int)bi_buf) | (value << bi_valid));"]
2072 -> 2073 [label="bi_valid = bi_valid + length;"]
2073 -> 2045 [label=""]}
subgraph cluster_unlzw {
label="unlzw()"
1441 -> 1442 [label="bytes_out = (long)(((unsigned long)bytes_out) + ((unsigned long)outpos));"]
1442 -> 1439 [label=""]
1439 -> 1443 [label="outpos = 0;"]
1443 -> 1437 [label=""]
1437 -> 1444 [label="stackp = stackp + i___0;"]
1444 -> 1445 [label="i___0 = ((char_type *)(d_buf + 32767)) - stackp;"]
1445 -> 1446 [label="[!(!(i___0 > 0))]"]
1445 -> 1447 [label="[!(i___0 > 0)]"]
1447 -> 1429 [label="break"]
1429 -> 1424 [label=""]
1424 -> 1451 [label="code = free_ent;"]
1451 -> 1452 [label="[!(code < maxmaxcode)]"]
1451 -> 1453 [label="[code < maxmaxcode]"]
1453 -> 1454 [label="*(prev + code) = (unsigned short)oldcode;"]
1454 -> 1455 [label="*(window + code) = (unsigned char)finchar;"]
1455 -> 1456 [label="free_ent = code + 1L;"]
1456 -> 1452 [label=""]
1452 -> 1457 [label="oldcode = incode;"]
1457 -> 1354 [label=""]
1354 -> 1356 [label="[!(inbits > posbits)]"]
1354 -> 1355 [label="[inbits > posbits]"]
1355 -> 1357 [label="[!(free_ent > maxcode)]"]
1355 -> 1358 [label="[free_ent > maxcode]"]
1358 -> 1359 [label="posbits = (posbits - 1L) + (((long)(n_bits << 3)) - (((posbits - 1L) + ((long)(n_bits << 3))) % ((long)(n_bits << 3))));"]
1359 -> 1360 [label="n_bits = n_bits + 1;"]
1360 -> 1363 [label="[!(n_bits == maxbits)]"]
1360 -> 1362 [label="[n_bits == maxbits]"]
1362 -> 1364 [label="maxcode = maxmaxcode;"]
1364 -> 1361 [label=""]
1361 -> 1366 [label="bitmask = (unsigned int)((1 << n_bits) - 1);"]
1366 -> 1330 [label="Goto: resetbuf"]
1330 -> 1331 [label="o = (int)(posbits >> 3);"]
1331 -> 1332 [label="e = (int)(insize - ((unsigned int)o));"]
1332 -> 1333 [label="i__1 = 0;"]
1333 -> 1334 [label="while"]
1334 -> 1336 [label="[!(i__1 < e)]"]
1334 -> 1335 [label="[i__1 < e]"]
1335 -> 1337 [label="*(inbuf + i__1) = *(inbuf + (i__1 + o));"]
1337 -> 1338 [label="i__1 = i__1 + 1;"]
1338 -> 1334 [label=""]
1336 -> 1339 [label="insize = (unsigned int)e;"]
1339 -> 1340 [label="posbits = 0L;"]
1340 -> 1341 [label="[!(insize < 64U)]"]
1340 -> 1342 [label="[insize < 64U]"]
1342 -> 1343 [label="rsize = spec_read(in, (unsigned char *)(((char *)inbuf) + insize), 32768);" style="dotted" arrowhead="empty"]
1343 -> 1344 [label="[!(rsize == (-1))]"]
1343 -> 1345 [label="[rsize == (-1)]"]
1345 -> 1346 [label="read_error();" style="dotted" arrowhead="empty"]
1346 -> 1344 [label=""]
1344 -> 1347 [label="insize = insize + ((unsigned int)rsize);"]
1347 -> 1348 [label="bytes_in = (long)(((unsigned long)bytes_in) + ((unsigned long)rsize));"]
1348 -> 1341 [label=""]
1341 -> 1351 [label="[!(rsize != 0)]"]
1341 -> 1350 [label="[rsize != 0]"]
1350 -> 1352 [label="inbits = (long)((((unsigned long)((long)insize)) - ((unsigned long)(insize % ((unsigned int)n_bits)))) << 3);"]
1352 -> 1349 [label=""]
1349 -> 1354 [label="while"]
1351 -> 1353 [label="inbits = (((long)insize) << 3) - ((long)(n_bits - 1));"]
1353 -> 1349 [label=""]
1363 -> 1365 [label="maxcode = (1L << n_bits) - 1L;"]
1365 -> 1361 [label=""]
1357 -> 1368 [label="p = inbuf + (posbits >> 3);"]
1368 -> 1369 [label="code = (long)(((unsigned long)(((((long)(*(p + 0))) | (((long)(*(p + 1))) << 8)) | (((long)(*(p + 2))) << 16)) >> (posbits & 7L))) & ((unsigned long)bitmask));"]
1369 -> 1370 [label="posbits = posbits + ((long)n_bits);"]
1370 -> 1371 [label="[!(oldcode == (-1L))]"]
1370 -> 1372 [label="[oldcode == (-1L)]"]
1372 -> 1373 [label="[!(code >= 256L)]"]
1372 -> 1374 [label="[code >= 256L]"]
1374 -> 1375 [label="error((char *)\"corrupt input.\");" style="dotted" arrowhead="empty"]
1375 -> 1373 [label=""]
1373 -> 1376 [label="tmp___3 = outpos;"]
1376 -> 1377 [label="outpos = outpos + 1;"]
1377 -> 1378 [label="oldcode = code;"]
1378 -> 1379 [label="finchar = (int)oldcode;"]
1379 -> 1380 [label="*(outbuf + tmp___3) = (unsigned char)finchar;"]
1380 -> 1354 [label="continue"]
1371 -> 1382 [label="[!(code == 256L)]"]
1371 -> 1383 [label="[code == 256L]"]
1383 -> 1384 [label="[!(block_mode != 0)]"]
1383 -> 1385 [label="[block_mode != 0]"]
1385 -> 1386 [label="memset((void *)prev, 0, 256U);"]
1386 -> 1387 [label="free_ent = 256L;"]
1387 -> 1388 [label="posbits = (posbits - 1L) + (((long)(n_bits << 3)) - (((posbits - 1L) + ((long)(n_bits << 3))) % ((long)(n_bits << 3))));"]
1388 -> 1389 [label="n_bits = 9;"]
1389 -> 1390 [label="maxcode = (1L << n_bits) - 1L;"]
1390 -> 1391 [label="bitmask = (unsigned int)((1 << n_bits) - 1);"]
1391 -> 1330 [label="Goto: resetbuf"]
1384 -> 1382 [label=""]
1382 -> 1393 [label="incode = code;"]
1393 -> 1394 [label="stackp = (char_type *)(d_buf + 32767);"]
1394 -> 1395 [label="[!(code >= free_ent)]"]
1394 -> 1396 [label="[code >= free_ent]"]
1396 -> 1397 [label="[!(code > free_ent)]"]
1396 -> 1398 [label="[code > free_ent]"]
1398 -> 1399 [label="[!(!test)]"]
1398 -> 1400 [label="[!test]"]
1400 -> 1401 [label="[!(outpos > 0)]"]
1400 -> 1402 [label="[outpos > 0]"]
1402 -> 1403 [label="write_buf(out, (void *)((char *)outbuf), (unsigned int)outpos);" style="dotted" arrowhead="empty"]
1403 -> 1404 [label="bytes_out = (long)(((unsigned long)bytes_out) + ((unsigned long)outpos));"]
1404 -> 1399 [label=""]
1399 -> 1407 [label="[!(to_stdout != 0)]"]
1399 -> 1406 [label="[to_stdout != 0]"]
1406 -> 1408 [label="tmp___4 = \"corrupt input.\";"]
1408 -> 1405 [label=""]
1405 -> 1410 [label="error((char *)tmp___4);" style="dotted" arrowhead="empty"]
1410 -> 1397 [label=""]
1397 -> 1411 [label="stackp = stackp - 1;"]
1411 -> 1412 [label="*stackp = (unsigned char)finchar;"]
1412 -> 1413 [label="code = oldcode;"]
1413 -> 1395 [label=""]
1395 -> 1414 [label="while"]
1414 -> 1416 [label="[!(((unsigned long)code) >= 256UL)]"]
1414 -> 1415 [label="[((unsigned long)code) >= 256UL]"]
1415 -> 1417 [label="stackp = stackp - 1;"]
1417 -> 1418 [label="*stackp = *(window + code);"]
1418 -> 1419 [label="code = (long)(*(prev + code));"]
1419 -> 1414 [label=""]
1416 -> 1420 [label="stackp = stackp - 1;"]
1420 -> 1421 [label="finchar = (int)(*(window + code));"]
1421 -> 1422 [label="*stackp = (unsigned char)finchar;"]
1422 -> 1423 [label="i___0 = ((char_type *)(d_buf + 32767)) - stackp;"]
1423 -> 1426 [label="[!((outpos + i___0) >= 16384)]"]
1423 -> 1425 [label="[(outpos + i___0) >= 16384]"]
1425 -> 1427 [label="while"]
1427 -> 1428 [label=""]
1428 -> 1430 [label="[!(i___0 > (16384 - outpos))]"]
1428 -> 1431 [label="[i___0 > (16384 - outpos)]"]
1431 -> 1432 [label="i___0 = 16384 - outpos;"]
1432 -> 1430 [label=""]
1430 -> 1433 [label="[!(i___0 > 0)]"]
1430 -> 1434 [label="[i___0 > 0]"]
1434 -> 1435 [label="memcpy((void *)(outbuf + outpos), (const void *)stackp, (unsigned int)i___0);"]
1435 -> 1436 [label="outpos = outpos + i___0;"]
1436 -> 1433 [label=""]
1433 -> 1437 [label="[!(outpos >= 16384)]"]
1433 -> 1438 [label="[outpos >= 16384]"]
1438 -> 1439 [label="[!(!test)]"]
1438 -> 1440 [label="[!test]"]
1440 -> 1441 [label="write_buf(out, (void *)((char *)outbuf), (unsigned int)outpos);" style="dotted" arrowhead="empty"]
1426 -> 1449 [label="memcpy((void *)(outbuf + outpos), (const void *)stackp, (unsigned int)i___0);"]
1449 -> 1450 [label="outpos = outpos + i___0;"]
1450 -> 1424 [label=""]
1407 -> 1409 [label="tmp___4 = \"corrupt input. Use zcat to recover some data.\";"]
1409 -> 1405 [label=""]
1401 -> 1399 [label=""]
1356 -> 1458 [label="[!(!(rsize != 0))]"]
1356 -> 1459 [label="[!(rsize != 0)]"]
1459 -> 1329 [label="break"]
1329 -> 1461 [label="[!(!test)]"]
1329 -> 1462 [label="[!test]"]
1462 -> 1463 [label="[!(outpos > 0)]"]
1462 -> 1464 [label="[outpos > 0]"]
1464 -> 1465 [label="write_buf(out, (void *)((char *)outbuf), (unsigned int)outpos);" style="dotted" arrowhead="empty"]
1465 -> 1466 [label="bytes_out = (long)(((unsigned long)bytes_out) + ((unsigned long)outpos));"]
1466 -> 1461 [label=""]
1461 -> 1228 [label="return 0;"]
1463 -> 1461 [label=""]
1458 -> 1327 [label=""]
1327 -> 1328 [label=""]
1328 -> 1330 [label="Label: resetbuf"]
1446 -> 1427 [label=""]
1287 -> 1288 [label="maxbits = tmp___0;"]
1288 -> 1281 [label=""]
1281 -> 1289 [label="block_mode = maxbits & 128;"]
1289 -> 1290 [label="[!((maxbits & 96) != 0)]"]
1289 -> 1291 [label="[(maxbits & 96) != 0]"]
1291 -> 1292 [label="[!(!quiet)]"]
1291 -> 1293 [label="[!quiet]"]
1293 -> 1294 [label="tmp___1 = __getreent();"]
1294 -> 1295 [label="fprintf(tmp___1->_stderr, \"\n%s: %s: warning, unknown flags 0x%x\n\", progname, ifname, maxbits & 96);"]
1295 -> 1292 [label=""]
1292 -> 1296 [label="[!(exit_code == 0)]"]
1292 -> 1297 [label="[exit_code == 0]"]
1297 -> 1298 [label="exit_code = 2;"]
1298 -> 1290 [label=""]
1290 -> 1299 [label="maxbits = maxbits & 31;"]
1299 -> 1300 [label="maxmaxcode = 1L << maxbits;"]
1300 -> 1301 [label="[!(maxbits > 16)]"]
1300 -> 1302 [label="[maxbits > 16]"]
1302 -> 1303 [label="tmp___2 = __getreent();"]
1303 -> 1304 [label="fprintf(tmp___2->_stderr, \"\n%s: %s: compressed with %d bits, can only handle %d bits\n\", progname, ifname, maxbits, 16);"]
1304 -> 1305 [label="exit_code = 1;"]
1305 -> 1228 [label="return 1;"]
1301 -> 1307 [label="rsize = (int)insize;"]
1307 -> 1308 [label="n_bits = 9;"]
1308 -> 1309 [label="maxcode = (1L << n_bits) - 1L;"]
1309 -> 1310 [label="bitmask = (unsigned int)((1 << n_bits) - 1);"]
1310 -> 1311 [label="oldcode = -1L;"]
1311 -> 1312 [label="finchar = 0;"]
1312 -> 1313 [label="outpos = 0;"]
1313 -> 1314 [label="posbits = (long)(inptr << 3);"]
1314 -> 1317 [label="[!(block_mode != 0)]"]
1314 -> 1316 [label="[block_mode != 0]"]
1316 -> 1318 [label="free_ent = 257L;"]
1318 -> 1315 [label=""]
1315 -> 1320 [label="memset((void *)prev, 0, 256U);"]
1320 -> 1321 [label="code = 255L;"]
1321 -> 1322 [label="while"]
1322 -> 1324 [label="[!(code >= 0L)]"]
1322 -> 1323 [label="[code >= 0L]"]
1323 -> 1325 [label="*(window + code) = (unsigned char)code;"]
1325 -> 1326 [label="code = code - 1;"]
1326 -> 1322 [label=""]
1324 -> 1327 [label="while"]
1317 -> 1319 [label="free_ent = 256L;"]
1319 -> 1315 [label=""]
1296 -> 1290 [label=""]}
subgraph cluster_spec_initbufs {
label="spec_initbufs()"
}
subgraph cluster_get_istat {
label="get_istat()"
4017 -> 4018 [label="[!(((unsigned int)s) != ((unsigned int)((void *)0)))]"]
4017 -> 4019 [label="[((unsigned int)s) != ((unsigned int)((void *)0))]"]
4019 -> 4020 [label="perror((const char *)ifname);"]
4020 -> 4021 [label="exit_code = 1;"]
4021 -> 3989 [label="return 1;"]
4018 -> 4023 [label="tmp___0 = strlen((const char *)ifname);"]
4023 -> 4024 [label="ilen = (int)tmp___0;"]
4024 -> 4025 [label="tmp___1 = strcmp((const char *)z_suffix, \".gz\");"]
4025 -> 4026 [label="[!(tmp___1 == 0)]"]
4025 -> 4027 [label="[tmp___1 == 0]"]
4027 -> 4028 [label="suf = suf + 1;"]
4028 -> 4026 [label=""]
4026 -> 4029 [label="while"]
4029 -> 4030 [label=""]
4030 -> 4032 [label="s = *suf;"]
4032 -> 4033 [label="strcat(ifname, (const char *)s);"]
4033 -> 4034 [label="tmp___2 = do_stat(ifname, sbuf);" style="dotted" arrowhead="empty"]
4034 -> 4035 [label="[!(tmp___2 == 0)]"]
4034 -> 4036 [label="[tmp___2 == 0]"]
4036 -> 3989 [label="return 0;"]
4035 -> 4038 [label="ifname[ilen] = (char)'\x0';"]
4038 -> 4039 [label="suf = suf + 1;"]
4039 -> 4040 [label="[!(!(((unsigned int)(*suf)) != ((unsigned int)((void *)0))))]"]
4039 -> 4041 [label="[!(((unsigned int)(*suf)) != ((unsigned int)((void *)0)))]"]
4041 -> 4031 [label="break"]
4031 -> 4043 [label="strcat(ifname, (const char *)z_suffix);"]
4043 -> 4044 [label="perror((const char *)ifname);"]
4044 -> 4045 [label="exit_code = 1;"]
4045 -> 3989 [label="return 1;"]
4040 -> 4029 [label=""]
4008 -> 4009 [label="[!(tmp == 0)]"]
4008 -> 4010 [label="[tmp == 0]"]
4010 -> 3989 [label="return 0;"]
4009 -> 4012 [label="[!(!decompress)]"]
4009 -> 4013 [label="[!decompress]"]
4013 -> 4014 [label="perror((const char *)ifname);"]
4014 -> 4015 [label="exit_code = 1;"]
4015 -> 3989 [label="return 1;"]
4012 -> 4017 [label="s = get_suffix(ifname);" style="dotted" arrowhead="empty"]
3990 -> 3991 [label="Function start dummy edge"]
3991 -> 3993 [label="int ilen;"]
3993 -> 3995 [label="char **suf;"]
3995 -> 3997 [label="char *s;"]
3997 -> 3999 [label="int tmp;"]
3999 -> 4001 [label="size_t tmp___0;"]
4001 -> 4003 [label="int tmp___1;"]
4003 -> 4005 [label="int tmp___2;"]
4005 -> 4006 [label="suf = suffixes;"]
4006 -> 4007 [label="strcpy(ifname, (const char *)iname);"]
4007 -> 4008 [label="tmp = do_stat(ifname, sbuf);" style="dotted" arrowhead="empty"]}
subgraph cluster_inflate_fixed {
label="inflate_fixed()"
5804 -> 5805 [label="[!(tmp != 0)]"]
5804 -> 5806 [label="[tmp != 0]"]
5806 -> 5749 [label="return 1;"]
5805 -> 5808 [label="huft_free(tl);" style="dotted" arrowhead="empty"]
5809 -> 5749 [label="return 0;"]
5808 -> 5809 [label="huft_free(td);" style="dotted" arrowhead="empty"]
5802 -> 5749 [label="return i___0;"]
5799 -> 5800 [label="[!(i___0 > 1)]"]
5799 -> 5801 [label="[i___0 > 1]"]
5801 -> 5802 [label="huft_free(tl);" style="dotted" arrowhead="empty"]
5800 -> 5804 [label="tmp = inflate_codes(tl, td, bl, bd);" style="dotted" arrowhead="empty"]
5788 -> 5789 [label="[!(i___0 != 0)]"]
5788 -> 5790 [label="[i___0 != 0]"]
5790 -> 5749 [label="return i___0;"]
5789 -> 5792 [label="i___0 = 0;"]
5792 -> 5793 [label="while"]
5793 -> 5795 [label="[!(i___0 < 30)]"]
5793 -> 5794 [label="[i___0 < 30]"]
5794 -> 5796 [label="l[i___0] = 5U;"]
5796 -> 5797 [label="i___0 = i___0 + 1;"]
5797 -> 5793 [label=""]
5795 -> 5798 [label="bd = 5;"]
5798 -> 5799 [label="i___0 = huft_build(l, 30U, 0U, cpdist, cpdext, &td, &bd);" style="dotted" arrowhead="empty"]
5750 -> 5751 [label="Function start dummy edge"]
5751 -> 5753 [label="int i___0;"]
5753 -> 5755 [label="struct huft *tl;"]
5755 -> 5757 [label="struct huft *td;"]
5757 -> 5759 [label="int bl;"]
5759 -> 5761 [label="int bd;"]
5761 -> 5763 [label="unsigned int l[288];"]
5763 -> 5765 [label="int tmp;"]
5765 -> 5766 [label="i___0 = 0;"]
5766 -> 5767 [label="while"]
5767 -> 5769 [label="[!(i___0 < 144)]"]
5767 -> 5768 [label="[i___0 < 144]"]
5768 -> 5770 [label="l[i___0] = 8U;"]
5770 -> 5771 [label="i___0 = i___0 + 1;"]
5771 -> 5767 [label=""]
5769 -> 5772 [label="while"]
5772 -> 5774 [label="[!(i___0 < 256)]"]
5772 -> 5773 [label="[i___0 < 256]"]
5773 -> 5775 [label="l[i___0] = 9U;"]
5775 -> 5776 [label="i___0 = i___0 + 1;"]
5776 -> 5772 [label=""]
5774 -> 5777 [label="while"]
5777 -> 5779 [label="[!(i___0 < 280)]"]
5777 -> 5778 [label="[i___0 < 280]"]
5778 -> 5780 [label="l[i___0] = 7U;"]
5780 -> 5781 [label="i___0 = i___0 + 1;"]
5781 -> 5777 [label=""]
5779 -> 5782 [label="while"]
5782 -> 5784 [label="[!(i___0 < 288)]"]
5782 -> 5783 [label="[i___0 < 288]"]
5783 -> 5785 [label="l[i___0] = 8U;"]
5785 -> 5786 [label="i___0 = i___0 + 1;"]
5786 -> 5782 [label=""]
5784 -> 5787 [label="bl = 7;"]
5787 -> 5788 [label="i___0 = huft_build(l, 288U, 257U, cplens, cplext, &tl, &bl);" style="dotted" arrowhead="empty"]}
subgraph cluster_deflate_fast {
label="deflate_fast()"
2498 -> 2499 [label="Function start dummy edge"]
2499 -> 2501 [label="IPos hash_head;"]
2501 -> 2503 [label="int flush;"]
2503 -> 2505 [label="unsigned int match_length;"]
2505 -> 2507 [label="int tmp;"]
2507 -> 2509 [label="char *tmp___0;"]
2509 -> 2511 [label="char *tmp___1;"]
2511 -> 2513 [label="ulg tmp___2;"]
2513 -> 2514 [label="match_length = 0U;"]
2514 -> 2515 [label="prev_length = 2U;"]
2515 -> 2516 [label="while"]
2516 -> 2518 [label="[!(lookahead != 0U)]"]
2516 -> 2517 [label="[lookahead != 0U]"]
2517 -> 2519 [label="ins_h = ((ins_h << 5) ^ ((unsigned int)(*(window + ((strstart + 3U) - 1U))))) & (((unsigned int)(1 << 15)) - 1U);"]
2519 -> 2520 [label="hash_head = (unsigned int)(*((prev + 32768) + ins_h));"]
2520 -> 2521 [label="*(prev + (strstart & 32767U)) = (unsigned short)hash_head;"]
2521 -> 2522 [label="*((prev + 32768) + ins_h) = (unsigned short)strstart;"]
2522 -> 2523 [label="[!(hash_head != 0U)]"]
2522 -> 2524 [label="[hash_head != 0U]"]
2524 -> 2525 [label="[!((strstart - hash_head) <= 32506U)]"]
2524 -> 2526 [label="[(strstart - hash_head) <= 32506U]"]
2526 -> 2527 [label="tmp = longest_match(hash_head);" style="dotted" arrowhead="empty"]
2527 -> 2528 [label="match_length = (unsigned int)tmp;"]
2528 -> 2529 [label="[!(match_length > lookahead)]"]
2528 -> 2530 [label="[match_length > lookahead]"]
2530 -> 2531 [label="match_length = lookahead;"]
2531 -> 2523 [label=""]
2523 -> 2534 [label="[!(match_length >= 3U)]"]
2523 -> 2533 [label="[match_length >= 3U]"]
2533 -> 2535 [label="flush = ct_tally((int)(strstart - match_start), (int)(match_length - 3U));" style="dotted" arrowhead="empty"]
2535 -> 2536 [label="lookahead = lookahead - match_length;"]
2536 -> 2539 [label="[!(match_length <= max_lazy_match)]"]
2536 -> 2538 [label="[match_length <= max_lazy_match]"]
2538 -> 2540 [label="match_length = match_length - 1U;"]
2540 -> 2541 [label="while"]
2541 -> 2542 [label=""]
2542 -> 2544 [label="strstart = strstart + 1U;"]
2544 -> 2545 [label="ins_h = ((ins_h << 5) ^ ((unsigned int)(*(window + ((strstart + 3U) - 1U))))) & (((unsigned int)(1 << 15)) - 1U);"]
2545 -> 2546 [label="hash_head = (unsigned int)(*((prev + 32768) + ins_h));"]
2546 -> 2547 [label="*(prev + (strstart & 32767U)) = (unsigned short)hash_head;"]
2547 -> 2548 [label="*((prev + 32768) + ins_h) = (unsigned short)strstart;"]
2548 -> 2549 [label="match_length = match_length - 1U;"]
2549 -> 2550 [label="[!(!(match_length != 0U))]"]
2549 -> 2551 [label="[!(match_length != 0U)]"]
2551 -> 2543 [label="break"]
2543 -> 2553 [label="strstart = strstart + 1U;"]
2553 -> 2537 [label=""]
2537 -> 2532 [label=""]
2532 -> 2561 [label="[!(flush != 0)]"]
2532 -> 2562 [label="[flush != 0]"]
2562 -> 2565 [label="[!(block_start >= 0L)]"]
2562 -> 2564 [label="[block_start >= 0L]"]
2564 -> 2566 [label="tmp___0 = (char *)(window + ((unsigned int)block_start));"]
2566 -> 2563 [label=""]
2563 -> 2568 [label="flush_block(tmp___0, (unsigned long)(((long)strstart) - block_start), 0);" style="dotted" arrowhead="empty"]
2568 -> 2569 [label="block_start = (long)strstart;"]
2569 -> 2561 [label=""]
2561 -> 2570 [label="while"]
2570 -> 2571 [label=""]
2571 -> 2575 [label="[!(lookahead < 262U)]"]
2571 -> 2574 [label="[lookahead < 262U]"]
2574 -> 2576 [label="[!(!(!eofile))]"]
2574 -> 2577 [label="[!(!eofile)]"]
2577 -> 2572 [label="break"]
2572 -> 2516 [label=""]
2576 -> 2573 [label=""]
2573 -> 2580 [label="fill_window();" style="dotted" arrowhead="empty"]
2580 -> 2570 [label=""]
2575 -> 2572 [label="break"]
2586 -> 2497 [label="return tmp___2;"]
2565 -> 2567 [label="tmp___0 = (char *)((void *)0);"]
2567 -> 2563 [label=""]
2550 -> 2541 [label=""]
2539 -> 2554 [label="strstart = strstart + match_length;"]
2554 -> 2555 [label="match_length = 0U;"]
2555 -> 2556 [label="ins_h = (unsigned int)(*(window + strstart));"]
2556 -> 2557 [label="ins_h = ((ins_h << 5) ^ ((unsigned int)(*(window + (strstart + 1U))))) & (((unsigned int)(1 << 15)) - 1U);"]
2557 -> 2537 [label=""]
2558 -> 2559 [label="lookahead = lookahead - 1U;"]
2559 -> 2560 [label="strstart = strstart + 1U;"]
2560 -> 2532 [label=""]
2534 -> 2558 [label="flush = ct_tally(0, (int)(*(window + strstart)));" style="dotted" arrowhead="empty"]
2529 -> 2523 [label=""]
2525 -> 2523 [label=""]
2518 -> 2583 [label="[!(block_start >= 0L)]"]
2518 -> 2582 [label="[block_start >= 0L]"]
2582 -> 2584 [label="tmp___1 = (char *)(window + ((unsigned int)block_start));"]
2584 -> 2581 [label=""]
2581 -> 2586 [label="tmp___2 = flush_block(tmp___1, (unsigned long)(((long)strstart) - block_start), 1);" style="dotted" arrowhead="empty"]
2583 -> 2585 [label="tmp___1 = (char *)((void *)0);"]
2585 -> 2581 [label=""]}
subgraph cluster_unpack {
label="unpack()"
249 -> 247 [label=""]
247 -> 250 [label="valid = valid - len;"]
250 -> 193 [label=""]
193 -> 194 [label=""]
194 -> 196 [label="while"]
196 -> 198 [label="[!(valid < peek_bits)]"]
196 -> 197 [label="[valid < peek_bits]"]
197 -> 201 [label="[!(inptr < insize)]"]
197 -> 200 [label="[inptr < insize]"]
200 -> 202 [label="tmp = inptr;"]
202 -> 203 [label="inptr = inptr + 1U;"]
203 -> 204 [label="tmp___1 = (int)(*(inbuf + tmp));"]
204 -> 199 [label=""]
199 -> 207 [label="bitbuf = (bitbuf << 8) | ((unsigned long)tmp___1);"]
207 -> 208 [label="valid = valid + 8;"]
208 -> 196 [label=""]
201 -> 205 [label="tmp___0 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
205 -> 206 [label="tmp___1 = tmp___0;"]
206 -> 199 [label=""]
198 -> 209 [label="peek = (unsigned int)((bitbuf >> (valid - peek_bits)) & ((unsigned long)peek_mask));"]
209 -> 210 [label="len = (int)(*(outbuf + peek));"]
210 -> 213 [label="[!(len > 0)]"]
210 -> 212 [label="[len > 0]"]
212 -> 214 [label="peek = peek >> (peek_bits - len);"]
214 -> 211 [label=""]
211 -> 239 [label="[!(peek == eob)]"]
211 -> 240 [label="[peek == eob]"]
240 -> 241 [label="[!(len == max_len)]"]
240 -> 242 [label="[len == max_len]"]
242 -> 195 [label="break"]
195 -> 251 [label="flush_window();" style="dotted" arrowhead="empty"]
251 -> 252 [label="[!(orig_len != ((unsigned long)bytes_out))]"]
251 -> 253 [label="[orig_len != ((unsigned long)bytes_out)]"]
253 -> 254 [label="error(\"invalid compressed data--length error\");" style="dotted" arrowhead="empty"]
254 -> 252 [label=""]
252 -> 158 [label="return 0;"]
241 -> 239 [label=""]
239 -> 244 [label="tmp___5 = outcnt;"]
244 -> 245 [label="outcnt = outcnt + 1U;"]
245 -> 246 [label="*(window + tmp___5) = literal[peek + ((unsigned int)(lit_base[len]))];"]
246 -> 247 [label="[!(outcnt == 32768U)]"]
246 -> 248 [label="[outcnt == 32768U]"]
248 -> 249 [label="flush_window();" style="dotted" arrowhead="empty"]
213 -> 215 [label="mask = (ulg )peek_mask;"]
215 -> 216 [label="len = peek_bits;"]
216 -> 217 [label="while"]
217 -> 218 [label=""]
218 -> 220 [label="len = len + 1;"]
220 -> 221 [label="mask = (mask << 1) + 1UL;"]
221 -> 222 [label="while"]
222 -> 224 [label="[!(valid < len)]"]
222 -> 223 [label="[valid < len]"]
223 -> 227 [label="[!(inptr < insize)]"]
223 -> 226 [label="[inptr < insize]"]
226 -> 228 [label="tmp___2 = inptr;"]
228 -> 229 [label="inptr = inptr + 1U;"]
229 -> 230 [label="tmp___4 = (int)(*(inbuf + tmp___2));"]
230 -> 225 [label=""]
225 -> 233 [label="bitbuf = (bitbuf << 8) | ((unsigned long)tmp___4);"]
233 -> 234 [label="valid = valid + 8;"]
234 -> 222 [label=""]
227 -> 231 [label="tmp___3 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
231 -> 232 [label="tmp___4 = tmp___3;"]
232 -> 225 [label=""]
224 -> 235 [label="peek = (unsigned int)((bitbuf >> (valid - len)) & mask);"]
235 -> 236 [label="[!(!(peek < ((unsigned int)(parents[len]))))]"]
235 -> 237 [label="[!(peek < ((unsigned int)(parents[len])))]"]
237 -> 219 [label="break"]
219 -> 211 [label=""]
236 -> 217 [label=""]
187 -> 188 [label="build_tree1();" style="dotted" arrowhead="empty"]
188 -> 189 [label="valid = 0;"]
189 -> 190 [label="bitbuf = 0UL;"]
190 -> 191 [label="peek_mask = (unsigned int)((1 << peek_bits) - 1);"]
191 -> 192 [label="eob = (unsigned int)((leaves[max_len]) - 1);"]
192 -> 193 [label="while"]}
subgraph cluster_make_simple_name {
label="make_simple_name()"
}
subgraph cluster_set_file_type {
label="set_file_type()"
7535 -> 7536 [label="Function start dummy edge"]
7536 -> 7538 [label="int n;"]
7538 -> 7540 [label="unsigned int ascii_freq;"]
7540 -> 7542 [label="unsigned int bin_freq;"]
7542 -> 7544 [label="int tmp;"]
7544 -> 7546 [label="int tmp___0;"]
7546 -> 7548 [label="int tmp___1;"]
7548 -> 7549 [label="n = 0;"]
7549 -> 7550 [label="ascii_freq = 0U;"]
7550 -> 7551 [label="bin_freq = 0U;"]
7551 -> 7552 [label="while"]
7552 -> 7554 [label="[!(n < 7)]"]
7552 -> 7553 [label="[n < 7]"]
7553 -> 7555 [label="tmp = n;"]
7555 -> 7556 [label="n = n + 1;"]
7556 -> 7557 [label="bin_freq = bin_freq + ((unsigned int)((dyn_ltree[tmp]).fc.freq));"]
7557 -> 7552 [label=""]
7554 -> 7558 [label="while"]
7558 -> 7560 [label="[!(n < 128)]"]
7558 -> 7559 [label="[n < 128]"]
7559 -> 7561 [label="tmp___0 = n;"]
7561 -> 7562 [label="n = n + 1;"]
7562 -> 7563 [label="ascii_freq = ascii_freq + ((unsigned int)((dyn_ltree[tmp___0]).fc.freq));"]
7563 -> 7558 [label=""]
7560 -> 7564 [label="while"]
7564 -> 7566 [label="[!(n < 256)]"]
7564 -> 7565 [label="[n < 256]"]
7565 -> 7567 [label="tmp___1 = n;"]
7567 -> 7568 [label="n = n + 1;"]
7568 -> 7569 [label="bin_freq = bin_freq + ((unsigned int)((dyn_ltree[tmp___1]).fc.freq));"]
7569 -> 7564 [label=""]
7566 -> 7572 [label="[!(bin_freq > (ascii_freq >> 2))]"]
7566 -> 7571 [label="[bin_freq > (ascii_freq >> 2)]"]
7571 -> 7573 [label="*file_type = (unsigned short)0;"]
7573 -> 7570 [label=""]
7570 -> 7575 [label="[!(((int)(*file_type)) == 0)]"]
7570 -> 7576 [label="[((int)(*file_type)) == 0]"]
7576 -> 7575 [label=""]
7575 -> 7534 [label="return;"]
7572 -> 7574 [label="*file_type = (unsigned short)1;"]
7574 -> 7570 [label=""]}
subgraph cluster_pqdownheap {
label="pqdownheap()"
6781 -> 6782 [label="Function start dummy edge"]
6782 -> 6784 [label="int v;"]
6784 -> 6786 [label="int j___0;"]
6786 -> 6787 [label="v = heap[k];"]
6787 -> 6788 [label="j___0 = k << 1;"]
6788 -> 6789 [label="while"]
6789 -> 6791 [label="[!(j___0 <= heap_len)]"]
6789 -> 6790 [label="[j___0 <= heap_len]"]
6790 -> 6792 [label="[!(j___0 < heap_len)]"]
6790 -> 6793 [label="[j___0 < heap_len]"]
6793 -> 6796 [label="[!(((int)((tree + (heap[j___0 + 1]))->fc.freq)) < ((int)((tree + (heap[j___0]))->fc.freq)))]"]
6793 -> 6795 [label="[((int)((tree + (heap[j___0 + 1]))->fc.freq)) < ((int)((tree + (heap[j___0]))->fc.freq))]"]
6795 -> 6797 [label="j___0 = j___0 + 1;"]
6797 -> 6792 [label=""]
6792 -> 6805 [label="[!(((int)((tree + v)->fc.freq)) < ((int)((tree + (heap[j___0]))->fc.freq)))]"]
6792 -> 6804 [label="[((int)((tree + v)->fc.freq)) < ((int)((tree + (heap[j___0]))->fc.freq))]"]
6804 -> 6791 [label="break"]
6791 -> 6815 [label="heap[k] = v;"]
6815 -> 6780 [label="return;"]
6805 -> 6807 [label="[!(((int)((tree + v)->fc.freq)) == ((int)((tree + (heap[j___0]))->fc.freq)))]"]
6805 -> 6808 [label="[((int)((tree + v)->fc.freq)) == ((int)((tree + (heap[j___0]))->fc.freq))]"]
6808 -> 6809 [label="[!(((int)(depth[v])) <= ((int)(depth[heap[j___0]])))]"]
6808 -> 6810 [label="[((int)(depth[v])) <= ((int)(depth[heap[j___0]]))]"]
6810 -> 6791 [label="break"]
6809 -> 6803 [label=""]
6803 -> 6812 [label="heap[k] = heap[j___0];"]
6812 -> 6813 [label="k = j___0;"]
6813 -> 6814 [label="j___0 = j___0 << 1;"]
6814 -> 6789 [label=""]
6807 -> 6803 [label=""]
6796 -> 6798 [label="[!(((int)((tree + (heap[j___0 + 1]))->fc.freq)) == ((int)((tree + (heap[j___0]))->fc.freq)))]"]
6796 -> 6799 [label="[((int)((tree + (heap[j___0 + 1]))->fc.freq)) == ((int)((tree + (heap[j___0]))->fc.freq))]"]
6799 -> 6800 [label="[!(((int)(depth[heap[j___0 + 1]])) <= ((int)(depth[heap[j___0]])))]"]
6799 -> 6801 [label="[((int)(depth[heap[j___0 + 1]])) <= ((int)(depth[heap[j___0]]))]"]
6801 -> 6802 [label="j___0 = j___0 + 1;"]
6802 -> 6792 [label=""]
6800 -> 6792 [label=""]
6798 -> 6792 [label=""]}
subgraph cluster_read_c_len {
label="read_c_len()"
1802 -> 1803 [label="c = (int)(tmp___1 + 3U);"]
1803 -> 1795 [label=""]
1795 -> 1806 [label="while"]
1806 -> 1807 [label=""]
1807 -> 1809 [label="c = c - 1;"]
1809 -> 1810 [label="[!(!(c >= 0))]"]
1809 -> 1811 [label="[!(c >= 0)]"]
1811 -> 1808 [label="break"]
1808 -> 1792 [label=""]
1792 -> 1772 [label=""]
1772 -> 1774 [label="[!(i__1 < n)]"]
1772 -> 1773 [label="[i__1 < n]"]
1773 -> 1775 [label="c = (int)(pt_table[bitbuf >> ((16U * (sizeof(char))) - 8U)]);"]
1775 -> 1776 [label="[!(c >= 19)]"]
1775 -> 1777 [label="[c >= 19]"]
1777 -> 1778 [label="mask = 1U << (((16U * (sizeof(char))) - 1U) - 8U);"]
1778 -> 1779 [label="while"]
1779 -> 1780 [label=""]
1780 -> 1784 [label="[!((bitbuf & ((unsigned long)mask)) != 0UL)]"]
1780 -> 1783 [label="[(bitbuf & ((unsigned long)mask)) != 0UL]"]
1783 -> 1785 [label="c = (int)(*((prev + 32768) + c));"]
1785 -> 1782 [label=""]
1782 -> 1787 [label="mask = mask >> 1;"]
1787 -> 1788 [label="[!(!(c >= 19))]"]
1787 -> 1789 [label="[!(c >= 19)]"]
1789 -> 1781 [label="break"]
1781 -> 1776 [label=""]
1776 -> 1791 [label="fillbuf((int)(pt_len[c]));" style="dotted" arrowhead="empty"]
1791 -> 1794 [label="[!(c <= 2)]"]
1791 -> 1793 [label="[c <= 2]"]
1793 -> 1797 [label="[!(c == 0)]"]
1793 -> 1796 [label="[c == 0]"]
1796 -> 1798 [label="c = 1;"]
1798 -> 1795 [label=""]
1797 -> 1801 [label="[!(c == 1)]"]
1797 -> 1800 [label="[c == 1]"]
1800 -> 1802 [label="tmp___1 = getbits(4);" style="dotted" arrowhead="empty"]
1801 -> 1804 [label="tmp___2 = getbits(9);" style="dotted" arrowhead="empty"]
1804 -> 1805 [label="c = (int)(tmp___2 + 20U);"]
1805 -> 1795 [label=""]
1794 -> 1816 [label="tmp___4 = i__1;"]
1816 -> 1817 [label="i__1 = i__1 + 1;"]
1817 -> 1818 [label="*(outbuf + tmp___4) = (unsigned char)(c - 2);"]
1818 -> 1792 [label=""]
1788 -> 1779 [label=""]
1784 -> 1786 [label="c = (int)(*(prev + c));"]
1786 -> 1782 [label=""]
1774 -> 1819 [label="while"]
1819 -> 1821 [label="[!(i__1 < 510)]"]
1819 -> 1820 [label="[i__1 < 510]"]
1820 -> 1822 [label="tmp___5 = i__1;"]
1822 -> 1823 [label="i__1 = i__1 + 1;"]
1823 -> 1824 [label="*(outbuf + tmp___5) = (unsigned char)0;"]
1824 -> 1819 [label=""]
1821 -> 1825 [label="make_table(510, outbuf, 12, d_buf);" style="dotted" arrowhead="empty"]
1825 -> 1754 [label=""]
1754 -> 1727 [label="return;"]
1810 -> 1813 [label="tmp___3 = i__1;"]
1813 -> 1814 [label="i__1 = i__1 + 1;"]
1814 -> 1815 [label="*(outbuf + tmp___3) = (unsigned char)0;"]
1815 -> 1806 [label=""]
1757 -> 1758 [label="c = (int)tmp___0;"]
1758 -> 1759 [label="i__1 = 0;"]
1759 -> 1760 [label="while"]
1760 -> 1762 [label="[!(i__1 < 510)]"]
1760 -> 1761 [label="[i__1 < 510]"]
1761 -> 1763 [label="*(outbuf + i__1) = (unsigned char)0;"]
1763 -> 1764 [label="i__1 = i__1 + 1;"]
1764 -> 1760 [label=""]
1762 -> 1765 [label="i__1 = 0;"]
1765 -> 1766 [label="while"]
1766 -> 1768 [label="[!(i__1 < 4096)]"]
1766 -> 1767 [label="[i__1 < 4096]"]
1767 -> 1769 [label="*(d_buf + i__1) = (unsigned short)c;"]
1769 -> 1770 [label="i__1 = i__1 + 1;"]
1770 -> 1766 [label=""]
1768 -> 1754 [label=""]
1752 -> 1753 [label="n = (int)tmp;"]
1753 -> 1756 [label="[!(n == 0)]"]
1753 -> 1755 [label="[n == 0]"]
1755 -> 1757 [label="tmp___0 = getbits(9);" style="dotted" arrowhead="empty"]
1756 -> 1771 [label="i__1 = 0;"]
1771 -> 1772 [label="while"]
1728 -> 1729 [label="Function start dummy edge"]
1729 -> 1731 [label="int i__1;"]
1731 -> 1733 [label="int c;"]
1733 -> 1735 [label="int n;"]
1735 -> 1737 [label="unsigned int mask;"]
1737 -> 1739 [label="unsigned int tmp;"]
1739 -> 1741 [label="unsigned int tmp___0;"]
1741 -> 1743 [label="unsigned int tmp___1;"]
1743 -> 1745 [label="unsigned int tmp___2;"]
1745 -> 1747 [label="int tmp___3;"]
1747 -> 1749 [label="int tmp___4;"]
1749 -> 1751 [label="int tmp___5;"]
1751 -> 1752 [label="tmp = getbits(9);" style="dotted" arrowhead="empty"]}
subgraph cluster_my_strlen {
label="my_strlen()"
2722 -> 2723 [label="Function start dummy edge"]
2723 -> 2725 [label="int n;"]
2725 -> 2727 [label="const char *tmp;"]
2727 -> 2728 [label="n = 0;"]
2728 -> 2729 [label="while"]
2729 -> 2730 [label=""]
2730 -> 2732 [label="tmp = str;"]
2732 -> 2733 [label="str = str + 1;"]
2733 -> 2734 [label="[!(!(*tmp))]"]
2733 -> 2735 [label="[!(*tmp)]"]
2735 -> 2731 [label="break"]
2731 -> 2721 [label="return n;"]
2734 -> 2737 [label="n = n + 1;"]
2737 -> 2729 [label=""]}
subgraph cluster_spec_uncompress {
label="spec_uncompress()"
6615 -> 6606 [label="return;"]
6611 -> 6612 [label="ifd = in;"]
6612 -> 6613 [label="ofd = out;"]
6613 -> 6614 [label="method = get_method(1);" style="dotted" arrowhead="empty"]
6614 -> 6615 [label="unzip(ifd, ofd);" style="dotted" arrowhead="empty"]}
subgraph cluster__getopt_internal {
label="_getopt_internal()"
2793 -> 2794 [label="Function start dummy edge"]
2794 -> 2796 [label="int option_index;"]
2796 -> 2798 [label="char *tmp;"]
2798 -> 2800 [label="int tmp___0;"]
2800 -> 2802 [label="int tmp___1;"]
2802 -> 2804 [label="int tmp___2;"]
2804 -> 2806 [label="const struct option *p;"]
2806 -> 2808 [label="char *s;"]
2808 -> 2810 [label="int exact;"]
2810 -> 2812 [label="int ambig;"]
2812 -> 2814 [label="const struct option *pfound;"]
2814 -> 2816 [label="int indfound;"]
2816 -> 2818 [label="int tmp___3;"]
2818 -> 2820 [label="int tmp___4;"]
2820 -> 2822 [label="struct _reent *tmp___5;"]
2822 -> 2824 [label="int tmp___6;"]
2824 -> 2826 [label="struct _reent *tmp___7;"]
2826 -> 2828 [label="struct _reent *tmp___8;"]
2828 -> 2830 [label="int tmp___9;"]
2830 -> 2832 [label="int tmp___10;"]
2832 -> 2834 [label="struct _reent *tmp___11;"]
2834 -> 2836 [label="int tmp___12;"]
2836 -> 2838 [label="int tmp___13;"]
2838 -> 2840 [label="int tmp___14;"]
2840 -> 2842 [label="struct _reent *tmp___15;"]
2842 -> 2844 [label="struct _reent *tmp___16;"]
2844 -> 2846 [label="char *tmp___17;"]
2846 -> 2848 [label="char c;"]
2848 -> 2850 [label="char *tmp___18;"]
2850 -> 2852 [label="char *temp;"]
2852 -> 2854 [label="char *tmp___19;"]
2854 -> 2856 [label="struct _reent *tmp___20;"]
2856 -> 2858 [label="struct _reent *tmp___21;"]
2858 -> 2860 [label="int tmp___22;"]
2860 -> 2861 [label="optarg = (char *)0;"]
2861 -> 2862 [label="[!(optind == 0)]"]
2861 -> 2863 [label="[optind == 0]"]
2863 -> 2864 [label="optind = 1;"]
2864 -> 2865 [label="last_nonopt = optind;"]
2865 -> 2866 [label="first_nonopt = last_nonopt;"]
2866 -> 2867 [label="nextchar = (char *)((void *)0);"]
2867 -> 2870 [label="[!(((const int)(*(optstring + 0))) == 45)]"]
2867 -> 2869 [label="[((const int)(*(optstring + 0))) == 45]"]
2869 -> 2871 [label="ordering = (enum __anonenum_ordering_22 )2;"]
2871 -> 2872 [label="optstring = optstring + 1;"]
2872 -> 2862 [label=""]
2862 -> 2886 [label="[!(((unsigned int)nextchar) == ((unsigned int)((void *)0)))]"]
2862 -> 2885 [label="[((unsigned int)nextchar) == ((unsigned int)((void *)0))]"]
2885 -> 2890 [label="Goto: _L___2"]
2890 -> 2891 [label="[!(((unsigned int)ordering) == 1U)]"]
2890 -> 2892 [label="[((unsigned int)ordering) == 1U]"]
2892 -> 2895 [label="[!(first_nonopt != last_nonopt)]"]
2892 -> 2894 [label="[first_nonopt != last_nonopt]"]
2894 -> 2898 [label="[!(last_nonopt != optind)]"]
2894 -> 2897 [label="[last_nonopt != optind]"]
2897 -> 2899 [label="exchange((char **)argv);" style="dotted" arrowhead="empty"]
2931 -> 2928 [label=""]
2928 -> 2925 [label=""]
2925 -> 2937 [label="last_nonopt = argc;"]
2937 -> 2938 [label="optind = argc;"]
2938 -> 2919 [label=""]
2919 -> 2939 [label="[!(optind == argc)]"]
2919 -> 2940 [label="[optind == argc]"]
2940 -> 2941 [label="[!(first_nonopt != last_nonopt)]"]
2940 -> 2942 [label="[first_nonopt != last_nonopt]"]
2942 -> 2943 [label="optind = first_nonopt;"]
2943 -> 2941 [label=""]
2941 -> 2792 [label="return -1;"]
2939 -> 2947 [label="[!(((int)(*((*(argv + optind)) + 0))) != 45)]"]
2939 -> 2946 [label="[((int)(*((*(argv + optind)) + 0))) != 45]"]
2946 -> 2951 [label="Goto: _L___1"]
2951 -> 2952 [label="[!(((unsigned int)ordering) == 0U)]"]
2951 -> 2953 [label="[((unsigned int)ordering) == 0U]"]
2953 -> 2792 [label="return -1;"]
2952 -> 2955 [label="tmp___1 = optind;"]
2955 -> 2956 [label="optind = optind + 1;"]
2956 -> 2957 [label="optarg = (char *)(*(argv + tmp___1));"]
2957 -> 2792 [label="return 1;"]
2947 -> 2949 [label="[!(((int)(*((*(argv + optind)) + 1))) == 0)]"]
2947 -> 2950 [label="[((int)(*((*(argv + optind)) + 1))) == 0]"]
2950 -> 2951 [label="Label: _L___1"]
2949 -> 2945 [label=""]
2945 -> 2961 [label="[!(((unsigned int)longopts___0) != ((unsigned int)((void *)0)))]"]
2945 -> 2960 [label="[((unsigned int)longopts___0) != ((unsigned int)((void *)0))]"]
2960 -> 2964 [label="[!(((int)(*((*(argv + optind)) + 1))) == 45)]"]
2960 -> 2963 [label="[((int)(*((*(argv + optind)) + 1))) == 45]"]
2963 -> 2965 [label="tmp___2 = 1;"]
2965 -> 2962 [label=""]
2962 -> 2959 [label=""]
2959 -> 2968 [label="nextchar = (char *)(((*(argv + optind)) + 1) + tmp___2);"]
2968 -> 2884 [label=""]
2884 -> 2969 [label="[!(((unsigned int)longopts___0) != ((unsigned int)((void *)0)))]"]
2884 -> 2970 [label="[((unsigned int)longopts___0) != ((unsigned int)((void *)0))]"]
2970 -> 2971 [label="[!(((int)(*((*(argv + optind)) + 0))) == 45)]"]
2970 -> 2972 [label="[((int)(*((*(argv + optind)) + 0))) == 45]"]
2972 -> 2975 [label="[!(((int)(*((*(argv + optind)) + 1))) == 45)]"]
2972 -> 2974 [label="[((int)(*((*(argv + optind)) + 1))) == 45]"]
2974 -> 2979 [label="Goto: _L___4"]
2979 -> 2980 [label="s = nextchar;"]
2980 -> 2981 [label="exact = 0;"]
2981 -> 2982 [label="ambig = 0;"]
2982 -> 2983 [label="pfound = (const struct option *)((void *)0);"]
2983 -> 2984 [label="indfound = 0;"]
2984 -> 2985 [label="while"]
2985 -> 2986 [label=""]
2986 -> 2990 [label="[!((*s) != 0)]"]
2986 -> 2989 [label="[(*s) != 0]"]
2989 -> 2991 [label="[!(!(((int)(*s)) != 61))]"]
2989 -> 2992 [label="[!(((int)(*s)) != 61)]"]
2992 -> 2987 [label="break"]
2987 -> 2996 [label="p = longopts___0;"]
2996 -> 2997 [label="option_index = 0;"]
2997 -> 2998 [label="while"]
2998 -> 3000 [label="[!((p->name) != 0)]"]
2998 -> 2999 [label="[(p->name) != 0]"]
2999 -> 3001 [label="tmp___4 = strncmp((const char *)(p->name), (const char *)nextchar, (unsigned int)(s - nextchar));"]
3001 -> 3002 [label="[!(!tmp___4)]"]
3001 -> 3003 [label="[!tmp___4]"]
3003 -> 3004 [label="tmp___3 = my_strlen((const char *)(p->name));" style="dotted" arrowhead="empty"]
3067 -> 3068 [label="nextchar = nextchar + tmp___12;"]
3068 -> 3071 [label="[!(((const int)(*(optstring + 0))) == 58)]"]
3068 -> 3070 [label="[((const int)(*(optstring + 0))) == 58]"]
3070 -> 3072 [label="tmp___13 = ':';"]
3072 -> 3069 [label=""]
3069 -> 2792 [label="return tmp___13;"]
3071 -> 3073 [label="tmp___13 = '\x0';"]
3073 -> 3069 [label=""]
3052 -> 3053 [label="nextchar = nextchar + tmp___9;"]
3053 -> 2792 [label="return '\x0';"]
3075 -> 3076 [label="nextchar = nextchar + tmp___14;"]
3076 -> 3077 [label="[!(((unsigned int)longind) != ((unsigned int)((void *)0)))]"]
3076 -> 3078 [label="[((unsigned int)longind) != ((unsigned int)((void *)0))]"]
3078 -> 3079 [label="*longind = option_index;"]
3079 -> 3077 [label=""]
3077 -> 3080 [label="[!((pfound->flag) != 0)]"]
3077 -> 3081 [label="[(pfound->flag) != 0]"]
3081 -> 3082 [label="*(pfound->flag) = (int)(pfound->val);"]
3082 -> 2792 [label="return 0;"]
3080 -> 2792 [label="return (int)(pfound->val);"]
3028 -> 3029 [label="nextchar = nextchar + tmp___6;"]
3029 -> 3030 [label="optind = optind + 1;"]
3030 -> 2792 [label="return '\x0';"]
3004 -> 3007 [label="[!((s - nextchar) == tmp___3)]"]
3004 -> 3006 [label="[(s - nextchar) == tmp___3]"]
3006 -> 3008 [label="pfound = p;"]
3008 -> 3009 [label="indfound = option_index;"]
3009 -> 3010 [label="exact = 1;"]
3010 -> 3000 [label="break"]
3000 -> 3020 [label="[!(ambig != 0)]"]
3000 -> 3021 [label="[ambig != 0]"]
3021 -> 3022 [label="[!(!exact)]"]
3021 -> 3023 [label="[!exact]"]
3023 -> 3024 [label="[!(opterr != 0)]"]
3023 -> 3025 [label="[opterr != 0]"]
3025 -> 3026 [label="tmp___5 = __getreent();"]
3026 -> 3027 [label="fprintf(tmp___5->_stderr, \"%s: option `%s\' is ambiguous\n\", *(argv + 0), *(argv + optind));"]
3027 -> 3024 [label=""]
3024 -> 3028 [label="tmp___6 = my_strlen((const char *)nextchar);" style="dotted" arrowhead="empty"]
3022 -> 3020 [label=""]
3020 -> 3032 [label="[!(((unsigned int)pfound) != ((unsigned int)((void *)0)))]"]
3020 -> 3033 [label="[((unsigned int)pfound) != ((unsigned int)((void *)0))]"]
3033 -> 3034 [label="option_index = indfound;"]
3034 -> 3035 [label="optind = optind + 1;"]
3035 -> 3038 [label="[!((*s) != 0)]"]
3035 -> 3037 [label="[(*s) != 0]"]
3037 -> 3041 [label="[!((pfound->has_arg) != 0)]"]
3037 -> 3040 [label="[(pfound->has_arg) != 0]"]
3040 -> 3042 [label="optarg = s + 1;"]
3042 -> 3039 [label=""]
3039 -> 3036 [label=""]
3036 -> 3075 [label="tmp___14 = my_strlen((const char *)nextchar);" style="dotted" arrowhead="empty"]
3041 -> 3043 [label="[!(opterr != 0)]"]
3041 -> 3044 [label="[opterr != 0]"]
3044 -> 3047 [label="[!(((int)(*((*(argv + (optind - 1))) + 1))) == 45)]"]
3044 -> 3046 [label="[((int)(*((*(argv + (optind - 1))) + 1))) == 45]"]
3046 -> 3048 [label="tmp___7 = __getreent();"]
3048 -> 3049 [label="fprintf(tmp___7->_stderr, \"%s: option `--%s\' doesn\'t allow an argument\n\", *(argv + 0), pfound->name);"]
3049 -> 3043 [label=""]
3043 -> 3052 [label="tmp___9 = my_strlen((const char *)nextchar);" style="dotted" arrowhead="empty"]
3047 -> 3050 [label="tmp___8 = __getreent();"]
3050 -> 3051 [label="fprintf(tmp___8->_stderr, \"%s: option `%c%s\' doesn\'t allow an argument\n\", *(argv + 0), *((*(argv + (optind - 1))) + 0), pfound->name);"]
3051 -> 3043 [label=""]
3038 -> 3055 [label="[!((pfound->has_arg) == 1)]"]
3038 -> 3056 [label="[(pfound->has_arg) == 1]"]
3056 -> 3059 [label="[!(optind < argc)]"]
3056 -> 3058 [label="[optind < argc]"]
3058 -> 3060 [label="tmp___10 = optind;"]
3060 -> 3061 [label="optind = optind + 1;"]
3061 -> 3062 [label="optarg = (char *)(*(argv + tmp___10));"]
3062 -> 3036 [label=""]
3059 -> 3063 [label="[!(opterr != 0)]"]
3059 -> 3064 [label="[opterr != 0]"]
3064 -> 3065 [label="tmp___11 = __getreent();"]
3065 -> 3066 [label="fprintf(tmp___11->_stderr, \"%s: option `%s\' requires an argument\n\", *(argv + 0), *(argv + (optind - 1)));"]
3066 -> 3063 [label=""]
3063 -> 3067 [label="tmp___12 = my_strlen((const char *)nextchar);" style="dotted" arrowhead="empty"]
3055 -> 3036 [label=""]
3032 -> 3087 [label="[!(!long_only)]"]
3032 -> 3086 [label="[!long_only]"]
3086 -> 3096 [label="Goto: _L___3"]
3096 -> 3097 [label="[!(opterr != 0)]"]
3096 -> 3098 [label="[opterr != 0]"]
3098 -> 3101 [label="[!(((int)(*((*(argv + optind)) + 1))) == 45)]"]
3098 -> 3100 [label="[((int)(*((*(argv + optind)) + 1))) == 45]"]
3100 -> 3102 [label="tmp___15 = __getreent();"]
3102 -> 3103 [label="fprintf(tmp___15->_stderr, \"%s: unrecognized option `--%s\'\n\", *(argv + 0), nextchar);"]
3103 -> 3097 [label=""]
3097 -> 3106 [label="nextchar = (char *)\"\";"]
3106 -> 3107 [label="optind = optind + 1;"]
3107 -> 2792 [label="return '\x0';"]
3101 -> 3104 [label="tmp___16 = __getreent();"]
3104 -> 3105 [label="fprintf(tmp___16->_stderr, \"%s: unrecognized option `%c%s\'\n\", *(argv + 0), *((*(argv + optind)) + 0), nextchar);"]
3105 -> 3097 [label=""]
3087 -> 3091 [label="[!(((int)(*((*(argv + optind)) + 1))) == 45)]"]
3087 -> 3090 [label="[((int)(*((*(argv + optind)) + 1))) == 45]"]
3090 -> 3096 [label="Goto: _L___3"]
3091 -> 3093 [label="tmp___17 = my_index(optstring, (int)(*nextchar));" style="dotted" arrowhead="empty"]
3093 -> 3094 [label="[!(((unsigned int)tmp___17) == ((unsigned int)((void *)0)))]"]
3093 -> 3095 [label="[((unsigned int)tmp___17) == ((unsigned int)((void *)0))]"]
3095 -> 3096 [label="Label: _L___3"]
3094 -> 2969 [label=""]
2969 -> 3109 [label="tmp___18 = nextchar;"]
3109 -> 3110 [label="nextchar = nextchar + 1;"]
3110 -> 3111 [label="c = *tmp___18;"]
3111 -> 3112 [label="tmp___19 = my_index(optstring, (int)c);" style="dotted" arrowhead="empty"]
3112 -> 3113 [label="temp = tmp___19;"]
3113 -> 3114 [label="[!(((int)(*nextchar)) == 0)]"]
3113 -> 3115 [label="[((int)(*nextchar)) == 0]"]
3115 -> 3116 [label="optind = optind + 1;"]
3116 -> 3114 [label=""]
3114 -> 3119 [label="[!(((unsigned int)temp) == ((unsigned int)((void *)0)))]"]
3114 -> 3118 [label="[((unsigned int)temp) == ((unsigned int)((void *)0))]"]
3118 -> 3123 [label="Goto: _L___5"]
3123 -> 3124 [label="[!(opterr != 0)]"]
3123 -> 3125 [label="[opterr != 0]"]
3125 -> 3126 [label="tmp___20 = __getreent();"]
3126 -> 3127 [label="fprintf(tmp___20->_stderr, \"%s: illegal option -- %c\n\", *(argv + 0), c);"]
3127 -> 3124 [label=""]
3124 -> 3128 [label="optopt = (int)c;"]
3128 -> 2792 [label="return '\x0';"]
3119 -> 3121 [label="[!(((int)c) == 58)]"]
3119 -> 3122 [label="[((int)c) == 58]"]
3122 -> 3123 [label="Label: _L___5"]
3121 -> 3117 [label=""]
3117 -> 3130 [label="[!(((int)(*(temp + 1))) == 58)]"]
3117 -> 3131 [label="[((int)(*(temp + 1))) == 58]"]
3131 -> 3134 [label="[!(((int)(*(temp + 2))) == 58)]"]
3131 -> 3133 [label="[((int)(*(temp + 2))) == 58]"]
3133 -> 3137 [label="[!(((int)(*nextchar)) != 0)]"]
3133 -> 3136 [label="[((int)(*nextchar)) != 0]"]
3136 -> 3138 [label="optarg = nextchar;"]
3138 -> 3139 [label="optind = optind + 1;"]
3139 -> 3135 [label=""]
3135 -> 3141 [label="nextchar = (char *)((void *)0);"]
3141 -> 3130 [label=""]
3130 -> 2792 [label="return (int)c;"]
3137 -> 3140 [label="optarg = (char *)0;"]
3140 -> 3135 [label=""]
3134 -> 3144 [label="[!(((int)(*nextchar)) != 0)]"]
3134 -> 3143 [label="[((int)(*nextchar)) != 0]"]
3143 -> 3145 [label="optarg = nextchar;"]
3145 -> 3146 [label="optind = optind + 1;"]
3146 -> 3142 [label=""]
3142 -> 3163 [label="nextchar = (char *)((void *)0);"]
3163 -> 3130 [label=""]
3144 -> 3149 [label="[!(optind == argc)]"]
3144 -> 3148 [label="[optind == argc]"]
3148 -> 3150 [label="[!(opterr != 0)]"]
3148 -> 3151 [label="[opterr != 0]"]
3151 -> 3152 [label="tmp___21 = __getreent();"]
3152 -> 3153 [label="fprintf(tmp___21->_stderr, \"%s: option requires an argument -- %c\n\", *(argv + 0), c);"]
3153 -> 3150 [label=""]
3150 -> 3154 [label="optopt = (int)c;"]
3154 -> 3157 [label="[!(((const int)(*(optstring + 0))) == 58)]"]
3154 -> 3156 [label="[((const int)(*(optstring + 0))) == 58]"]
3156 -> 3158 [label="c = (char)':';"]
3158 -> 3155 [label=""]
3155 -> 3142 [label=""]
3157 -> 3159 [label="c = (char)'\x0';"]
3159 -> 3155 [label=""]
3149 -> 3160 [label="tmp___22 = optind;"]
3160 -> 3161 [label="optind = optind + 1;"]
3161 -> 3162 [label="optarg = (char *)(*(argv + tmp___22));"]
3162 -> 3142 [label=""]
3007 -> 3014 [label="[!(((unsigned int)pfound) == ((unsigned int)((void *)0)))]"]
3007 -> 3013 [label="[((unsigned int)pfound) == ((unsigned int)((void *)0))]"]
3013 -> 3015 [label="pfound = p;"]
3015 -> 3016 [label="indfound = option_index;"]
3016 -> 3002 [label=""]
3002 -> 3018 [label="p = p + 1;"]
3018 -> 3019 [label="option_index = option_index + 1;"]
3019 -> 2998 [label=""]
3014 -> 3017 [label="ambig = 1;"]
3017 -> 3002 [label=""]
2991 -> 2988 [label=""]
2988 -> 2995 [label="s = s + 1;"]
2995 -> 2985 [label=""]
2990 -> 2987 [label="break"]
2975 -> 2977 [label="[!(long_only != 0)]"]
2975 -> 2978 [label="[long_only != 0]"]
2978 -> 2979 [label="Label: _L___4"]
2977 -> 2969 [label=""]
2971 -> 2969 [label=""]
2964 -> 2966 [label="tmp___2 = 0;"]
2966 -> 2962 [label=""]
2961 -> 2967 [label="tmp___2 = 0;"]
2967 -> 2959 [label=""]
2899 -> 2896 [label=""]
2896 -> 2893 [label=""]
2893 -> 2905 [label="while"]
2905 -> 2906 [label=""]
2906 -> 2910 [label="[!(optind < argc)]"]
2906 -> 2909 [label="[optind < argc]"]
2909 -> 2911 [label="[!(!(((int)(*((*(argv + optind)) + 0))) != 45))]"]
2909 -> 2912 [label="[!(((int)(*((*(argv + optind)) + 0))) != 45)]"]
2912 -> 2913 [label="[!(!(((int)(*((*(argv + optind)) + 1))) == 0))]"]
2912 -> 2914 [label="[!(((int)(*((*(argv + optind)) + 1))) == 0)]"]
2914 -> 2907 [label="break"]
2907 -> 2918 [label="last_nonopt = optind;"]
2918 -> 2891 [label=""]
2891 -> 2919 [label="[!(optind != argc)]"]
2891 -> 2920 [label="[optind != argc]"]
2920 -> 2921 [label="tmp___0 = strcmp((const char *)(*(argv + optind)), \"--\");"]
2921 -> 2922 [label="[!(!tmp___0)]"]
2921 -> 2923 [label="[!tmp___0]"]
2923 -> 2924 [label="optind = optind + 1;"]
2924 -> 2927 [label="[!(first_nonopt != last_nonopt)]"]
2924 -> 2926 [label="[first_nonopt != last_nonopt]"]
2926 -> 2930 [label="[!(last_nonopt != optind)]"]
2926 -> 2929 [label="[last_nonopt != optind]"]
2929 -> 2931 [label="exchange((char **)argv);" style="dotted" arrowhead="empty"]
2930 -> 2933 [label="Goto: _L___0"]
2933 -> 2934 [label="[!(first_nonopt == last_nonopt)]"]
2933 -> 2935 [label="[first_nonopt == last_nonopt]"]
2935 -> 2936 [label="first_nonopt = optind;"]
2936 -> 2925 [label=""]
2934 -> 2925 [label=""]
2927 -> 2933 [label="Label: _L___0"]
2922 -> 2919 [label=""]
2913 -> 2911 [label=""]
2911 -> 2908 [label=""]
2908 -> 2917 [label="optind = optind + 1;"]
2917 -> 2905 [label=""]
2910 -> 2907 [label="break"]
2898 -> 2901 [label="Goto: _L"]
2901 -> 2902 [label="[!(last_nonopt != optind)]"]
2901 -> 2903 [label="[last_nonopt != optind]"]
2903 -> 2904 [label="first_nonopt = optind;"]
2904 -> 2893 [label=""]
2902 -> 2893 [label=""]
2895 -> 2901 [label="Label: _L"]
2886 -> 2888 [label="[!(((int)(*nextchar)) == 0)]"]
2886 -> 2889 [label="[((int)(*nextchar)) == 0]"]
2889 -> 2890 [label="Label: _L___2"]
2888 -> 2884 [label=""]
2870 -> 2875 [label="[!(((const int)(*(optstring + 0))) == 43)]"]
2870 -> 2874 [label="[((const int)(*(optstring + 0))) == 43]"]
2874 -> 2876 [label="ordering = (enum __anonenum_ordering_22 )0;"]
2876 -> 2877 [label="optstring = optstring + 1;"]
2877 -> 2862 [label=""]
2875 -> 2878 [label="tmp = getenv(\"POSIXLY_CORRECT\");"]
2878 -> 2881 [label="[!(((unsigned int)tmp) != ((unsigned int)((void *)0)))]"]
2878 -> 2880 [label="[((unsigned int)tmp) != ((unsigned int)((void *)0))]"]
2880 -> 2882 [label="ordering = (enum __anonenum_ordering_22 )0;"]
2882 -> 2862 [label=""]
2881 -> 2883 [label="ordering = (enum __anonenum_ordering_22 )1;"]
2883 -> 2862 [label=""]}
subgraph cluster_spec_read {
label="spec_read()"
6433 -> 6434 [label="Function start dummy edge"]
6434 -> 6436 [label="int rc;"]
6436 -> 6438 [label="struct _reent *tmp;"]
6438 -> 6439 [label="rc = 0;"]
6439 -> 6440 [label="[!(4 < dbglvl)]"]
6439 -> 6441 [label="[4 < dbglvl]"]
6441 -> 6442 [label="printf(\"spec_read: %d, %x, %d = \", fd, buf, size);"]
6442 -> 6440 [label=""]
6440 -> 6443 [label="[!(fd > 3)]"]
6440 -> 6444 [label="[fd > 3]"]
6444 -> 6445 [label="tmp = __getreent();"]
6445 -> 6446 [label="fprintf(tmp->_stderr, \"spec_read: fd=%d, > MAX_SPEC_FD!\n\", fd);"]
6446 -> 6447 [label="exit(1);"]
6447 -> 6443 [label=""]
6443 -> 6448 [label="[!(((spec_fd[fd]).pos) >= ((spec_fd[fd]).len))]"]
6443 -> 6449 [label="[((spec_fd[fd]).pos) >= ((spec_fd[fd]).len)]"]
6449 -> 6450 [label="[!(4 < dbglvl)]"]
6449 -> 6451 [label="[4 < dbglvl]"]
6451 -> 6452 [label="printf(\"EOF\n\");"]
6452 -> 6450 [label=""]
6450 -> 6432 [label="return -1;"]
6448 -> 6456 [label="[!((((spec_fd[fd]).pos) + size) >= ((spec_fd[fd]).len))]"]
6448 -> 6455 [label="[(((spec_fd[fd]).pos) + size) >= ((spec_fd[fd]).len)]"]
6455 -> 6457 [label="rc = ((spec_fd[fd]).len) - ((spec_fd[fd]).pos);"]
6457 -> 6454 [label=""]
6454 -> 6459 [label="memcpy((void *)buf, (const void *)(((spec_fd[fd]).buf) + ((spec_fd[fd]).pos)), (unsigned int)rc);"]
6459 -> 6460 [label="(spec_fd[fd]).pos = ((spec_fd[fd]).pos) + rc;"]
6460 -> 6461 [label="[!(4 < dbglvl)]"]
6460 -> 6462 [label="[4 < dbglvl]"]
6462 -> 6463 [label="printf(\"%d\n\", rc);"]
6463 -> 6461 [label=""]
6461 -> 6432 [label="return rc;"]
6456 -> 6458 [label="rc = size;"]
6458 -> 6454 [label=""]}
subgraph cluster_build_bl_tree {
label="build_bl_tree()"
7272 -> 7273 [label="max_blindex = 18;"]
7273 -> 7274 [label="while"]
7274 -> 7276 [label="[!(max_blindex >= 3)]"]
7274 -> 7275 [label="[max_blindex >= 3]"]
7275 -> 7277 [label="[!(((int)((bl_tree[bl_order[max_blindex]]).dl.len)) != 0)]"]
7275 -> 7278 [label="[((int)((bl_tree[bl_order[max_blindex]]).dl.len)) != 0]"]
7278 -> 7276 [label="break"]
7276 -> 7281 [label="opt_len = opt_len + ((ulg )((((3 * (max_blindex + 1)) + 5) + 5) + 4));"]
7281 -> 7265 [label="return max_blindex;"]
7277 -> 7280 [label="max_blindex = max_blindex - 1;"]
7280 -> 7274 [label=""]
7266 -> 7267 [label="Function start dummy edge"]
7267 -> 7269 [label="int max_blindex;"]
7269 -> 7270 [label="scan_tree(dyn_ltree, l_desc.max_code);" style="dotted" arrowhead="empty"]
7271 -> 7272 [label="build_tree(&bl_desc);" style="dotted" arrowhead="empty"]
7270 -> 7271 [label="scan_tree(dyn_dtree, d_desc.max_code);" style="dotted" arrowhead="empty"]}
subgraph cluster_make_table {
label="make_table()"
1569 -> 1567 [label=""]
1567 -> 1570 [label="jutbits = (unsigned int)(16 - tablebits);"]
1570 -> 1571 [label="i__1 = 1U;"]
1571 -> 1572 [label="while"]
1572 -> 1574 [label="[!(i__1 <= ((unsigned int)tablebits))]"]
1572 -> 1573 [label="[i__1 <= ((unsigned int)tablebits)]"]
1573 -> 1575 [label="start[i__1] = (unsigned short)(((int)(start[i__1])) >> jutbits);"]
1575 -> 1576 [label="weight[i__1] = (unsigned short)(1U << (((unsigned int)tablebits) - i__1));"]
1576 -> 1577 [label="i__1 = i__1 + 1U;"]
1577 -> 1572 [label=""]
1574 -> 1578 [label="while"]
1578 -> 1580 [label="[!(i__1 <= 16U)]"]
1578 -> 1579 [label="[i__1 <= 16U]"]
1579 -> 1581 [label="weight[i__1] = (unsigned short)(1U << (16U - i__1));"]
1581 -> 1582 [label="i__1 = i__1 + 1U;"]
1582 -> 1578 [label=""]
1580 -> 1583 [label="i__1 = (unsigned int)(((int)(start[tablebits + 1])) >> jutbits);"]
1583 -> 1584 [label="[!(i__1 != 0U)]"]
1583 -> 1585 [label="[i__1 != 0U]"]
1585 -> 1586 [label="k = (unsigned int)(1 << tablebits);"]
1586 -> 1587 [label="while"]
1587 -> 1589 [label="[!(i__1 != k)]"]
1587 -> 1588 [label="[i__1 != k]"]
1588 -> 1590 [label="tmp = i__1;"]
1590 -> 1591 [label="i__1 = i__1 + 1U;"]
1591 -> 1592 [label="*(table + tmp) = (unsigned short)0;"]
1592 -> 1587 [label=""]
1589 -> 1584 [label=""]
1584 -> 1593 [label="avail = (unsigned int)nchar;"]
1593 -> 1594 [label="mask = 1U << (15 - tablebits);"]
1594 -> 1595 [label="ch = 0U;"]
1595 -> 1596 [label="while"]
1596 -> 1598 [label="[!(ch < ((unsigned int)nchar))]"]
1596 -> 1597 [label="[ch < ((unsigned int)nchar)]"]
1597 -> 1599 [label="len = (unsigned int)(*(bitlen + ch));"]
1599 -> 1600 [label="[!(len == 0U)]"]
1599 -> 1601 [label="[len == 0U]"]
1601 -> 1636 [label="Goto: __Cont"]
1636 -> 1637 [label="ch = ch + 1U;"]
1637 -> 1596 [label=""]
1600 -> 1603 [label="nextcode = (unsigned int)(((int)(start[len])) + ((int)(weight[len])));"]
1603 -> 1606 [label="[!(len <= ((unsigned int)tablebits))]"]
1603 -> 1605 [label="[len <= ((unsigned int)tablebits)]"]
1605 -> 1607 [label="i__1 = (unsigned int)(start[len]);"]
1607 -> 1608 [label="while"]
1608 -> 1610 [label="[!(i__1 < nextcode)]"]
1608 -> 1609 [label="[i__1 < nextcode]"]
1609 -> 1611 [label="*(table + i__1) = (unsigned short)ch;"]
1611 -> 1612 [label="i__1 = i__1 + 1U;"]
1612 -> 1608 [label=""]
1610 -> 1604 [label=""]
1604 -> 1635 [label="start[len] = (unsigned short)nextcode;"]
1635 -> 1636 [label="Label: __Cont"]
1606 -> 1613 [label="k = (unsigned int)(start[len]);"]
1613 -> 1614 [label="p = table + (k >> jutbits);"]
1614 -> 1615 [label="i__1 = len - ((unsigned int)tablebits);"]
1615 -> 1616 [label="while"]
1616 -> 1618 [label="[!(i__1 != 0U)]"]
1616 -> 1617 [label="[i__1 != 0U]"]
1617 -> 1619 [label="[!(((int)(*p)) == 0)]"]
1617 -> 1620 [label="[((int)(*p)) == 0]"]
1620 -> 1621 [label="tmp___0 = (unsigned short)0;"]
1621 -> 1622 [label="*(prev + avail) = tmp___0;"]
1622 -> 1623 [label="*((prev + 32768) + avail) = tmp___0;"]
1623 -> 1624 [label="tmp___1 = avail;"]
1624 -> 1625 [label="avail = avail + 1U;"]
1625 -> 1626 [label="*p = (unsigned short)tmp___1;"]
1626 -> 1619 [label=""]
1619 -> 1629 [label="[!((k & mask) != 0U)]"]
1619 -> 1628 [label="[(k & mask) != 0U]"]
1628 -> 1630 [label="p = (prev + 32768) + (*p);"]
1630 -> 1627 [label=""]
1627 -> 1632 [label="k = k << 1;"]
1632 -> 1633 [label="i__1 = i__1 - 1U;"]
1633 -> 1616 [label=""]
1629 -> 1631 [label="p = prev + (*p);"]
1631 -> 1627 [label=""]
1618 -> 1634 [label="*p = (unsigned short)ch;"]
1634 -> 1604 [label=""]
1598 -> 1515 [label="return;"]
1516 -> 1517 [label="Function start dummy edge"]
1517 -> 1519 [label="ush count[17];"]
1519 -> 1521 [label="ush weight[17];"]
1521 -> 1523 [label="ush start[18];"]
1523 -> 1525 [label="ush *p;"]
1525 -> 1527 [label="unsigned int i__1;"]
1527 -> 1529 [label="unsigned int k;"]
1529 -> 1531 [label="unsigned int len;"]
1531 -> 1533 [label="unsigned int ch;"]
1533 -> 1535 [label="unsigned int jutbits;"]
1535 -> 1537 [label="unsigned int avail;"]
1537 -> 1539 [label="unsigned int nextcode;"]
1539 -> 1541 [label="unsigned int mask;"]
1541 -> 1543 [label="unsigned int tmp;"]
1543 -> 1545 [label="ush tmp___0;"]
1545 -> 1547 [label="unsigned int tmp___1;"]
1547 -> 1548 [label="i__1 = 1U;"]
1548 -> 1549 [label="while"]
1549 -> 1551 [label="[!(i__1 <= 16U)]"]
1549 -> 1550 [label="[i__1 <= 16U]"]
1550 -> 1552 [label="count[i__1] = (unsigned short)0;"]
1552 -> 1553 [label="i__1 = i__1 + 1U;"]
1553 -> 1549 [label=""]
1551 -> 1554 [label="i__1 = 0U;"]
1554 -> 1555 [label="while"]
1555 -> 1557 [label="[!(i__1 < ((unsigned int)nchar))]"]
1555 -> 1556 [label="[i__1 < ((unsigned int)nchar)]"]
1556 -> 1558 [label="count[*(bitlen + i__1)] = (ush )(((int)(count[*(bitlen + i__1)])) + 1);"]
1558 -> 1559 [label="i__1 = i__1 + 1U;"]
1559 -> 1555 [label=""]
1557 -> 1560 [label="start[1] = (unsigned short)0;"]
1560 -> 1561 [label="i__1 = 1U;"]
1561 -> 1562 [label="while"]
1562 -> 1564 [label="[!(i__1 <= 16U)]"]
1562 -> 1563 [label="[i__1 <= 16U]"]
1563 -> 1565 [label="start[i__1 + 1U] = (unsigned short)(((int)(start[i__1])) + (((int)(count[i__1])) << (16U - i__1)));"]
1565 -> 1566 [label="i__1 = i__1 + 1U;"]
1566 -> 1562 [label=""]
1564 -> 1567 [label="[!((((int)(start[17])) & 65535) != 0)]"]
1564 -> 1568 [label="[(((int)(start[17])) & 65535) != 0]"]
1568 -> 1569 [label="error((char *)\"Bad table\n\");" style="dotted" arrowhead="empty"]}
subgraph cluster_read_pt_len {
label="read_pt_len()"
1725 -> 1666 [label=""]
1666 -> 1639 [label="return;"]
1707 -> 1708 [label="c = (int)tmp___3;"]
1708 -> 1709 [label="while"]
1709 -> 1710 [label=""]
1710 -> 1712 [label="c = c - 1;"]
1712 -> 1713 [label="[!(!(c >= 0))]"]
1712 -> 1714 [label="[!(c >= 0)]"]
1714 -> 1711 [label="break"]
1711 -> 1705 [label=""]
1705 -> 1684 [label=""]
1684 -> 1686 [label="[!(i__1 < n)]"]
1684 -> 1685 [label="[i__1 < n]"]
1685 -> 1687 [label="c = (int)(bitbuf >> ((16U * (sizeof(char))) - 3U));"]
1687 -> 1688 [label="[!(c == 7)]"]
1687 -> 1689 [label="[c == 7]"]
1689 -> 1690 [label="mask = 1U << (((16U * (sizeof(char))) - 1U) - 3U);"]
1690 -> 1691 [label="while"]
1691 -> 1693 [label="[!((((unsigned long)mask) & bitbuf) != 0UL)]"]
1691 -> 1692 [label="[(((unsigned long)mask) & bitbuf) != 0UL]"]
1692 -> 1694 [label="mask = mask >> 1;"]
1694 -> 1695 [label="c = c + 1;"]
1695 -> 1691 [label=""]
1693 -> 1688 [label=""]
1688 -> 1698 [label="[!(c < 7)]"]
1688 -> 1697 [label="[c < 7]"]
1697 -> 1699 [label="tmp___1 = 3;"]
1699 -> 1696 [label=""]
1696 -> 1701 [label="fillbuf(tmp___1);" style="dotted" arrowhead="empty"]
1701 -> 1702 [label="tmp___2 = i__1;"]
1702 -> 1703 [label="i__1 = i__1 + 1;"]
1703 -> 1704 [label="pt_len[tmp___2] = (unsigned char)c;"]
1704 -> 1705 [label="[!(i__1 == i_special)]"]
1704 -> 1706 [label="[i__1 == i_special]"]
1706 -> 1707 [label="tmp___3 = getbits(2);" style="dotted" arrowhead="empty"]
1698 -> 1700 [label="tmp___1 = c - 3;"]
1700 -> 1696 [label=""]
1686 -> 1719 [label="while"]
1719 -> 1721 [label="[!(i__1 < nn)]"]
1719 -> 1720 [label="[i__1 < nn]"]
1720 -> 1722 [label="tmp___5 = i__1;"]
1722 -> 1723 [label="i__1 = i__1 + 1;"]
1723 -> 1724 [label="pt_len[tmp___5] = (unsigned char)0;"]
1724 -> 1719 [label=""]
1721 -> 1725 [label="make_table(nn, pt_len, 8, pt_table);" style="dotted" arrowhead="empty"]
1713 -> 1716 [label="tmp___4 = i__1;"]
1716 -> 1717 [label="i__1 = i__1 + 1;"]
1717 -> 1718 [label="pt_len[tmp___4] = (unsigned char)0;"]
1718 -> 1709 [label=""]
1669 -> 1670 [label="c = (int)tmp___0;"]
1670 -> 1671 [label="i__1 = 0;"]
1671 -> 1672 [label="while"]
1672 -> 1674 [label="[!(i__1 < nn)]"]
1672 -> 1673 [label="[i__1 < nn]"]
1673 -> 1675 [label="pt_len[i__1] = (unsigned char)0;"]
1675 -> 1676 [label="i__1 = i__1 + 1;"]
1676 -> 1672 [label=""]
1674 -> 1677 [label="i__1 = 0;"]
1677 -> 1678 [label="while"]
1678 -> 1680 [label="[!(i__1 < 256)]"]
1678 -> 1679 [label="[i__1 < 256]"]
1679 -> 1681 [label="pt_table[i__1] = (unsigned short)c;"]
1681 -> 1682 [label="i__1 = i__1 + 1;"]
1682 -> 1678 [label=""]
1680 -> 1666 [label=""]
1664 -> 1665 [label="n = (int)tmp;"]
1665 -> 1668 [label="[!(n == 0)]"]
1665 -> 1667 [label="[n == 0]"]
1667 -> 1669 [label="tmp___0 = getbits(nbit);" style="dotted" arrowhead="empty"]
1668 -> 1683 [label="i__1 = 0;"]
1683 -> 1684 [label="while"]
1640 -> 1641 [label="Function start dummy edge"]
1641 -> 1643 [label="int i__1;"]
1643 -> 1645 [label="int c;"]
1645 -> 1647 [label="int n;"]
1647 -> 1649 [label="unsigned int mask;"]
1649 -> 1651 [label="unsigned int tmp;"]
1651 -> 1653 [label="unsigned int tmp___0;"]
1653 -> 1655 [label="int tmp___1;"]
1655 -> 1657 [label="int tmp___2;"]
1657 -> 1659 [label="unsigned int tmp___3;"]
1659 -> 1661 [label="int tmp___4;"]
1661 -> 1663 [label="int tmp___5;"]
1663 -> 1664 [label="tmp = getbits(nbit);" style="dotted" arrowhead="empty"]}
subgraph cluster_file_read {
label="file_read()"
2012 -> 2013 [label="len = (unsigned int)tmp;"]
2013 -> 2016 [label="[!(len == 4294967295U)]"]
2013 -> 2015 [label="[len == 4294967295U]"]
2015 -> 2005 [label="return (int)len;"]
2016 -> 2018 [label="[!(len == 0U)]"]
2016 -> 2019 [label="[len == 0U]"]
2019 -> 2005 [label="return (int)len;"]
2018 -> 2014 [label=""]
2014 -> 2021 [label="crc = updcrc1((uch *)buf, len);" style="dotted" arrowhead="empty"]
2021 -> 2022 [label="bytes_in = (long)(((unsigned long)bytes_in) + ((unsigned long)len));"]
2022 -> 2005 [label="return (int)len;"]}
subgraph cluster_inflate {
label="inflate()"
6257 -> 6258 [label="[!(r != 0)]"]
6257 -> 6259 [label="[r != 0]"]
6259 -> 6240 [label="return r;"]
6258 -> 6261 [label="[!(hufts > h)]"]
6258 -> 6262 [label="[hufts > h]"]
6262 -> 6263 [label="h = hufts;"]
6263 -> 6261 [label=""]
6261 -> 6264 [label="[!(!(!e))]"]
6261 -> 6265 [label="[!(!e)]"]
6265 -> 6255 [label="break"]
6255 -> 6267 [label="while"]
6267 -> 6269 [label="[!(bk >= 8U)]"]
6267 -> 6268 [label="[bk >= 8U]"]
6268 -> 6270 [label="bk = bk - 8U;"]
6270 -> 6271 [label="inptr = inptr - 1U;"]
6271 -> 6267 [label=""]
6269 -> 6272 [label="outcnt = outcnt;"]
6272 -> 6273 [label="flush_window();" style="dotted" arrowhead="empty"]
6273 -> 6240 [label="return 0;"]
6241 -> 6242 [label="Function start dummy edge"]
6242 -> 6244 [label="int e;"]
6244 -> 6246 [label="int r;"]
6246 -> 6248 [label="unsigned int h;"]
6248 -> 6249 [label="outcnt = 0U;"]
6249 -> 6250 [label="bk = 0U;"]
6250 -> 6251 [label="bb = 0UL;"]
6251 -> 6252 [label="h = 0U;"]
6252 -> 6253 [label="while"]
6253 -> 6254 [label=""]
6254 -> 6256 [label="hufts = 0U;"]
6256 -> 6257 [label="r = inflate_block(&e);" style="dotted" arrowhead="empty"]
6264 -> 6253 [label=""]}
subgraph cluster_decode_start {
label="decode_start()"
1902 -> 1903 [label="j = 0;"]
1903 -> 1904 [label="done = 0;"]
1904 -> 1899 [label="return;"]}
subgraph cluster_spec_write {
label="spec_write()"
6547 -> 6548 [label="Function start dummy edge"]
6548 -> 6550 [label="struct _reent *tmp;"]
6550 -> 6551 [label="[!(4 < dbglvl)]"]
6550 -> 6552 [label="[4 < dbglvl]"]
6552 -> 6553 [label="printf(\"spec_write: %d, %x, %d = \", fd, buf, size);"]
6553 -> 6551 [label=""]
6551 -> 6554 [label="[!(fd > 3)]"]
6551 -> 6555 [label="[fd > 3]"]
6555 -> 6556 [label="tmp = __getreent();"]
6556 -> 6557 [label="fprintf(tmp->_stderr, \"spec_write: fd=%d, > MAX_SPEC_FD!\n\", fd);"]
6557 -> 6558 [label="exit(1);"]
6558 -> 6554 [label=""]
6554 -> 6559 [label="memcpy((void *)(((spec_fd[fd]).buf) + ((spec_fd[fd]).pos)), (const void *)buf, (unsigned int)size);"]
6559 -> 6560 [label="(spec_fd[fd]).len = ((spec_fd[fd]).len) + size;"]
6560 -> 6561 [label="(spec_fd[fd]).pos = ((spec_fd[fd]).pos) + size;"]
6561 -> 6562 [label="[!(4 < dbglvl)]"]
6561 -> 6563 [label="[4 < dbglvl]"]
6563 -> 6564 [label="printf(\"%d\n\", size);"]
6564 -> 6562 [label=""]
6562 -> 6546 [label="return size;"]}
subgraph cluster_inflate_block {
label="inflate_block()"
6218 -> 6219 [label="tmp___4 = tmp___3;"]
6219 -> 6212 [label=""]
6212 -> 6220 [label="b = b | (((unsigned long)((unsigned char)tmp___4)) << k);"]
6220 -> 6221 [label="k = k + 8U;"]
6221 -> 6209 [label=""]
6209 -> 6211 [label="[!(k < 2U)]"]
6209 -> 6210 [label="[k < 2U]"]
6210 -> 6214 [label="[!(inptr < insize)]"]
6210 -> 6213 [label="[inptr < insize]"]
6213 -> 6215 [label="tmp___2 = inptr;"]
6215 -> 6216 [label="inptr = inptr + 1U;"]
6216 -> 6217 [label="tmp___4 = (int)(*(inbuf + tmp___2));"]
6217 -> 6212 [label=""]
6214 -> 6218 [label="tmp___3 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
6211 -> 6222 [label="t = ((unsigned int)b) & 3U;"]
6222 -> 6223 [label="b = b >> 2;"]
6223 -> 6224 [label="k = k - 2U;"]
6224 -> 6225 [label="bb = b;"]
6225 -> 6226 [label="bk = k;"]
6226 -> 6227 [label="[!(t == 2U)]"]
6226 -> 6228 [label="[t == 2U]"]
6228 -> 6229 [label="tmp___5 = inflate_dynamic();" style="dotted" arrowhead="empty"]
6229 -> 6164 [label="return tmp___5;"]
6233 -> 6164 [label="return tmp___6;"]
6237 -> 6164 [label="return tmp___7;"]
6165 -> 6166 [label="Function start dummy edge"]
6166 -> 6168 [label="unsigned int t;"]
6168 -> 6170 [label="ulg b;"]
6170 -> 6172 [label="unsigned int k;"]
6172 -> 6174 [label="unsigned int tmp;"]
6174 -> 6176 [label="int tmp___0;"]
6176 -> 6178 [label="int tmp___1;"]
6178 -> 6180 [label="unsigned int tmp___2;"]
6180 -> 6182 [label="int tmp___3;"]
6182 -> 6184 [label="int tmp___4;"]
6184 -> 6186 [label="int tmp___5;"]
6186 -> 6188 [label="int tmp___6;"]
6188 -> 6190 [label="int tmp___7;"]
6190 -> 6191 [label="b = bb;"]
6191 -> 6192 [label="k = bk;"]
6192 -> 6193 [label="while"]
6193 -> 6195 [label="[!(k < 1U)]"]
6193 -> 6194 [label="[k < 1U]"]
6194 -> 6198 [label="[!(inptr < insize)]"]
6194 -> 6197 [label="[inptr < insize]"]
6197 -> 6199 [label="tmp = inptr;"]
6199 -> 6200 [label="inptr = inptr + 1U;"]
6200 -> 6201 [label="tmp___1 = (int)(*(inbuf + tmp));"]
6201 -> 6196 [label=""]
6196 -> 6204 [label="b = b | (((unsigned long)((unsigned char)tmp___1)) << k);"]
6204 -> 6205 [label="k = k + 8U;"]
6205 -> 6193 [label=""]
6198 -> 6202 [label="tmp___0 = fill_inbuf(0);" style="dotted" arrowhead="empty"]
6202 -> 6203 [label="tmp___1 = tmp___0;"]
6203 -> 6196 [label=""]
6195 -> 6206 [label="*e = ((int)b) & 1;"]
6206 -> 6207 [label="b = b >> 1;"]
6207 -> 6208 [label="k = k - 1U;"]
6208 -> 6209 [label="while"]
6227 -> 6231 [label="[!(t == 0U)]"]
6227 -> 6232 [label="[t == 0U]"]
6232 -> 6233 [label="tmp___6 = inflate_stored();" style="dotted" arrowhead="empty"]
6231 -> 6235 [label="[!(t == 1U)]"]
6231 -> 6236 [label="[t == 1U]"]
6236 -> 6237 [label="tmp___7 = inflate_fixed();" style="dotted" arrowhead="empty"]
6235 -> 6164 [label="return 2;"]}
subgraph cluster_huf_decode_start {
label="huf_decode_start()"
1896 -> 1897 [label="blocksize = 0U;"]
1897 -> 1893 [label="return;"]}
subgraph cluster_fill_inbuf {
label="fill_inbuf()"
615 -> 616 [label="Function start dummy edge"]
616 -> 618 [label="int len;"]
618 -> 619 [label="insize = 0U;"]
619 -> 620 [label="errno = 0;"]
620 -> 621 [label="while"]
621 -> 622 [label=""]
622 -> 624 [label="len = spec_read(ifd, (unsigned char *)(((char *)inbuf) + insize), (int)(32768U - insize));" style="dotted" arrowhead="empty"]
624 -> 627 [label="[!(len == 0)]"]
624 -> 626 [label="[len == 0]"]
626 -> 623 [label="break"]
623 -> 636 [label="[!(insize == 0U)]"]
623 -> 637 [label="[insize == 0U]"]
637 -> 638 [label="[!(eof_ok != 0)]"]
637 -> 639 [label="[eof_ok != 0]"]
639 -> 614 [label="return -1;"]
641 -> 636 [label=""]
636 -> 642 [label="bytes_in = (long)(((unsigned long)bytes_in) + ((unsigned long)insize));"]
642 -> 643 [label="inptr = 1U;"]
643 -> 614 [label="return (int)(*(inbuf + 0));"]
638 -> 641 [label="read_error();" style="dotted" arrowhead="empty"]
627 -> 629 [label="[!(len == (-1))]"]
627 -> 630 [label="[len == (-1)]"]
630 -> 623 [label="break"]
629 -> 625 [label=""]
625 -> 632 [label="insize = insize + ((unsigned int)len);"]
632 -> 633 [label="[!(!(insize < 32768U))]"]
632 -> 634 [label="[!(insize < 32768U)]"]
634 -> 623 [label="break"]
633 -> 621 [label=""]}
3227 -> 966 [label="gzipbasename(*(argv + 0))"]
965 -> 828 [label="Return edge from gzipbasename to zip"]
965 -> 4542 [label="Return edge from gzipbasename to get_method"]
965 -> 3228 [label="Return edge from gzipbasename to main"]
3235 -> 1002 [label="add_envopt(&argc, &argv, (char *)\"GZIP\")"]
1001 -> 3241 [label="Return edge from add_envopt to main"]
3283 -> 3173 [label="getopt_long(argc, (const char **)argv, \"ab:cdfhH?lLmMnNqrS:tvVZ123456789\", (const struct option *)longopts, (int *)0)"]
3176 -> 2793 [label="_getopt_internal(argc, argv, options, long_options, opt_index, 0)"]
2897 -> 2751 [label="exchange((char **)argv)"]
2750 -> 2899 [label="Return edge from exchange to _getopt_internal"]
2750 -> 2931 [label="Return edge from exchange to _getopt_internal"]
2792 -> 3170 [label="Return edge from _getopt_internal to getopt"]
2792 -> 3177 [label="Return edge from _getopt_internal to getopt_long"]
3172 -> 3285 [label="Return edge from getopt_long to main"]
3431 -> 5050 [label="do_exit(1)"]
5049 -> 3542 [label="Return edge from do_exit to treat_stdin"]
5049 -> 5092 [label="Return edge from do_exit to abort_gzip"]
5049 -> 3432 [label="Return edge from do_exit to main"]
5049 -> 3439 [label="Return edge from do_exit to main"]
5049 -> 3320 [label="Return edge from do_exit to main"]
5049 -> 3331 [label="Return edge from do_exit to main"]
5049 -> 3361 [label="Return edge from do_exit to main"]
5049 -> 3384 [label="Return edge from do_exit to main"]
5049 -> 3391 [label="Return edge from do_exit to main"]
5049 -> 3497 [label="Return edge from do_exit to main"]
5049 -> 3416 [label="Return edge from do_exit to main"]
3448 -> 1130 [label="error((char *)\"insufficient memory\")"]
1135 -> 5086 [label="abort_gzip()"]
5088 -> 5050 [label="do_exit(1)"]
5085 -> 1176 [label="Return edge from abort_gzip to write_error"]
5085 -> 1166 [label="Return edge from abort_gzip to read_error"]
5085 -> 1136 [label="Return edge from abort_gzip to error"]
1129 -> 61 [label="Return edge from error to read_tree"]
1129 -> 80 [label="Return edge from error to read_tree"]
1129 -> 1211 [label="Return edge from error to xmalloc"]
1129 -> 4564 [label="Return edge from error to get_method"]
1129 -> 487 [label="Return edge from error to unzip"]
1129 -> 486 [label="Return edge from error to unzip"]
1129 -> 441 [label="Return edge from error to unzip"]
1129 -> 444 [label="Return edge from error to unzip"]
1129 -> 528 [label="Return edge from error to unzip"]
1129 -> 531 [label="Return edge from error to unzip"]
1129 -> 461 [label="Return edge from error to unzip"]
1129 -> 4843 [label="Return edge from error to shorten_name"]
1129 -> 4849 [label="Return edge from error to shorten_name"]
1129 -> 4904 [label="Return edge from error to shorten_name"]
1129 -> 3449 [label="Return edge from error to main"]
1129 -> 3454 [label="Return edge from error to main"]
1129 -> 3459 [label="Return edge from error to main"]
1129 -> 3464 [label="Return edge from error to main"]
1129 -> 3469 [label="Return edge from error to main"]
1129 -> 1083 [label="Return edge from error to add_envopt"]
1129 -> 1090 [label="Return edge from error to add_envopt"]
1129 -> 1375 [label="Return edge from error to unlzw"]
1129 -> 1410 [label="Return edge from error to unlzw"]
1129 -> 254 [label="Return edge from error to unpack"]
1129 -> 1569 [label="Return edge from error to make_table"]
1515 -> 1825 [label="Return edge from make_table to read_c_len"]
1515 -> 1725 [label="Return edge from make_table to read_pt_len"]
1639 -> 1840 [label="Return edge from read_pt_len to decode_c"]
1639 -> 1842 [label="Return edge from read_pt_len to decode_c"]
1845 -> 1469 [label="fillbuf((int)(*(outbuf + j__1)))"]
1485 -> 615 [label="fill_inbuf(1)"]
622 -> 6433 [label="spec_read(ifd, (unsigned char *)(((char *)inbuf) + insize), (int)(32768U - insize))"]
6432 -> 4724 [label="Return edge from spec_read to do_list"]
6432 -> 596 [label="Return edge from spec_read to copy"]
6432 -> 6406 [label="Return edge from spec_read to spec_load"]
6432 -> 1343 [label="Return edge from spec_read to unlzw"]
6432 -> 2012 [label="Return edge from spec_read to file_read"]
6432 -> 624 [label="Return edge from spec_read to fill_inbuf"]
614 -> 56 [label="Return edge from fill_inbuf to read_tree"]
614 -> 46 [label="Return edge from fill_inbuf to read_tree"]
614 -> 73 [label="Return edge from fill_inbuf to read_tree"]
614 -> 100 [label="Return edge from fill_inbuf to read_tree"]
614 -> 1489 [label="Return edge from fill_inbuf to fillbuf"]
614 -> 4321 [label="Return edge from fill_inbuf to get_method"]
614 -> 4301 [label="Return edge from fill_inbuf to get_method"]
614 -> 4330 [label="Return edge from fill_inbuf to get_method"]
614 -> 4310 [label="Return edge from fill_inbuf to get_method"]
614 -> 4353 [label="Return edge from fill_inbuf to get_method"]
614 -> 4369 [label="Return edge from fill_inbuf to get_method"]
614 -> 4400 [label="Return edge from fill_inbuf to get_method"]
614 -> 4409 [label="Return edge from fill_inbuf to get_method"]
614 -> 4418 [label="Return edge from fill_inbuf to get_method"]
614 -> 4427 [label="Return edge from fill_inbuf to get_method"]
614 -> 4440 [label="Return edge from fill_inbuf to get_method"]
614 -> 4446 [label="Return edge from fill_inbuf to get_method"]
614 -> 4455 [label="Return edge from fill_inbuf to get_method"]
614 -> 4479 [label="Return edge from fill_inbuf to get_method"]
614 -> 4581 [label="Return edge from fill_inbuf to get_method"]
614 -> 4464 [label="Return edge from fill_inbuf to get_method"]
614 -> 4537 [label="Return edge from fill_inbuf to get_method"]
614 -> 4488 [label="Return edge from fill_inbuf to get_method"]
614 -> 4554 [label="Return edge from fill_inbuf to get_method"]
614 -> 4508 [label="Return edge from fill_inbuf to get_method"]
614 -> 501 [label="Return edge from fill_inbuf to unzip"]
614 -> 519 [label="Return edge from fill_inbuf to unzip"]
614 -> 476 [label="Return edge from fill_inbuf to unzip"]
614 -> 5466 [label="Return edge from fill_inbuf to inflate_codes"]
614 -> 5526 [label="Return edge from fill_inbuf to inflate_codes"]
614 -> 5492 [label="Return edge from fill_inbuf to inflate_codes"]
614 -> 5542 [label="Return edge from fill_inbuf to inflate_codes"]
614 -> 5588 [label="Return edge from fill_inbuf to inflate_codes"]
614 -> 5568 [label="Return edge from fill_inbuf to inflate_codes"]
614 -> 5923 [label="Return edge from fill_inbuf to inflate_dynamic"]
614 -> 5939 [label="Return edge from fill_inbuf to inflate_dynamic"]
614 -> 5955 [label="Return edge from fill_inbuf to inflate_dynamic"]
614 -> 5982 [label="Return edge from fill_inbuf to inflate_dynamic"]
614 -> 6019 [label="Return edge from fill_inbuf to inflate_dynamic"]
614 -> 6047 [label="Return edge from fill_inbuf to inflate_dynamic"]
614 -> 6111 [label="Return edge from fill_inbuf to inflate_dynamic"]
614 -> 6080 [label="Return edge from fill_inbuf to inflate_dynamic"]
614 -> 5689 [label="Return edge from fill_inbuf to inflate_stored"]
614 -> 5705 [label="Return edge from fill_inbuf to inflate_stored"]
614 -> 5731 [label="Return edge from fill_inbuf to inflate_stored"]
614 -> 1287 [label="Return edge from fill_inbuf to unlzw"]
614 -> 205 [label="Return edge from fill_inbuf to unpack"]
614 -> 231 [label="Return edge from fill_inbuf to unpack"]
614 -> 6202 [label="Return edge from fill_inbuf to inflate_block"]
614 -> 6218 [label="Return edge from fill_inbuf to inflate_block"]
6214 -> 615 [label="fill_inbuf(0)"]
6228 -> 5812 [label="inflate_dynamic()"]
5919 -> 615 [label="fill_inbuf(0)"]
5935 -> 615 [label="fill_inbuf(0)"]
5951 -> 615 [label="fill_inbuf(0)"]
5811 -> 6229 [label="Return edge from inflate_dynamic to inflate_block"]
6164 -> 6257 [label="Return edge from inflate_block to inflate"]
6240 -> 436 [label="Return edge from inflate to unzip"]
439 -> 1130 [label="error(\"out of memory\")"]
497 -> 615 [label="fill_inbuf(0)"]
527 -> 1130 [label="error(\"invalid compressed data--crc error\")"]
530 -> 1130 [label="error(\"invalid compressed data--length error\")"]
371 -> 6615 [label="Return edge from unzip to spec_uncompress"]
515 -> 615 [label="fill_inbuf(0)"]
443 -> 1130 [label="error(\"invalid compressed data--format violated\")"]
6272 -> 934 [label="flush_window()"]
933 -> 485 [label="Return edge from flush_window to unzip"]
933 -> 484 [label="Return edge from flush_window to unzip"]
933 -> 5512 [label="Return edge from flush_window to inflate_codes"]
933 -> 5632 [label="Return edge from flush_window to inflate_codes"]
933 -> 5741 [label="Return edge from flush_window to inflate_stored"]
933 -> 251 [label="Return edge from flush_window to unpack"]
933 -> 249 [label="Return edge from flush_window to unpack"]
933 -> 6273 [label="Return edge from flush_window to inflate"]
201 -> 615 [label="fill_inbuf(0)"]
195 -> 934 [label="flush_window()"]
253 -> 1130 [label="error(\"invalid compressed data--length error\")"]
248 -> 934 [label="flush_window()"]
227 -> 615 [label="fill_inbuf(0)"]
5641 -> 6233 [label="Return edge from inflate_stored to inflate_block"]
5727 -> 615 [label="fill_inbuf(0)"]
5740 -> 934 [label="flush_window()"]
5462 -> 615 [label="fill_inbuf(0)"]
5384 -> 6157 [label="Return edge from inflate_codes to inflate_dynamic"]
5384 -> 5804 [label="Return edge from inflate_codes to inflate_fixed"]
5749 -> 6237 [label="Return edge from inflate_fixed to inflate_block"]
5805 -> 5369 [label="huft_free(tl)"]
5368 -> 5302 [label="Return edge from huft_free to huft_build"]
5368 -> 6001 [label="Return edge from huft_free to inflate_dynamic"]
5368 -> 6133 [label="Return edge from huft_free to inflate_dynamic"]
5368 -> 6144 [label="Return edge from huft_free to inflate_dynamic"]
5368 -> 6155 [label="Return edge from huft_free to inflate_dynamic"]
5368 -> 6161 [label="Return edge from huft_free to inflate_dynamic"]
5368 -> 6162 [label="Return edge from huft_free to inflate_dynamic"]
5368 -> 6154 [label="Return edge from huft_free to inflate_dynamic"]
5368 -> 5802 [label="Return edge from huft_free to inflate_fixed"]
5368 -> 5808 [label="Return edge from huft_free to inflate_fixed"]
5368 -> 5809 [label="Return edge from huft_free to inflate_fixed"]
5808 -> 5369 [label="huft_free(td)"]
6150 -> 5369 [label="huft_free(tl)"]
6161 -> 5369 [label="huft_free(td)"]
6136 -> 5095 [label="huft_build(ll, nl, 257U, cplens, cplext, &tl, &bl)"]
5094 -> 5996 [label="Return edge from huft_build to inflate_dynamic"]
5094 -> 6137 [label="Return edge from huft_build to inflate_dynamic"]
5094 -> 6147 [label="Return edge from huft_build to inflate_dynamic"]
5094 -> 5788 [label="Return edge from huft_build to inflate_fixed"]
5094 -> 5799 [label="Return edge from huft_build to inflate_fixed"]
5801 -> 5369 [label="huft_free(tl)"]
5800 -> 5385 [label="inflate_codes(tl, td, bl, bd)"]
5798 -> 5095 [label="huft_build(l, 30U, 0U, cpdist, cpdext, &td, &bd)"]
6153 -> 5369 [label="huft_free(td)"]
6148 -> 5385 [label="inflate_codes(tl, td, bl, bd)"]
6158 -> 5369 [label="huft_free(tl)"]
6143 -> 5369 [label="huft_free(tl)"]
6146 -> 5095 [label="huft_build(ll + nl, nd, 0U, cpdist, cpdext, &td, &bd)"]
6000 -> 5369 [label="huft_free(tl)"]
6015 -> 615 [label="fill_inbuf(0)"]
6043 -> 615 [label="fill_inbuf(0)"]
6076 -> 615 [label="fill_inbuf(0)"]
6107 -> 615 [label="fill_inbuf(0)"]
6009 -> 5369 [label="huft_free(tl)"]
5301 -> 5369 [label="huft_free(u[0])"]
5488 -> 615 [label="fill_inbuf(0)"]
5511 -> 934 [label="flush_window()"]
5522 -> 615 [label="fill_inbuf(0)"]
5538 -> 615 [label="fill_inbuf(0)"]
5564 -> 615 [label="fill_inbuf(0)"]
5584 -> 615 [label="fill_inbuf(0)"]
5631 -> 934 [label="flush_window()"]
464 -> 934 [label="flush_window()"]
483 -> 934 [label="flush_window()"]
472 -> 615 [label="fill_inbuf(0)"]
941 -> 558 [label="write_buf(ofd, (void *)((char *)window), outcnt)"]
565 -> 6547 [label="spec_write(fd, (unsigned char *)buf, (int)cnt)"]
6546 -> 567 [label="Return edge from spec_write to write_buf"]
557 -> 942 [label="Return edge from write_buf to flush_window"]
557 -> 594 [label="Return edge from write_buf to copy"]
557 -> 651 [label="Return edge from write_buf to flush_outbuf"]
557 -> 1977 [label="Return edge from write_buf to unlzh"]
557 -> 1465 [label="Return edge from write_buf to unlzw"]
557 -> 1403 [label="Return edge from write_buf to unlzw"]
557 -> 1441 [label="Return edge from write_buf to unlzw"]
1342 -> 6433 [label="spec_read(in, (unsigned char *)(((char *)inbuf) + insize), 32768)"]
1345 -> 1152 [label="read_error()"]
1160 -> 5086 [label="abort_gzip()"]
1151 -> 4727 [label="Return edge from read_error to do_list"]
1151 -> 602 [label="Return edge from read_error to copy"]
1151 -> 1346 [label="Return edge from read_error to unlzw"]
1151 -> 641 [label="Return edge from read_error to fill_inbuf"]
4757 -> 1179 [label="display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, tmp___3->_stdout)"]
1178 -> 4709 [label="Return edge from display_ratio to do_list"]
1178 -> 4758 [label="Return edge from display_ratio to do_list"]
1178 -> 3584 [label="Return edge from display_ratio to treat_stdin"]
1178 -> 3837 [label="Return edge from display_ratio to treat_file"]
1178 -> 3835 [label="Return edge from display_ratio to treat_file"]
3847 -> 5028 [label="copy_stat(&istat)"]
5027 -> 3848 [label="Return edge from copy_stat to treat_file"]
3588 -> 3488 [label="Return edge from treat_file to main"]
3487 -> 3589 [label="treat_file(*(argv + tmp___18))"]
3644 -> 3500 [label="treat_stdin()"]
3533 -> 606 [label="clear_bufs()"]
605 -> 3534 [label="Return edge from clear_bufs to treat_stdin"]
605 -> 6601 [label="Return edge from clear_bufs to spec_compress"]
605 -> 3735 [label="Return edge from clear_bufs to treat_file"]
605 -> 6611 [label="Return edge from clear_bufs to spec_uncompress"]
6613 -> 4127 [label="get_method(1)"]
4126 -> 3539 [label="Return edge from get_method to treat_stdin"]
4126 -> 3569 [label="Return edge from get_method to treat_stdin"]
4126 -> 3739 [label="Return edge from get_method to treat_file"]
4126 -> 3806 [label="Return edge from get_method to treat_file"]
4126 -> 6614 [label="Return edge from get_method to spec_uncompress"]
6614 -> 372 [label="unzip(ifd, ofd)"]
434 -> 6241 [label="inflate()"]
6256 -> 6165 [label="inflate_block(&e)"]
6198 -> 615 [label="fill_inbuf(0)"]
460 -> 1130 [label="error(\"invalid compressed data--length mismatch\")"]
450 -> 1130 [label="error(\"internal error, invalid method\")"]
447 -> 1130 [label="error(\"internal error, invalid method\")"]
3816 -> 1169 [label="write_error()"]
1175 -> 5086 [label="abort_gzip()"]
1168 -> 574 [label="Return edge from write_error to write_buf"]
1168 -> 3817 [label="Return edge from write_error to treat_file"]
3834 -> 1179 [label="display_ratio(bytes_out - (bytes_in - header_bytes), bytes_out, tmp___21->_stderr)"]
3836 -> 1179 [label="display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, tmp___22->_stderr)"]
3795 -> 4127 [label="get_method(ifd)"]
3745 -> 4659 [label="do_list(ifd, method)"]
4723 -> 6433 [label="spec_read(ifd___0, (unsigned char *)((char *)buf), (int)(sizeof(buf)))"]
4726 -> 1152 [label="read_error()"]
4658 -> 3545 [label="Return edge from do_list to treat_stdin"]
4658 -> 3496 [label="Return edge from do_list to main"]
4658 -> 3746 [label="Return edge from do_list to treat_file"]
3490 -> 5050 [label="do_exit(exit_code)"]
3499 -> 3489 [label="Return edge from treat_stdin to main"]
3499 -> 3645 [label="Return edge from treat_stdin to treat_file"]
3495 -> 4659 [label="do_list(-1, -1)"]
4708 -> 1179 [label="display_ratio(total_out - (total_in - header_bytes), total_out, tmp->_stdout)"]
3751 -> 3851 [label="create_outfile()"]
3874 -> 4911 [label="check_ofname()"]
4910 -> 3876 [label="Return edge from check_ofname to create_outfile"]
3850 -> 3754 [label="Return edge from create_outfile to treat_file"]
3890 -> 4777 [label="name_too_long(ofname, &ostat)"]
4802 -> 4762 [label="same_file(statb, &tstat)"]
4761 -> 4969 [label="Return edge from same_file to check_ofname"]
4761 -> 4804 [label="Return edge from same_file to name_too_long"]
4776 -> 4961 [label="Return edge from name_too_long to check_ofname"]
4776 -> 3900 [label="Return edge from name_too_long to create_outfile"]
3915 -> 4815 [label="shorten_name(ofname)"]
4842 -> 1130 [label="error((char *)\"name too short\")"]
4814 -> 4964 [label="Return edge from shorten_name to check_ofname"]
4814 -> 3916 [label="Return edge from shorten_name to create_outfile"]
4959 -> 4762 [label="same_file(&istat, &ostat)"]
4839 -> 3934 [label="get_suffix(name)"]
3963 -> 947 [label="strlwr(suffix)"]
946 -> 4093 [label="Return edge from strlwr to make_ofname"]
946 -> 3968 [label="Return edge from strlwr to get_suffix"]
3933 -> 4061 [label="Return edge from get_suffix to make_ofname"]
3933 -> 4846 [label="Return edge from get_suffix to shorten_name"]
3933 -> 4017 [label="Return edge from get_suffix to get_istat"]
3989 -> 3648 [label="Return edge from get_istat to treat_file"]
3728 -> 606 [label="clear_bufs()"]
3738 -> 4127 [label="get_method(ifd)"]
3713 -> 4048 [label="make_ofname()"]
4060 -> 3934 [label="get_suffix(ofname)"]
4047 -> 3714 [label="Return edge from make_ofname to treat_file"]
4065 -> 947 [label="strlwr(suff)"]
4033 -> 3918 [label="do_stat(ifname, sbuf)"]
3917 -> 4008 [label="Return edge from do_stat to get_istat"]
3917 -> 4034 [label="Return edge from do_stat to get_istat"]
4012 -> 3934 [label="get_suffix(ifname)"]
4848 -> 1130 [label="error((char *)\"can\'t recover suffix\n\")"]
4903 -> 1130 [label="error((char *)\"internal error in shorten_name\")"]
4963 -> 4815 [label="shorten_name(ofname)"]
4960 -> 4777 [label="name_too_long(ofname, &ostat)"]
3583 -> 1179 [label="display_ratio(bytes_in - (bytes_out - header_bytes), bytes_in, tmp___5->_stderr)"]
3558 -> 4127 [label="get_method(ifd)"]
3541 -> 5050 [label="do_exit(exit_code)"]
3544 -> 4659 [label="do_list(ifd, method)"]
4577 -> 615 [label="fill_inbuf(0)"]
4533 -> 615 [label="fill_inbuf(0)"]
4526 -> 966 [label="gzipbasename(ofname)"]
4563 -> 1130 [label="error((char *)\"corrupted input -- file name too large\")"]
4550 -> 615 [label="fill_inbuf(0)"]
4505 -> 615 [label="fill_inbuf(0)"]
4484 -> 615 [label="fill_inbuf(0)"]
4475 -> 615 [label="fill_inbuf(0)"]
4460 -> 615 [label="fill_inbuf(0)"]
4451 -> 615 [label="fill_inbuf(0)"]
4443 -> 615 [label="fill_inbuf(0)"]
4437 -> 615 [label="fill_inbuf(0)"]
4423 -> 615 [label="fill_inbuf(0)"]
4414 -> 615 [label="fill_inbuf(0)"]
4405 -> 615 [label="fill_inbuf(0)"]
4396 -> 615 [label="fill_inbuf(0)"]
4365 -> 615 [label="fill_inbuf(0)"]
4349 -> 615 [label="fill_inbuf(0)"]
4601 -> 326 [label="check_zipfile(in)"]
325 -> 4602 [label="Return edge from check_zipfile to get_method"]
4306 -> 615 [label="fill_inbuf(1)"]
4297 -> 615 [label="fill_inbuf(1)"]
4326 -> 615 [label="fill_inbuf(0)"]
4317 -> 615 [label="fill_inbuf(0)"]
6603 -> 656 [label="zip(ifd, ofd)"]
745 -> 646 [label="flush_outbuf()"]
645 -> 746 [label="Return edge from flush_outbuf to zip"]
645 -> 752 [label="Return edge from flush_outbuf to zip"]
645 -> 758 [label="Return edge from flush_outbuf to zip"]
645 -> 767 [label="Return edge from flush_outbuf to zip"]
645 -> 782 [label="Return edge from flush_outbuf to zip"]
645 -> 788 [label="Return edge from flush_outbuf to zip"]
645 -> 803 [label="Return edge from flush_outbuf to zip"]
645 -> 809 [label="Return edge from flush_outbuf to zip"]
645 -> 819 [label="Return edge from flush_outbuf to zip"]
645 -> 825 [label="Return edge from flush_outbuf to zip"]
645 -> 860 [label="Return edge from flush_outbuf to zip"]
645 -> 838 [label="Return edge from flush_outbuf to zip"]
645 -> 866 [label="Return edge from flush_outbuf to zip"]
645 -> 881 [label="Return edge from flush_outbuf to zip"]
645 -> 887 [label="Return edge from flush_outbuf to zip"]
645 -> 902 [label="Return edge from flush_outbuf to zip"]
645 -> 908 [label="Return edge from flush_outbuf to zip"]
645 -> 923 [label="Return edge from flush_outbuf to zip"]
645 -> 929 [label="Return edge from flush_outbuf to zip"]
645 -> 931 [label="Return edge from flush_outbuf to zip"]
645 -> 2182 [label="Return edge from flush_outbuf to copy_block"]
645 -> 2188 [label="Return edge from flush_outbuf to copy_block"]
645 -> 2225 [label="Return edge from flush_outbuf to copy_block"]
645 -> 2203 [label="Return edge from flush_outbuf to copy_block"]
645 -> 2209 [label="Return edge from flush_outbuf to copy_block"]
645 -> 2136 [label="Return edge from flush_outbuf to bi_windup"]
645 -> 2122 [label="Return edge from flush_outbuf to bi_windup"]
645 -> 2128 [label="Return edge from flush_outbuf to bi_windup"]
645 -> 2063 [label="Return edge from flush_outbuf to send_bits"]
645 -> 2069 [label="Return edge from flush_outbuf to send_bits"]
2034 -> 7532 [label="Return edge from send_bits to compress_block"]
2034 -> 7494 [label="Return edge from send_bits to compress_block"]
2034 -> 7500 [label="Return edge from send_bits to compress_block"]
2034 -> 7505 [label="Return edge from send_bits to compress_block"]
2034 -> 7518 [label="Return edge from send_bits to compress_block"]
2034 -> 7523 [label="Return edge from send_bits to compress_block"]
2034 -> 7341 [label="Return edge from send_bits to flush_block"]
2034 -> 7353 [label="Return edge from send_bits to flush_block"]
2034 -> 7350 [label="Return edge from send_bits to flush_block"]
2034 -> 7246 [label="Return edge from send_bits to send_tree"]
2034 -> 7240 [label="Return edge from send_bits to send_tree"]
2034 -> 7231 [label="Return edge from send_bits to send_tree"]
2034 -> 7225 [label="Return edge from send_bits to send_tree"]
2034 -> 7211 [label="Return edge from send_bits to send_tree"]
2034 -> 7247 [label="Return edge from send_bits to send_tree"]
2034 -> 7241 [label="Return edge from send_bits to send_tree"]
2034 -> 7232 [label="Return edge from send_bits to send_tree"]
2034 -> 7288 [label="Return edge from send_bits to send_all_trees"]
2034 -> 7289 [label="Return edge from send_bits to send_all_trees"]
2034 -> 7290 [label="Return edge from send_bits to send_all_trees"]
2034 -> 7295 [label="Return edge from send_bits to send_all_trees"]
7293 -> 2035 [label="send_bits((int)((bl_tree[bl_order[rank]]).dl.len), 3)"]
2062 -> 646 [label="flush_outbuf()"]
2068 -> 646 [label="flush_outbuf()"]
7294 -> 7150 [label="send_tree(dyn_ltree, lcodes - 1)"]
7207 -> 2035 [label="send_bits((int)((bl_tree[curlen]).fc.code), (int)((bl_tree[curlen]).dl.len))"]
7221 -> 2035 [label="send_bits((int)((bl_tree[curlen]).fc.code), (int)((bl_tree[curlen]).dl.len))"]
7227 -> 2035 [label="send_bits((int)((bl_tree[16]).fc.code), (int)((bl_tree[16]).dl.len))"]
7231 -> 2035 [label="send_bits(count - 3, 2)"]
7236 -> 2035 [label="send_bits((int)((bl_tree[17]).fc.code), (int)((bl_tree[17]).dl.len))"]
7240 -> 2035 [label="send_bits(count - 3, 3)"]
7242 -> 2035 [label="send_bits((int)((bl_tree[18]).fc.code), (int)((bl_tree[18]).dl.len))"]
7246 -> 2035 [label="send_bits(count - 11, 7)"]
7149 -> 7297 [label="Return edge from send_tree to send_all_trees"]
7149 -> 7298 [label="Return edge from send_tree to send_all_trees"]
7283 -> 7354 [label="Return edge from send_all_trees to flush_block"]
7354 -> 7438 [label="compress_block(dyn_ltree, dyn_dtree)"]
7490 -> 2035 [label="send_bits((int)((ltree + lc)->fc.code), (int)((ltree + lc)->dl.len))"]
7528 -> 2035 [label="send_bits((int)((ltree + 256)->fc.code), (int)((ltree + 256)->dl.len))"]
7437 -> 7351 [label="Return edge from compress_block to flush_block"]
7437 -> 7355 [label="Return edge from compress_block to flush_block"]
7322 -> 6749 [label="init_block()"]
6748 -> 7357 [label="Return edge from init_block to flush_block"]
6748 -> 6746 [label="Return edge from init_block to ct_init"]
6621 -> 812 [label="Return edge from ct_init to zip"]
812 -> 2228 [label="lm_init(level, &deflate_flags)"]
2227 -> 813 [label="Return edge from lm_init to zip"]
818 -> 646 [label="flush_outbuf()"]
824 -> 646 [label="flush_outbuf()"]
827 -> 966 [label="gzipbasename(ifname)"]
837 -> 646 [label="flush_outbuf()"]
844 -> 2589 [label="deflate()"]
2618 -> 2498 [label="deflate_fast()"]
2526 -> 2297 [label="longest_match(hash_head)"]
2296 -> 2637 [label="Return edge from longest_match to deflate"]
2296 -> 2527 [label="Return edge from longest_match to deflate_fast"]
2533 -> 7364 [label="ct_tally((int)(strstart - match_start), (int)(match_length - 3U))"]
7363 -> 2713 [label="Return edge from ct_tally to deflate"]
7363 -> 2653 [label="Return edge from ct_tally to deflate"]
7363 -> 2685 [label="Return edge from ct_tally to deflate"]
7363 -> 2558 [label="Return edge from ct_tally to deflate_fast"]
7363 -> 2535 [label="Return edge from ct_tally to deflate_fast"]
2563 -> 7301 [label="flush_block(tmp___0, (unsigned long)(((long)strstart) - block_start), 0)"]
7311 -> 7535 [label="set_file_type()"]
7534 -> 7312 [label="Return edge from set_file_type to flush_block"]
7310 -> 6965 [label="build_tree(&l_desc)"]
7034 -> 6781 [label="pqdownheap(tree, n)"]
6780 -> 7036 [label="Return edge from pqdownheap to build_tree"]
6780 -> 7045 [label="Return edge from pqdownheap to build_tree"]
6780 -> 7064 [label="Return edge from pqdownheap to build_tree"]
7069 -> 6818 [label="gen_bitlen(desc)"]
6817 -> 7070 [label="Return edge from gen_bitlen to build_tree"]
7070 -> 6925 [label="gen_codes(tree, max_code)"]
6958 -> 2076 [label="bi_reverse((unsigned int)tmp, len)"]
2075 -> 6959 [label="Return edge from bi_reverse to gen_codes"]
2075 -> 6743 [label="Return edge from bi_reverse to ct_init"]
6742 -> 2076 [label="bi_reverse((unsigned int)n, 5)"]
6741 -> 6749 [label="init_block()"]
6924 -> 7071 [label="Return edge from gen_codes to build_tree"]
6924 -> 6737 [label="Return edge from gen_codes to ct_init"]
6964 -> 7313 [label="Return edge from build_tree to flush_block"]
6964 -> 7314 [label="Return edge from build_tree to flush_block"]
6964 -> 7272 [label="Return edge from build_tree to build_bl_tree"]
7265 -> 7315 [label="Return edge from build_bl_tree to flush_block"]
7339 -> 2035 [label="send_bits(eof, 3)"]
7343 -> 2141 [label="copy_block(buf, (unsigned int)stored_len, 1)"]
2164 -> 2093 [label="bi_windup()"]
2092 -> 7360 [label="Return edge from bi_windup to flush_block"]
2092 -> 2165 [label="Return edge from bi_windup to copy_block"]
2140 -> 7344 [label="Return edge from copy_block to flush_block"]
2224 -> 646 [label="flush_outbuf()"]
2202 -> 646 [label="flush_outbuf()"]
2208 -> 646 [label="flush_outbuf()"]
2181 -> 646 [label="flush_outbuf()"]
2187 -> 646 [label="flush_outbuf()"]
7300 -> 2719 [label="Return edge from flush_block to deflate"]
7300 -> 2693 [label="Return edge from flush_block to deflate"]
7300 -> 2678 [label="Return edge from flush_block to deflate"]
7300 -> 2586 [label="Return edge from flush_block to deflate_fast"]
7300 -> 2568 [label="Return edge from flush_block to deflate_fast"]
2573 -> 2433 [label="fill_window()"]
2432 -> 2710 [label="Return edge from fill_window to deflate"]
2432 -> 2287 [label="Return edge from fill_window to lm_init"]
2432 -> 2580 [label="Return edge from fill_window to deflate_fast"]
2280 -> 2433 [label="fill_window()"]
2636 -> 2297 [label="longest_match(hash_head)"]
2651 -> 7364 [label="ct_tally((int)((strstart - 1U) - prev_match), (int)(prev_length - 3U))"]
2673 -> 7301 [label="flush_block(tmp___1, (unsigned long)(((long)strstart) - block_start), 0)"]
2683 -> 7364 [label="ct_tally(0, (int)(*(window + (strstart - 1U))))"]
2688 -> 7301 [label="flush_block(tmp___2, (unsigned long)(((long)strstart) - block_start), 0)"]
2712 -> 7364 [label="ct_tally(0, (int)(*(window + (strstart - 1U))))"]
2714 -> 7301 [label="flush_block(tmp___4, (unsigned long)(((long)strstart) - block_start), 1)"]
2588 -> 845 [label="Return edge from deflate to zip"]
930 -> 646 [label="flush_outbuf()"]
655 -> 6604 [label="Return edge from zip to spec_compress"]
922 -> 646 [label="flush_outbuf()"]
928 -> 646 [label="flush_outbuf()"]
901 -> 646 [label="flush_outbuf()"]
907 -> 646 [label="flush_outbuf()"]
880 -> 646 [label="flush_outbuf()"]
886 -> 646 [label="flush_outbuf()"]
859 -> 646 [label="flush_outbuf()"]
865 -> 646 [label="flush_outbuf()"]
2703 -> 2433 [label="fill_window()"]
2497 -> 2619 [label="Return edge from deflate_fast to deflate"]
2121 -> 646 [label="flush_outbuf()"]
2127 -> 646 [label="flush_outbuf()"]
2135 -> 646 [label="flush_outbuf()"]
7348 -> 2035 [label="send_bits((1 << 1) + eof, 3)"]
7350 -> 7438 [label="compress_block(static_ltree, static_dtree)"]
7349 -> 2035 [label="send_bits((2 << 1) + eof, 3)"]
7353 -> 7284 [label="send_all_trees((l_desc.max_code) + 1, (d_desc.max_code) + 1, max_blindex + 1)"]
7287 -> 2035 [label="send_bits(lcodes - 257, 5)"]
7288 -> 2035 [label="send_bits(dcodes - 1, 5)"]
7289 -> 2035 [label="send_bits(blcodes - 4, 4)"]
7314 -> 7266 [label="build_bl_tree()"]
7269 -> 7074 [label="scan_tree(dyn_ltree, l_desc.max_code)"]
7073 -> 7270 [label="Return edge from scan_tree to build_bl_tree"]
7073 -> 7271 [label="Return edge from scan_tree to build_bl_tree"]
7271 -> 6965 [label="build_tree(&bl_desc)"]
7270 -> 7074 [label="scan_tree(dyn_dtree, d_desc.max_code)"]
7313 -> 6965 [label="build_tree(&d_desc)"]
7044 -> 6781 [label="pqdownheap(tree, 1)"]
7063 -> 6781 [label="pqdownheap(tree, 1)"]
2534 -> 7364 [label="ct_tally(0, (int)(*(window + strstart)))"]
2581 -> 7301 [label="flush_block(tmp___1, (unsigned long)(((long)strstart) - block_start), 1)"]
7359 -> 2093 [label="bi_windup()"]
7496 -> 2035 [label="send_bits((int)((ltree + ((code + 256U) + 1U))->fc.code), (int)((ltree + ((code + 256U) + 1U))->dl.len))"]
7504 -> 2035 [label="send_bits(lc, extra)"]
7514 -> 2035 [label="send_bits((int)((dtree + code)->fc.code), (int)((dtree + code)->dl.len))"]
7522 -> 2035 [label="send_bits((int)dist, extra)"]
7297 -> 7150 [label="send_tree(dyn_dtree, dcodes - 1)"]
810 -> 2025 [label="bi_init(out)"]
2024 -> 811 [label="Return edge from bi_init to zip"]
811 -> 6622 [label="ct_init(&attr, &method___0)"]
6732 -> 6925 [label="gen_codes(static_ltree, 287)"]
808 -> 646 [label="flush_outbuf()"]
802 -> 646 [label="flush_outbuf()"]
787 -> 646 [label="flush_outbuf()"]
781 -> 646 [label="flush_outbuf()"]
766 -> 646 [label="flush_outbuf()"]
757 -> 646 [label="flush_outbuf()"]
751 -> 646 [label="flush_outbuf()"]
648 -> 558 [label="write_buf(ofd, (void *)((char *)outbuf), outcnt)"]
3538 -> 4127 [label="get_method(ifd)"]
3642 -> 3990 [label="get_istat(iname, &istat)"]
4007 -> 3918 [label="do_stat(ifname, sbuf)"]
1374 -> 1130 [label="error((char *)\"corrupt input.\")"]
1402 -> 558 [label="write_buf(out, (void *)((char *)outbuf), (unsigned int)outpos)"]
1405 -> 1130 [label="error((char *)tmp___4)"]
1440 -> 558 [label="write_buf(out, (void *)((char *)outbuf), (unsigned int)outpos)"]
1464 -> 558 [label="write_buf(out, (void *)((char *)outbuf), (unsigned int)outpos)"]
1970 -> 1907 [label="decode(1U << 13, window)"]
1930 -> 1828 [label="decode_c()"]
1835 -> 1500 [label="getbits(16)"]
1504 -> 1469 [label="fillbuf(n)"]
1499 -> 1836 [label="Return edge from getbits to decode_c"]
1499 -> 1890 [label="Return edge from getbits to decode_p"]
1499 -> 1752 [label="Return edge from getbits to read_c_len"]
1499 -> 1757 [label="Return edge from getbits to read_c_len"]
1499 -> 1804 [label="Return edge from getbits to read_c_len"]
1499 -> 1802 [label="Return edge from getbits to read_c_len"]
1499 -> 1664 [label="Return edge from getbits to read_pt_len"]
1499 -> 1669 [label="Return edge from getbits to read_pt_len"]
1499 -> 1707 [label="Return edge from getbits to read_pt_len"]
1696 -> 1469 [label="fillbuf(tmp___1)"]
1706 -> 1500 [label="getbits(2)"]
1721 -> 1516 [label="make_table(nn, pt_len, 8, pt_table)"]
1568 -> 1130 [label="error((char *)\"Bad table\n\")"]
1667 -> 1500 [label="getbits(nbit)"]
1776 -> 1469 [label="fillbuf((int)(pt_len[c]))"]
1800 -> 1500 [label="getbits(4)"]
1801 -> 1500 [label="getbits(9)"]
1821 -> 1516 [label="make_table(510, outbuf, 12, d_buf)"]
1727 -> 1841 [label="Return edge from read_c_len to decode_c"]
1841 -> 1640 [label="read_pt_len(14, 4, -1)"]
1663 -> 1500 [label="getbits(nbit)"]
1755 -> 1500 [label="getbits(9)"]
1862 -> 1946 [label="Return edge from decode_p to decode"]
1906 -> 1972 [label="Return edge from decode to unlzh"]
1976 -> 558 [label="write_buf(out, (void *)((char *)window), n)"]
1827 -> 1932 [label="Return edge from decode_c to decode"]
1945 -> 1863 [label="decode_p()"]
1872 -> 1469 [label="fillbuf((int)(pt_len[j__1]))"]
1889 -> 1500 [label="getbits((int)(j__1 - 1U))"]
1837 -> 1640 [label="read_pt_len(19, 5, 3)"]
1840 -> 1728 [label="read_c_len()"]
1751 -> 1500 [label="getbits(9)"]
595 -> 6433 [label="spec_read(in, (unsigned char *)((char *)inbuf), 32768)"]
601 -> 1152 [label="read_error()"]
587 -> 558 [label="write_buf(out, (void *)((char *)inbuf), insize)"]
573 -> 1169 [label="write_error()"]
5978 -> 615 [label="fill_inbuf(0)"]
5995 -> 5095 [label="huft_build(ll, 19U, 19U, (ush *)((void *)0), (ush *)((void *)0), &tl, &bl)"]
6232 -> 5642 [label="inflate_stored()"]
5685 -> 615 [label="fill_inbuf(0)"]
5701 -> 615 [label="fill_inbuf(0)"]
6236 -> 5750 [label="inflate_fixed()"]
5787 -> 5095 [label="huft_build(l, 288U, 257U, cplens, cplext, &tl, &bl)"]
96 -> 615 [label="fill_inbuf(0)"]
0 -> 187 [label="Return edge from read_tree to unpack"]
187 -> 108 [label="build_tree1()"]
107 -> 188 [label="Return edge from build_tree1 to unpack"]
69 -> 615 [label="fill_inbuf(0)"]
79 -> 1130 [label="error(\"too many leaves in Huffman tree\")"]
42 -> 615 [label="fill_inbuf(0)"]
60 -> 1130 [label="error(\"invalid compressed data -- Huffman code > 32 bits\")"]
52 -> 615 [label="fill_inbuf(0)"]
638 -> 1152 [label="read_error()"]
2014 -> 1980 [label="updcrc1((uch *)buf, len)"]
1979 -> 2021 [label="Return edge from updcrc1 to file_read"]
6404 -> 6433 [label="spec_read(fd, ((spec_fd[num]).buf) + i___0, 131072)"]
1468 -> 1860 [label="Return edge from fillbuf to decode_c"]
1468 -> 1887 [label="Return edge from fillbuf to decode_p"]
1468 -> 1513 [label="Return edge from fillbuf to init_getbits"]
1468 -> 1505 [label="Return edge from fillbuf to getbits"]
1468 -> 1791 [label="Return edge from fillbuf to read_c_len"]
1468 -> 1701 [label="Return edge from fillbuf to read_pt_len"]
1507 -> 1896 [label="Return edge from init_getbits to huf_decode_start"]
1893 -> 1902 [label="Return edge from huf_decode_start to decode_start"]
1899 -> 1968 [label="Return edge from decode_start to unlzh"]
1089 -> 1130 [label="error(\"argc<=0\")"]
3472 -> 3500 [label="treat_stdin()"]
3468 -> 1130 [label="error((char *)\"insufficient memory\")"]
3463 -> 1130 [label="error((char *)\"insufficient memory\")"]
3458 -> 1130 [label="error((char *)\"insufficient memory\")"]
3453 -> 1130 [label="error((char *)\"insufficient memory\")"]
1200 -> 1054 [label="Return edge from xmalloc to add_envopt"]
1082 -> 1130 [label="error(\"out of memory\")"]
3438 -> 5050 [label="do_exit(1)"]
3317 -> 265 [label="help()"]
273 -> 257 [label="usage()"]
256 -> 274 [label="Return edge from usage to help"]
256 -> 3360 [label="Return edge from usage to main"]
256 -> 3390 [label="Return edge from usage to main"]
256 -> 3415 [label="Return edge from usage to main"]
3415 -> 5050 [label="do_exit(1)"]
3390 -> 5050 [label="do_exit(1)"]
3360 -> 5050 [label="do_exit(1)"]
264 -> 3319 [label="Return edge from help to main"]
3319 -> 5050 [label="do_exit(0)"]
3328 -> 284 [label="license()"]
283 -> 3330 [label="Return edge from license to main"]
3330 -> 5050 [label="do_exit(0)"]
3359 -> 257 [label="usage()"]
3381 -> 302 [label="version()"]
301 -> 3383 [label="Return edge from version to main"]
3383 -> 5050 [label="do_exit(0)"]
3389 -> 257 [label="usage()"]
3413 -> 257 [label="usage()"]
3003 -> 2722 [label="my_strlen((const char *)(p->name))"]
2721 -> 3004 [label="Return edge from my_strlen to _getopt_internal"]
2721 -> 3028 [label="Return edge from my_strlen to _getopt_internal"]
2721 -> 3075 [label="Return edge from my_strlen to _getopt_internal"]
2721 -> 3052 [label="Return edge from my_strlen to _getopt_internal"]
2721 -> 3067 [label="Return edge from my_strlen to _getopt_internal"]
3024 -> 2722 [label="my_strlen((const char *)nextchar)"]
3036 -> 2722 [label="my_strlen((const char *)nextchar)"]
3043 -> 2722 [label="my_strlen((const char *)nextchar)"]
3063 -> 2722 [label="my_strlen((const char *)nextchar)"]
3091 -> 2740 [label="my_index(optstring, (int)(*nextchar))"]
2739 -> 3112 [label="Return edge from my_index to _getopt_internal"]
2739 -> 3093 [label="Return edge from my_index to _getopt_internal"]
3111 -> 2740 [label="my_index(optstring, (int)c)"]
2929 -> 2751 [label="exchange((char **)argv)"]
1053 -> 1201 [label="xmalloc(tmp___0 + 1U)"]
1210 -> 1130 [label="error((char *)\"out of memory\")"]}