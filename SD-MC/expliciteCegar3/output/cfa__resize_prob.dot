digraph resize_prob {
1 [shape="circle"]
2 [shape="circle"]
12 [shape="diamond"]
15 [shape="circle"]
16 [shape="circle"]
20 [shape="circle"]
27 [shape="doublecircle"]
30 [shape="circle"]
29 [shape="diamond"]
31 [shape="circle"]
32 [shape="circle"]
28 [shape="circle"]
0 [shape="circle"]
2 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">2</td><td align="left">arc_t *arc;</td></tr><tr><td align="right">4</td><td align="left">node_t *node;</td></tr><tr><td align="right">6</td><td align="left">node_t *stop;</td></tr><tr><td align="right">7</td><td align="left">node_t *root;</td></tr><tr><td align="right">8</td><td align="left">long off;</td></tr><tr><td align="right">10</td><td align="left">net-&gt;max_m = (net-&gt;max_m) + 300000;</td></tr><tr><td align="right">11</td><td align="left">void __CPAchecker_TMP_0;</td></tr><tr><td align="right">13</td><td align="left">__CPAchecker_TMP_0 = realloc(net-&gt;arcs, (net-&gt;max_m) * (sizeof(arc_t )));</td></tr><tr><td align="right">14</td><td align="left">arc = (arc_t *)__CPAchecker_TMP_0;</td></tr></table>>]
2 -> 12[label=""]
16 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">16</td><td align="left">printf(\"network %s: not enough memory\n\", net-&gt;inputfile);</td></tr><tr><td align="right">17</td><td align="left">fflush(stdout);</td></tr><tr><td align="right">18</td><td align="left">return -1;</td></tr></table>>]
16 -> 0[label=""]
20 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">20</td><td align="left">net-&gt;arcs = arc;</td></tr><tr><td align="right">21</td><td align="left">net-&gt;stop_arcs = arc + (net-&gt;m);</td></tr><tr><td align="right">22</td><td align="left">node = net-&gt;nodes;</td></tr><tr><td align="right">24</td><td align="left">root = node;</td></tr><tr><td align="right">23</td><td align="left">for</td></tr><tr><td align="right">25</td><td align="left">node = node + 1;</td></tr><tr><td align="right">26</td><td align="left">stop = (void *)(net-&gt;stop_nodes);</td></tr></table>>]
20 -> 27[label=""]
32 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">32</td><td align="left">node-&gt;basic_arc = (arc_t *)(((long)(node-&gt;basic_arc)) + off);</td></tr><tr><td align="right">33</td><td align="left"></td></tr></table>>]
32 -> 31[label=""]
1 -> 2 [label="Function start dummy edge" fontname="Courier New"]
12 -> 15 [label="[!(!arc)]" fontname="Courier New"]
12 -> 16 [label="[!arc]" fontname="Courier New"]
15 -> 20 [label="off = ((long)arc) - ((long)(net->arcs));" fontname="Courier New"]
27 -> 30 [label="[!(node < stop)]" fontname="Courier New"]
27 -> 29 [label="[node < stop]" fontname="Courier New"]
29 -> 31 [label="[!((node->pred) != root)]" fontname="Courier New"]
29 -> 32 [label="[(node->pred) != root]" fontname="Courier New"]
31 -> 28 [label="" fontname="Courier New"]
30 -> 0 [label="return 0;" fontname="Courier New"]
28 -> 27 [label="node = node + 1;" fontname="Courier New"]
}