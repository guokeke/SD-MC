digraph v_nonbon {
14699 [shape="circle"]
14700 [shape="circle"]
14701 [shape="diamond"]
14702 [shape="circle"]
14703 [shape="circle"]
14705 [shape="circle"]
14706 [shape="circle"]
14708 [shape="diamond"]
14709 [shape="circle"]
14710 [shape="circle"]
14711 [shape="circle"]
14713 [shape="circle"]
14715 [shape="doublecircle"]
14717 [shape="circle"]
14716 [shape="circle"]
14718 [shape="circle"]
14720 [shape="circle"]
14721 [shape="doublecircle"]
14723 [shape="circle"]
14722 [shape="circle"]
14732 [shape="doublecircle"]
14734 [shape="circle"]
14733 [shape="diamond"]
14735 [shape="circle"]
14736 [shape="circle"]
14739 [shape="circle"]
14740 [shape="doublecircle"]
14742 [shape="circle"]
14741 [shape="circle"]
14755 [shape="circle"]
14738 [shape="circle"]
14757 [shape="circle"]
14665 [shape="circle"]
14666 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">14666</td><td align="left">Function start dummy edge</td></tr><tr><td align="right">14667</td><td align="left">double r;</td></tr><tr><td align="right">14669</td><td align="left">double r0;</td></tr><tr><td align="right">14671</td><td align="left">double xt;</td></tr><tr><td align="right">14673</td><td align="left">double yt;</td></tr><tr><td align="right">14675</td><td align="left">double zt;</td></tr><tr><td align="right">14677</td><td align="left">double k;</td></tr><tr><td align="right">14679</td><td align="left">int i;</td></tr><tr><td align="right">14681</td><td align="left">ATOM *a1;</td></tr><tr><td align="right">14683</td><td align="left">ATOM *a2;</td></tr><tr><td align="right">14685</td><td align="left">int ii;</td></tr><tr><td align="right">14687</td><td align="left">int jj;</td></tr><tr><td align="right">14689</td><td align="left">int imax;</td></tr><tr><td align="right">14691</td><td align="left">double vx;</td></tr><tr><td align="right">14693</td><td align="left">ATOM *(*atomall)[];</td></tr><tr><td align="right">14695</td><td align="left">double dielectric;</td></tr><tr><td align="right">14697</td><td align="left">void *tmp;</td></tr></table>>]
14666 -> 14699[label=""]
14703 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">14703</td><td align="left">dielectric = 1;</td></tr><tr><td align="right">14704</td><td align="left"></td></tr></table>>]
14703 -> 14702[label=""]
14706 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">14706</td><td align="left">tmp = malloc(((unsigned int)i) * (sizeof(ATOM *)));</td></tr><tr><td align="right">14707</td><td align="left">atomall = (ATOM *(*)[])tmp;</td></tr></table>>]
14706 -> 14708[label=""]
14713 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">14713</td><td align="left">i = 0;</td></tr><tr><td align="right">14714</td><td align="left">while</td></tr></table>>]
14713 -> 14715[label=""]
14718 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">14718</td><td align="left">i = i + 1;</td></tr><tr><td align="right">14719</td><td align="left"></td></tr></table>>]
14718 -> 14715[label=""]
14722 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">14722</td><td align="left">a1 = (*atomall)[i];</td></tr><tr><td align="right">14724</td><td align="left">vx = a1-&gt;VP;</td></tr><tr><td align="right">14725</td><td align="left">xt = (((a1-&gt;dx) * lambda) + (a1-&gt;x)) - (a1-&gt;px);</td></tr><tr><td align="right">14726</td><td align="left">yt = (((a1-&gt;dy) * lambda) + (a1-&gt;y)) - (a1-&gt;py);</td></tr><tr><td align="right">14727</td><td align="left">zt = (((a1-&gt;dz) * lambda) + (a1-&gt;z)) - (a1-&gt;pz);</td></tr><tr><td align="right">14728</td><td align="left">vx = vx - ((((a1-&gt;dpx) * xt) + ((a1-&gt;dpy) * yt)) + ((a1-&gt;dpz) * zt));</td></tr><tr><td align="right">14729</td><td align="left">vx = vx - (((xt * ((((0.5 * (a1-&gt;qxx)) * xt) + ((a1-&gt;qxy) * yt)) + ((a1-&gt;qxz) * zt))) + (yt * (((0.5 * (a1-&gt;qyy)) * yt) + ((a1-&gt;qyz) * zt)))) + (((0.5 * zt) * (a1-&gt;qzz)) * zt));</td></tr><tr><td align="right">14730</td><td align="left">jj = 0;</td></tr><tr><td align="right">14731</td><td align="left">while</td></tr></table>>]
14722 -> 14732[label=""]
14741 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">14741</td><td align="left">a2 = (ATOM *)((a1-&gt;close)[ii]);</td></tr><tr><td align="right">14743</td><td align="left">xt = (((a2-&gt;dx) - (a1-&gt;dx)) * lambda) + ((a2-&gt;x) - (a1-&gt;x));</td></tr><tr><td align="right">14744</td><td align="left">yt = (((a2-&gt;dy) - (a1-&gt;dy)) * lambda) + ((a2-&gt;y) - (a1-&gt;y));</td></tr><tr><td align="right">14745</td><td align="left">zt = (((a2-&gt;dz) - (a1-&gt;dz)) * lambda) + ((a2-&gt;z) - (a1-&gt;z));</td></tr><tr><td align="right">14746</td><td align="left">r = 1 / (((xt * xt) + (yt * yt)) + (zt * zt));</td></tr><tr><td align="right">14747</td><td align="left">r0 = sqrt(r);</td></tr><tr><td align="right">14748</td><td align="left">k = ((dielectric * (a1-&gt;q)) * (a2-&gt;q)) * r0;</td></tr><tr><td align="right">14749</td><td align="left">r = (r * r) * r;</td></tr><tr><td align="right">14750</td><td align="left">k = k - (((a1-&gt;a) * (a2-&gt;a)) * r);</td></tr><tr><td align="right">14751</td><td align="left">k = k + ((((a1-&gt;b) * (a2-&gt;b)) * r) * r);</td></tr><tr><td align="right">14752</td><td align="left">vx = vx + k;</td></tr><tr><td align="right">14753</td><td align="left">ii = ii + 1;</td></tr><tr><td align="right">14754</td><td align="left"></td></tr></table>>]
14741 -> 14740[label=""]
14755 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">14755</td><td align="left">i = i + 1;</td></tr><tr><td align="right">14756</td><td align="left"></td></tr></table>>]
14755 -> 14721[label=""]
14757 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">14757</td><td align="left">free((void *)atomall);</td></tr><tr><td align="right">14758</td><td align="left">return 1;</td></tr></table>>]
14757 -> 14665[label=""]
100378 [shape="component" label="fv_update_nonbon"]
14699 -> 100378 [label="fv_update_nonbon(lambda);" fontname="Courier New"]
100378 -> 14700 [label="" fontname="Courier New"]
100379 [shape="component" label="get_f_variable"]
14700 -> 100379 [label="dielectric = get_f_variable((char *)\"dielec\");" fontname="Courier New"]
100379 -> 14701 [label="" fontname="Courier New"]
14701 -> 14702 [label="[!(dielectric < 1)]" fontname="Courier New"]
14701 -> 14703 [label="[dielectric < 1]" fontname="Courier New"]
14702 -> 14705 [label="dielectric = 332.17752 / dielectric;" fontname="Courier New"]
100380 [shape="component" label="a_number"]
14705 -> 100380 [label="i = a_number();" fontname="Courier New"]
100380 -> 14706 [label="" fontname="Courier New"]
14708 -> 14709 [label="[!(((unsigned int)atomall) == ((unsigned int)((void *)0)))]" fontname="Courier New"]
14708 -> 14710 [label="[((unsigned int)atomall) == ((unsigned int)((void *)0))]" fontname="Courier New"]
100381 [shape="component" label="aaerror"]
14710 -> 100381 [label="aaerror((char *)\"cannot allocate memory in v_nonbon\");" fontname="Courier New"]
100381 -> 14711 [label="" fontname="Courier New"]
100382 [shape="component" label="a_number"]
14709 -> 100382 [label="imax = a_number();" fontname="Courier New"]
100382 -> 14713 [label="" fontname="Courier New"]
14715 -> 14717 [label="[!(i < imax)]" fontname="Courier New"]
14715 -> 14716 [label="[i < imax]" fontname="Courier New"]
100383 [shape="component" label="a_next"]
14716 -> 100383 [label="(*atomall)[i] = a_next(i);" fontname="Courier New"]
100383 -> 14718 [label="" fontname="Courier New"]
14717 -> 14720 [label="i = 0;" fontname="Courier New"]
14721 -> 14723 [label="[!(i < imax)]" fontname="Courier New"]
14721 -> 14722 [label="[i < imax]" fontname="Courier New"]
14732 -> 14734 [label="[!(jj < 200)]" fontname="Courier New"]
14732 -> 14733 [label="[jj < 200]" fontname="Courier New"]
14733 -> 14735 [label="[!(((unsigned int)((a1->close)[jj])) == ((unsigned int)((void *)0)))]" fontname="Courier New"]
14733 -> 14736 [label="[((unsigned int)((a1->close)[jj])) == ((unsigned int)((void *)0))]" fontname="Courier New"]
14734 -> 14739 [label="ii = 0;" fontname="Courier New"]
14740 -> 14742 [label="[!(ii < jj)]" fontname="Courier New"]
14740 -> 14741 [label="[ii < jj]" fontname="Courier New"]
14742 -> 14755 [label="*V = (*V) + vx;" fontname="Courier New"]
14735 -> 14738 [label="jj = jj + 1;" fontname="Courier New"]
100384 [shape="component" label="a_inactive_f_zero"]
14723 -> 100384 [label="a_inactive_f_zero();" fontname="Courier New"]
100384 -> 14757 [label="" fontname="Courier New"]
14711 -> 14665 [label="return 0;" fontname="Courier New"]
14720 -> 14721 [label="while" fontname="Courier New"]
14736 -> 14734 [label="break" fontname="Courier New"]
14739 -> 14740 [label="while" fontname="Courier New"]
14738 -> 14732 [label="" fontname="Courier New"]
}