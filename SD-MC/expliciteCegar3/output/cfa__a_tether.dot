digraph a_tether {
10950 [shape="circle"]
10951 [shape="circle"]
11009 [shape="diamond"]
11010 [shape="circle"]
11011 [shape="circle"]
11013 [shape="circle"]
11025 [shape="diamond"]
11028 [shape="diamond"]
11027 [shape="circle"]
11029 [shape="circle"]
11033 [shape="diamond"]
11032 [shape="circle"]
11034 [shape="circle"]
11038 [shape="diamond"]
11037 [shape="circle"]
11039 [shape="circle"]
11043 [shape="diamond"]
11042 [shape="circle"]
11044 [shape="circle"]
11048 [shape="diamond"]
11047 [shape="circle"]
11049 [shape="circle"]
11051 [shape="circle"]
11052 [shape="circle"]
11053 [shape="circle"]
11026 [shape="circle"]
11055 [shape="doublecircle"]
11056 [shape="diamond"]
11058 [shape="circle"]
11059 [shape="circle"]
11061 [shape="diamond"]
11062 [shape="diamond"]
11063 [shape="diamond"]
11064 [shape="circle"]
11065 [shape="diamond"]
11068 [shape="circle"]
11067 [shape="circle"]
11066 [shape="circle"]
11076 [shape="circle"]
11083 [shape="diamond"]
11084 [shape="circle"]
11085 [shape="circle"]
11088 [shape="circle"]
11092 [shape="circle"]
11093 [shape="circle"]
11057 [shape="diamond"]
11096 [shape="circle"]
11097 [shape="circle"]
11100 [shape="circle"]
11101 [shape="circle"]
11102 [shape="circle"]
11103 [shape="circle"]
11104 [shape="circle"]
11095 [shape="circle"]
11072 [shape="circle"]
10949 [shape="circle"]
10951 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label="Long linear chain of edges between nodes 10951 and 11008"]
10951 -> 11009[label=""]
11013 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">11013</td><td align="left">tmp = malloc(((unsigned int)numatm) * (sizeof(double)));</td></tr><tr><td align="right">11014</td><td align="left">x = (double (*)[])tmp;</td></tr><tr><td align="right">11015</td><td align="left">tmp___0 = malloc(((unsigned int)numatm) * (sizeof(double)));</td></tr><tr><td align="right">11016</td><td align="left">y = (double (*)[])tmp___0;</td></tr><tr><td align="right">11017</td><td align="left">tmp___1 = malloc(((unsigned int)numatm) * (sizeof(double)));</td></tr><tr><td align="right">11018</td><td align="left">z = (double (*)[])tmp___1;</td></tr><tr><td align="right">11019</td><td align="left">tmp___2 = malloc(((unsigned int)numatm) * (sizeof(double)));</td></tr><tr><td align="right">11020</td><td align="left">xx = (double (*)[])tmp___2;</td></tr><tr><td align="right">11021</td><td align="left">tmp___3 = malloc(((unsigned int)numatm) * (sizeof(double)));</td></tr><tr><td align="right">11022</td><td align="left">yy = (double (*)[])tmp___3;</td></tr><tr><td align="right">11023</td><td align="left">tmp___4 = malloc(((unsigned int)numatm) * (sizeof(double)));</td></tr><tr><td align="right">11024</td><td align="left">zz = (double (*)[])tmp___4;</td></tr></table>>]
11013 -> 11025[label=""]
11067 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">11067</td><td align="left">r = ((a1-&gt;x) - (bp-&gt;x)) * ((a1-&gt;x) - (bp-&gt;x));</td></tr><tr><td align="right">11069</td><td align="left">r = r + (((a1-&gt;y) - (bp-&gt;y)) * ((a1-&gt;y) - (bp-&gt;y)));</td></tr><tr><td align="right">11070</td><td align="left">r = r + (((a1-&gt;z) - (bp-&gt;z)) * ((a1-&gt;z) - (bp-&gt;z)));</td></tr><tr><td align="right">11071</td><td align="left"></td></tr></table>>]
11067 -> 11066[label=""]
11076 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">11076</td><td align="left">(*y)[tried] = (a1-&gt;y) + (lambda * (a1-&gt;dy));</td></tr><tr><td align="right">11077</td><td align="left">(*z)[tried] = (a1-&gt;z) + (lambda * (a1-&gt;dz));</td></tr><tr><td align="right">11078</td><td align="left">(*xx)[tried] = bp-&gt;x;</td></tr><tr><td align="right">11079</td><td align="left">(*yy)[tried] = bp-&gt;y;</td></tr><tr><td align="right">11080</td><td align="left">(*zz)[tried] = bp-&gt;z;</td></tr><tr><td align="right">11081</td><td align="left">tried = tried + 1;</td></tr><tr><td align="right">11082</td><td align="left">rms = rms + r;</td></tr></table>>]
11076 -> 11083[label=""]
11085 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">11085</td><td align="left">rmax = r;</td></tr><tr><td align="right">11086</td><td align="left">imax = a1-&gt;serial;</td></tr><tr><td align="right">11087</td><td align="left"></td></tr></table>>]
11085 -> 11084[label=""]
11088 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">11088</td><td align="left">*V = (*V) + zt;</td></tr><tr><td align="right">11089</td><td align="left">tmp___5 = sqrt(r);</td></tr><tr><td align="right">11090</td><td align="left">fprintf(op, \"Tether %d E %f error %f\n\", a1-&gt;serial, zt, tmp___5);</td></tr><tr><td align="right">11091</td><td align="left"></td></tr></table>>]
11088 -> 11062[label=""]
11097 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">11097</td><td align="left">rms = sqrt(rms / ((double)tried));</td></tr><tr><td align="right">11098</td><td align="left">rmax = sqrt(rmax);</td></tr><tr><td align="right">11099</td><td align="left">fprintf(op, \" RMSD %f Maximum Deviation %f \n\", rms, rmax);</td></tr></table>>]
11097 -> 11100[label=""]
11104 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">11104</td><td align="left">free((void *)yy);</td></tr><tr><td align="right">11105</td><td align="left">free((void *)xx);</td></tr><tr><td align="right">11106</td><td align="left">free((void *)z);</td></tr><tr><td align="right">11107</td><td align="left">free((void *)y);</td></tr><tr><td align="right">11108</td><td align="left">free((void *)x);</td></tr><tr><td align="right">11109</td><td align="left">return 1;</td></tr></table>>]
11104 -> 10949[label=""]
11072 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">11072</td><td align="left">yt = ((a1-&gt;y) - (bp-&gt;y)) + (lambda * (a1-&gt;dy));</td></tr><tr><td align="right">11073</td><td align="left">zt = ((a1-&gt;z) - (bp-&gt;z)) + (lambda * (a1-&gt;dz));</td></tr><tr><td align="right">11074</td><td align="left">r = ((xt * xt) + (yt * yt)) + (zt * zt);</td></tr><tr><td align="right">11075</td><td align="left"></td></tr></table>>]
11072 -> 11066[label=""]
10950 -> 10951 [label="Function start dummy edge" fontname="Courier New"]
11009 -> 11010 [label="[!(((unsigned int)bp) == ((unsigned int)((void *)0)))]" fontname="Courier New"]
11009 -> 11011 [label="[((unsigned int)bp) == ((unsigned int)((void *)0))]" fontname="Courier New"]
100630 [shape="component" label="a_number"]
11010 -> 100630 [label="numatm = a_number();" fontname="Courier New"]
100630 -> 11013 [label="" fontname="Courier New"]
11025 -> 11028 [label="[!(((unsigned int)x) == ((unsigned int)((void *)0)))]" fontname="Courier New"]
11025 -> 11027 [label="[((unsigned int)x) == ((unsigned int)((void *)0))]" fontname="Courier New"]
100631 [shape="component" label="aaerror"]
11027 -> 100631 [label="aaerror((char *)\"cannot allocate memory\");" fontname="Courier New"]
100631 -> 11029 [label="" fontname="Courier New"]
11028 -> 11033 [label="[!(((unsigned int)y) == ((unsigned int)((void *)0)))]" fontname="Courier New"]
11028 -> 11032 [label="[((unsigned int)y) == ((unsigned int)((void *)0))]" fontname="Courier New"]
100632 [shape="component" label="aaerror"]
11032 -> 100632 [label="aaerror((char *)\"cannot allocate memory\");" fontname="Courier New"]
100632 -> 11034 [label="" fontname="Courier New"]
11033 -> 11038 [label="[!(((unsigned int)z) == ((unsigned int)((void *)0)))]" fontname="Courier New"]
11033 -> 11037 [label="[((unsigned int)z) == ((unsigned int)((void *)0))]" fontname="Courier New"]
100633 [shape="component" label="aaerror"]
11037 -> 100633 [label="aaerror((char *)\"cannot allocate memory\");" fontname="Courier New"]
100633 -> 11039 [label="" fontname="Courier New"]
11038 -> 11043 [label="[!(((unsigned int)xx) == ((unsigned int)((void *)0)))]" fontname="Courier New"]
11038 -> 11042 [label="[((unsigned int)xx) == ((unsigned int)((void *)0))]" fontname="Courier New"]
100634 [shape="component" label="aaerror"]
11042 -> 100634 [label="aaerror((char *)\"cannot allocate memory\");" fontname="Courier New"]
100634 -> 11044 [label="" fontname="Courier New"]
11043 -> 11048 [label="[!(((unsigned int)yy) == ((unsigned int)((void *)0)))]" fontname="Courier New"]
11043 -> 11047 [label="[((unsigned int)yy) == ((unsigned int)((void *)0))]" fontname="Courier New"]
100635 [shape="component" label="aaerror"]
11047 -> 100635 [label="aaerror((char *)\"cannot allocate memory\");" fontname="Courier New"]
100635 -> 11049 [label="" fontname="Courier New"]
11048 -> 11051 [label="[!(((unsigned int)zz) == ((unsigned int)((void *)0)))]" fontname="Courier New"]
11048 -> 11052 [label="[((unsigned int)zz) == ((unsigned int)((void *)0))]" fontname="Courier New"]
100636 [shape="component" label="aaerror"]
11052 -> 100636 [label="aaerror((char *)\"cannot allocate memory\");" fontname="Courier New"]
100636 -> 11053 [label="" fontname="Courier New"]
11051 -> 11026 [label="" fontname="Courier New"]
11055 -> 11056 [label="" fontname="Courier New"]
11056 -> 11058 [label="[!(((unsigned int)bp) == ((unsigned int)((void *)0)))]" fontname="Courier New"]
11056 -> 11059 [label="[((unsigned int)bp) == ((unsigned int)((void *)0))]" fontname="Courier New"]
11058 -> 11061 [label="a1 = bp->atom1;" fontname="Courier New"]
11061 -> 11062 [label="[!((a1->serial) >= ilow)]" fontname="Courier New"]
11061 -> 11063 [label="[(a1->serial) >= ilow]" fontname="Courier New"]
11063 -> 11064 [label="[!((a1->serial) <= ihigh)]" fontname="Courier New"]
11063 -> 11065 [label="[(a1->serial) <= ihigh]" fontname="Courier New"]
11065 -> 11068 [label="[!(lambda == 0)]" fontname="Courier New"]
11065 -> 11067 [label="[lambda == 0]" fontname="Courier New"]
11066 -> 11076 [label="(*x)[tried] = (a1->x) + (lambda * (a1->dx));" fontname="Courier New"]
11083 -> 11084 [label="[!(r > rmax)]" fontname="Courier New"]
11083 -> 11085 [label="[r > rmax]" fontname="Courier New"]
11084 -> 11088 [label="zt = (bp->k) * r;" fontname="Courier New"]
11062 -> 11092 [label="[!(((unsigned int)bp) == ((unsigned int)(bp->next)))]" fontname="Courier New"]
11062 -> 11093 [label="[((unsigned int)bp) == ((unsigned int)(bp->next))]" fontname="Courier New"]
11057 -> 11096 [label="[!(tried > 0)]" fontname="Courier New"]
11057 -> 11097 [label="[tried > 0]" fontname="Courier New"]
100637 [shape="component" label="bstrot"]
11100 -> 100637 [label="tmp___6 = bstrot(&((*x)[0]), &((*y)[0]), &((*z)[0]), &((*xx)[0]), &((*yy)[0]), &((*zz)[0]), tried, matrix, delta);" fontname="Courier New"]
100637 -> 11101 [label="" fontname="Courier New"]
100638 [shape="component" label="set_f_variable"]
11102 -> 100638 [label="set_f_variable((char *)\"rmsdev\", rms);" fontname="Courier New"]
100638 -> 11103 [label="" fontname="Courier New"]
11096 -> 11104 [label="free((void *)zz);" fontname="Courier New"]
11092 -> 11095 [label="bp = (TETHER *)(bp->next);" fontname="Courier New"]
11068 -> 11072 [label="xt = ((a1->x) - (bp->x)) + (lambda * (a1->dx));" fontname="Courier New"]
11064 -> 11062 [label="" fontname="Courier New"]
11011 -> 10949 [label="return 1;" fontname="Courier New"]
11029 -> 10949 [label="return 1;" fontname="Courier New"]
11034 -> 10949 [label="return 1;" fontname="Courier New"]
11039 -> 10949 [label="return 1;" fontname="Courier New"]
11044 -> 10949 [label="return 1;" fontname="Courier New"]
11049 -> 10949 [label="return 1;" fontname="Courier New"]
11053 -> 10949 [label="return 1;" fontname="Courier New"]
11026 -> 11055 [label="while" fontname="Courier New"]
11059 -> 10949 [label="return 0;" fontname="Courier New"]
11093 -> 11057 [label="break" fontname="Courier New"]
11101 -> 11102 [label="fprintf(op, \" RMSD after superposition %f\n\", tmp___6);" fontname="Courier New"]
11103 -> 11096 [label="" fontname="Courier New"]
11095 -> 11055 [label="" fontname="Courier New"]
}