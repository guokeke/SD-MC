
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 31 04:42:01 PDT 2013
//----------------------------------------------------

package org.sosy_lab.cpachecker.util.predicates.smtInterpol;

import de.uni_freiburg.informatik.ultimate.logic.*;
import java.math.BigInteger;
import java.math.BigDecimal;
import java.io.Reader;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import org.sosy_lab.common.Pair;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 31 04:42:01 PDT 2013
  */
@javax.annotation.Generated("JFlex")
@SuppressWarnings(value = "all")
public  class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\021\006\000\002\002\004\000\002\021" +
    "\006\000\002\021\002\000\002\014\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\002\003\000\002\005\003\000\002\005\002\000\002" +
    "\004\004\000\002\004\003\000\002\003\003\000\002\003" +
    "\006\000\002\007\004\000\002\007\003\000\002\006\004" +
    "\000\002\011\004\000\002\011\003\000\002\010\006\000" +
    "\002\013\004\000\002\013\003\000\002\012\006\000\002" +
    "\020\004\000\002\020\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\006\000\002\017\011\000\002\017\011" +
    "\000\002\017\011\000\002\017\007\000\002\015\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\006\002\ufffe\017\005\001\002\000\004\002" +
    "\116\001\002\000\020\005\006\012\021\013\010\014\017" +
    "\015\007\016\014\017\013\001\002\000\004\016\110\001" +
    "\002\000\022\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\001\002\000\022\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\001\002\000\004\020\106\001\002\000\004\020\ufffd\001" +
    "\002\000\014\004\024\006\027\007\030\010\025\016\014" +
    "\001\002\000\022\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\001\002\000\022\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\001\002\000\004\020\022\001\002\000\022\011\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\001\002\000\022\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\001\002\000\022\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\001\002\000\006\002\ufffe\017\005\001\002\000" +
    "\004\002\001\001\002\000\016\012\021\013\010\014\017" +
    "\015\007\016\014\017\013\001\002\000\004\017\064\001" +
    "\002\000\016\012\021\013\010\014\017\015\007\016\014" +
    "\017\013\001\002\000\004\017\053\001\002\000\004\017" +
    "\031\001\002\000\004\017\033\001\002\000\004\020\050" +
    "\001\002\000\004\016\036\001\002\000\006\017\033\020" +
    "\uffea\001\002\000\004\020\uffeb\001\002\000\006\016\014" +
    "\017\041\001\002\000\010\016\ufff3\017\ufff3\020\ufff3\001" +
    "\002\000\004\020\047\001\002\000\004\016\014\001\002" +
    "\000\006\016\014\017\041\001\002\000\010\016\014\017" +
    "\041\020\ufff4\001\002\000\004\020\045\001\002\000\010" +
    "\016\ufff2\017\ufff2\020\ufff2\001\002\000\004\020\ufff5\001" +
    "\002\000\006\017\uffe9\020\uffe9\001\002\000\016\012\021" +
    "\013\010\014\017\015\007\016\014\017\013\001\002\000" +
    "\004\020\052\001\002\000\022\011\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\001\002\000" +
    "\004\017\033\001\002\000\004\020\055\001\002\000\016" +
    "\012\021\013\010\014\017\015\007\016\014\017\013\001" +
    "\002\000\004\020\057\001\002\000\022\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\001" +
    "\002\000\020\012\021\013\010\014\017\015\007\016\014" +
    "\017\013\020\uffe7\001\002\000\004\020\062\001\002\000" +
    "\022\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\001\002\000\004\020\uffe8\001\002\000" +
    "\004\017\065\001\002\000\004\016\074\001\002\000\006" +
    "\017\065\020\uffed\001\002\000\004\020\070\001\002\000" +
    "\016\012\021\013\010\014\017\015\007\016\014\017\013" +
    "\001\002\000\004\020\072\001\002\000\022\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\001\002\000\004\020\uffee\001\002\000\016\012\021\013" +
    "\010\014\017\015\007\016\014\017\013\001\002\000\004" +
    "\020\076\001\002\000\006\017\uffec\020\uffec\001\002\000" +
    "\004\011\101\001\002\000\006\011\101\020\ufff0\001\002" +
    "\000\004\016\104\001\002\000\004\020\103\001\002\000" +
    "\022\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\001\002\000\006\011\uffef\020\uffef\001" +
    "\002\000\004\020\ufff1\001\002\000\006\002\ufffe\017\005" +
    "\001\002\000\004\002\uffff\001\002\000\004\017\111\001" +
    "\002\000\010\016\014\017\041\020\ufff6\001\002\000\004" +
    "\020\114\001\002\000\004\020\ufff7\001\002\000\006\016" +
    "\014\017\041\001\002\000\004\020\uffdf\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\004\021\003\001\001\000\002\001\001\000" +
    "\014\002\017\014\015\015\010\016\014\017\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\022\001\001\000\002\001\001\000\010\002\017\016" +
    "\014\017\076\001\001\000\002\001\001\000\012\002\017" +
    "\016\014\017\057\020\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\033\013\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\033\013\034\001" +
    "\001\000\002\001\001\000\006\002\036\003\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\041\001" +
    "\001\000\010\002\036\003\042\004\043\001\001\000\010" +
    "\002\036\003\042\004\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\017\016\014\017\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\033\013\053\001\001\000\002" +
    "\001\001\000\010\002\017\016\014\017\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\017\016\014" +
    "\017\057\020\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\065\011\066\001\001" +
    "\000\002\001\001\000\006\010\065\011\072\001\001\000" +
    "\002\001\001\000\010\002\017\016\014\017\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\017\016\014\017\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\077\007\101\001\001\000" +
    "\006\006\077\007\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\036\003\042\004\112\005\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\036" +
    "\003\114\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


  SmtInterpolEnvironment env;
  List<Term> termList = new ArrayList<Term>();

  public Parser(SmtInterpolEnvironment env, Reader reader) {
    ComplexSymbolFactory sf = new ComplexSymbolFactory();
    Lexer lexer = new Lexer(reader);
    lexer.setSymbolFactory(sf);
    this.setScanner(lexer);
    this.symbolFactory = sf;
    this.env = env;  
  }

  public Term[] getTerms() {
    return termList.toArray(new Term[0]);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@javax.annotation.Generated("JFlex")
@SuppressWarnings(value = "all")
class  CUP$Parser$actions {


  Map<String,TermVariable> localVars = new HashMap<String, TermVariable>(); 
  List<Object> varScopes = new ArrayList<Object>();

  public Sort lookupSort(String name, Sort[] args) {
    if (args != null) {
      for (Sort s: args) {
        if (s == null) return null;
      }
    }
    return parser.env.sort(name, args);
  }
  
  public Term createTerm(String fun, Term[] params) {
    return parser.env.term(fun, params);
  }

  public TermVariable createTermVariable(String name, Sort sort) {
    if (sort == null) {
       return null;
    }
    try {
      TermVariable tv = parser.env.variable(name, sort);
      Object old = localVars.get(name);
      if (old == null) {
        old = name;
      }
      varScopes.add(old);
      localVars.put(tv.getName(), tv);
      return tv;
    } catch (SMTLIBException cannotHappen) {}
    // Actually unreachable
    throw new AssertionError();
  }
  
  public void popTermVariable() {
    Object old = varScopes.remove(varScopes.size()-1);
    if (old instanceof String) {
      localVars.remove((String) old);
    } else {
      TermVariable oldVar = (TermVariable) old;
      localVars.put(oldVar.getName(), oldVar);
    }
  }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration ::= DECLAREFUN STRING LPAR sorts_0 RPAR sort 
            {
              Object RESULT =null;
		String fun = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		List<Sort> params = (List<Sort>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Sort result = (Sort)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.env.declareFun(fun, params.toArray(new Sort[0]), result); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",11, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= LPAR BANG term annotations RPAR 
            {
              Term RESULT =null;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		List<Annotation> annots = (List<Annotation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (t == null) { // TODO do we need this check?
              RESULT = null;
            } else {
              RESULT = parser.env.annotate(t, annots.toArray(new Annotation[0]));
            }
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term ::= LPAR EXISTS LPAR sortedVars RPAR term RPAR 
            {
              Term RESULT =null;
		List<TermVariable> vars = (List<TermVariable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 for (int i = 0; i < vars.size(); i++)
              if (vars.get(i) != null)
                popTermVariable();
            RESULT = parser.env.quantifier(Script.EXISTS, vars.toArray(new TermVariable[0]), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term ::= LPAR FORALL LPAR sortedVars RPAR term RPAR 
            {
              Term RESULT =null;
		List<TermVariable> vars = (List<TermVariable>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 for (int i = 0; i < vars.size(); i++)
              if (vars.get(i) != null)
                popTermVariable();
            RESULT = parser.env.quantifier(Script.FORALL, vars.toArray(new TermVariable[0]), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term ::= LPAR LET LPAR varBindings RPAR term RPAR 
            {
              Term RESULT =null;
		List<Pair<TermVariable,Term>> bindings = (List<Pair<TermVariable,Term>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TermVariable[] vars = new TermVariable[bindings.size()];
            Term[] terms = new Term[bindings.size()];
            int i = 0;
            for (Pair<TermVariable, Term> binding : bindings) {
              if (binding != null) {
                vars[i] = binding.getFirst();
                terms[i] = binding.getSecond();
                popTermVariable();
              }
              i++;
            }
            RESULT = parser.env.let(vars, terms, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term ::= LPAR identifier terms RPAR 
            {
              Term RESULT =null;
		String fun = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		List<Term> lst = (List<Term>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = createTerm(fun, lst.toArray(new Term[0])); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // term ::= identifier 
            {
              Term RESULT =null;
		String fun = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = createTerm(fun, new Term[0]); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term ::= constantTerm 
            {
              Term RESULT =null;
		Term ct = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",13, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // terms ::= term 
            {
              List<Term> RESULT =null;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Term>(); RESULT.add(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("terms",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // terms ::= term terms 
            {
              List<Term> RESULT =null;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<Term> lst = (List<Term>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(0,t); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("terms",14, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sortedVar ::= LPAR STRING sort RPAR 
            {
              TermVariable RESULT =null;
		String sym = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Sort s = (Sort)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = createTermVariable(sym, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sortedVar",8, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sortedVars ::= sortedVar 
            {
              List<TermVariable> RESULT =null;
		TermVariable sv = (TermVariable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<TermVariable>(); RESULT.add(sv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sortedVars",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sortedVars ::= sortedVar sortedVars 
            {
              List<TermVariable> RESULT =null;
		TermVariable sv = (TermVariable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<TermVariable> lst = (List<TermVariable>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(0,sv); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sortedVars",9, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varBinding ::= LPAR STRING term RPAR 
            {
              Pair<TermVariable,Term> RESULT =null;
		String sym = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TermVariable tv = createTermVariable(sym, t.getSort());
            RESULT = Pair.of(tv, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varBinding",6, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varBindings ::= varBinding 
            {
              List<Pair<TermVariable,Term>> RESULT =null;
		Pair<TermVariable,Term> vb = (Pair<TermVariable,Term>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Pair<TermVariable, Term>>(); RESULT.add(vb); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varBindings",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varBindings ::= varBinding varBindings 
            {
              List<Pair<TermVariable,Term>> RESULT =null;
		Pair<TermVariable,Term> vb = (Pair<TermVariable,Term>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<Pair<TermVariable,Term>> lst = (List<Pair<TermVariable,Term>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(0,vb); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varBindings",7, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // annotation ::= NAMED STRING 
            {
              Annotation RESULT =null;
		String k = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Annotation(k, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("annotation",4, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // annotations ::= annotation 
            {
              List<Annotation> RESULT =null;
		Annotation a = (Annotation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Annotation>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("annotations",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // annotations ::= annotation annotations 
            {
              List<Annotation> RESULT =null;
		Annotation a = (Annotation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<Annotation> lst = (List<Annotation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("annotations",5, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sort ::= LPAR identifier sorts RPAR 
            {
              Sort RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		List<Sort> lst = (List<Sort>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = lookupSort(id, lst.toArray(new Sort[0])); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sort",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sort ::= identifier 
            {
              Sort RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lookupSort(id, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sort",1, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sorts ::= sort 
            {
              List<Sort> RESULT =null;
		Sort s = (Sort)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Sort>(); RESULT.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sorts",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sorts ::= sort sorts 
            {
              List<Sort> RESULT =null;
		Sort s = (Sort)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<Sort> lst = (List<Sort>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lst.add(0,s); RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sorts",2, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sorts_0 ::= 
            {
              List<Sort> RESULT =null;
		 RESULT = new ArrayList<Sort>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sorts_0",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sorts_0 ::= sorts 
            {
              List<Sort> RESULT =null;
		List<Sort> lst = (List<Sort>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lst; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sorts_0",3, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identifier ::= STRING 
            {
              String RESULT =null;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",0, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constantTerm ::= BINARY 
            {
              Term RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.env.binary(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantTerm",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constantTerm ::= HEXADECIMAL 
            {
              Term RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.env.hexadecimal(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantTerm",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constantTerm ::= DECIMAL 
            {
              Term RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.env.decimal(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantTerm",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constantTerm ::= NUMERAL 
            {
              Term RESULT =null;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.env.numeral(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constantTerm",12, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // outerTerm ::= term 
            {
              Object RESULT =null;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.termList.add(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outerTerm",10, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // goal ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("goal",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // goal ::= LPAR declaration RPAR goal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("goal",15, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= goal EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // goal ::= LPAR outerTerm RPAR goal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("goal",15, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

